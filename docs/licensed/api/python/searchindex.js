Search.setIndex({"docnames": ["getting_started/index", "index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/assertion_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/basetfmodel/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/build_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/generic_classifier_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/progresstracker/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/settings/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/graph_builders/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/create_graph/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/dataset_encoder/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model_saver/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/sentence_grouper/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/core_rnn_cell/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/fused_rnn_cell/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/gru_ops/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/lstm_ops/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn_cell/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/assertion_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/basetfmodel/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/build_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/generic_classifier_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/progresstracker/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/settings/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/graph_builders/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/create_graph/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/dataset_encoder/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model_saver/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/sentence_grouper/index", "reference/autosummary/sparknlp_jsl/alab/index", "reference/autosummary/sparknlp_jsl/annotator/annotation_merger/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_chunk_converter/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_dl_reg/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/assertion_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_converter/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_key_phrase_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_sentence_splitter/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunker_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/docmapper/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/index", "reference/autosummary/sparknlp_jsl/annotator/classification/document_log_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/document_ml_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_log_reg_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_svm_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_distilbert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/annotator/context/contextual_parser/index", "reference/autosummary/sparknlp_jsl/annotator/context/index", "reference/autosummary/sparknlp_jsl/annotator/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/annotator/deid/doccument_hashcoder/index", "reference/autosummary/sparknlp_jsl/annotator/deid/index", "reference/autosummary/sparknlp_jsl/annotator/deid/name_obfuscator/index", "reference/autosummary/sparknlp_jsl/annotator/deid/reIdentification/index", "reference/autosummary/sparknlp_jsl/annotator/deid/replacer/index", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/index", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/ner_disambiguator/index", "reference/autosummary/sparknlp_jsl/annotator/doc2_chunk_internal/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/average_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/entity_chunk_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/feature_assembler/index", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/generic_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/index", "reference/autosummary/sparknlp_jsl/annotator/merge/chunk_merge/index", "reference/autosummary/sparknlp_jsl/annotator/merge/index", "reference/autosummary/sparknlp_jsl/annotator/ner/index", "reference/autosummary/sparknlp_jsl/annotator/ner/iob_tagger/index", "reference/autosummary/sparknlp_jsl/annotator/ner/medical_ner/index", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_chunker/index", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_converter_internal/index", "reference/autosummary/sparknlp_jsl/annotator/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/date_normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/drug_normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/qa/index", "reference/autosummary/sparknlp_jsl/annotator/qa/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/annotator/re/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_ner_chunk_filter/index", "reference/autosummary/sparknlp_jsl/annotator/re/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/resolver_merger/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/annotator/resolution2_chunk/index", "reference/autosummary/sparknlp_jsl/annotator/router/index", "reference/autosummary/sparknlp_jsl/annotator/source_tracking_metadata_params/index", "reference/autosummary/sparknlp_jsl/annotator/tf_graph_builder/index", "reference/autosummary/sparknlp_jsl/base/index", "reference/autosummary/sparknlp_jsl/common/annotator_approach_internal/index", "reference/autosummary/sparknlp_jsl/common/annotator_model_internal/index", "reference/autosummary/sparknlp_jsl/common/annotator_properties_internal/index", "reference/autosummary/sparknlp_jsl/common/index", "reference/autosummary/sparknlp_jsl/compatibility/index", "reference/autosummary/sparknlp_jsl/custom_transformer/index", "reference/autosummary/sparknlp_jsl/eval/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/document_hashcoder/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/chunkmapper/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/docmapper/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/finance/graph/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/finance/index", "reference/autosummary/sparknlp_jsl/finance/seq_generation/index", "reference/autosummary/sparknlp_jsl/finance/seq_generation/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_classifier_dl/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_document_ml_classifier/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_ner/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/functions/index", "reference/autosummary/sparknlp_jsl/index", "reference/autosummary/sparknlp_jsl/internal/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/document_hashcoder/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/chunkmapper/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/docmapper/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/legal/graph/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/legal/index", "reference/autosummary/sparknlp_jsl/legal/seq_generation/index", "reference/autosummary/sparknlp_jsl/legal/seq_generation/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_classifier_dl/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_document_ml_classifier/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_ner/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/modelTracer/index", "reference/autosummary/sparknlp_jsl/nlp_test/bias/bias_testing/index", "reference/autosummary/sparknlp_jsl/nlp_test/bias/index", "reference/autosummary/sparknlp_jsl/nlp_test/index", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/index", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/noisy_label_fixing/index", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/noisy_label_testing/index", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/utils/index", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/index", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/robustness_fixing/index", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/robustness_testing/index", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/utils/index", "reference/autosummary/sparknlp_jsl/pretrained/index", "reference/autosummary/sparknlp_jsl/structured_deidentification/index", "reference/autosummary/sparknlp_jsl/text_to_documents_columns/index", "reference/autosummary/sparknlp_jsl/training/index", "reference/autosummary/sparknlp_jsl/training_log_parser/index", "reference/autosummary/sparknlp_jsl/updateModels/index", "reference/autosummary/sparknlp_jsl/util/index", "reference/autosummary/sparknlp_jsl/utils/alab_utils/index", "reference/autosummary/sparknlp_jsl/utils/conll_parse/index", "reference/autosummary/sparknlp_jsl/utils/deidentification_module/index", "reference/autosummary/sparknlp_jsl/utils/imports/index", "reference/autosummary/sparknlp_jsl/utils/index", "reference/autosummary/sparknlp_jsl/utils/licensed_annotator_type/index", "reference/autosummary/sparknlp_jsl/utils/log_parse/index", "reference/autosummary/sparknlp_jsl/utils/ner_utils/index", "reference/autosummary/sparknlp_jsl/utils/ocr_nlp_processor/index", "reference/autosummary/sparknlp_jsl/utils/ocr_utils/index", "reference/autosummary/sparknlp_jsl/utils/training_log_parser_utils/index", "reference/index"], "filenames": ["getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/assertion_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/basetfmodel/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/build_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/generic_classifier_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/progresstracker/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/settings/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/graph_builders/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/create_graph/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/dataset_encoder/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model_saver/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/sentence_grouper/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/core_rnn_cell/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/fused_rnn_cell/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/gru_ops/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/lstm_ops/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn_cell/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/assertion_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/basetfmodel/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/build_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/generic_classifier_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/progresstracker/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/settings/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/graph_builders/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/create_graph/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/dataset_encoder/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model_saver/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/sentence_grouper/index.rst", "reference/autosummary/sparknlp_jsl/alab/index.rst", "reference/autosummary/sparknlp_jsl/annotator/annotation_merger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_chunk_converter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_dl_reg/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/assertion_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_converter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_key_phrase_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_sentence_splitter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunker_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/docmapper/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/document_log_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/document_ml_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_log_reg_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_svm_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_distilbert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/context/contextual_parser/index.rst", "reference/autosummary/sparknlp_jsl/annotator/context/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/doccument_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/name_obfuscator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/reIdentification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/replacer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/index.rst", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/ner_disambiguator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/doc2_chunk_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/average_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/entity_chunk_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/feature_assembler/index.rst", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/merge/chunk_merge/index.rst", "reference/autosummary/sparknlp_jsl/annotator/merge/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/iob_tagger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/medical_ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_chunker/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_converter_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/date_normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/drug_normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_ner_chunk_filter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/resolver_merger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution2_chunk/index.rst", "reference/autosummary/sparknlp_jsl/annotator/router/index.rst", "reference/autosummary/sparknlp_jsl/annotator/source_tracking_metadata_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/tf_graph_builder/index.rst", "reference/autosummary/sparknlp_jsl/base/index.rst", "reference/autosummary/sparknlp_jsl/common/annotator_approach_internal/index.rst", "reference/autosummary/sparknlp_jsl/common/annotator_model_internal/index.rst", "reference/autosummary/sparknlp_jsl/common/annotator_properties_internal/index.rst", "reference/autosummary/sparknlp_jsl/common/index.rst", "reference/autosummary/sparknlp_jsl/compatibility/index.rst", "reference/autosummary/sparknlp_jsl/custom_transformer/index.rst", "reference/autosummary/sparknlp_jsl/eval/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/document_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/docmapper/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/finance/index.rst", "reference/autosummary/sparknlp_jsl/finance/seq_generation/index.rst", "reference/autosummary/sparknlp_jsl/finance/seq_generation/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_classifier_dl/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_document_ml_classifier/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_ner/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/functions/index.rst", "reference/autosummary/sparknlp_jsl/index.rst", "reference/autosummary/sparknlp_jsl/internal/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/document_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/docmapper/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/legal/index.rst", "reference/autosummary/sparknlp_jsl/legal/seq_generation/index.rst", "reference/autosummary/sparknlp_jsl/legal/seq_generation/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_classifier_dl/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_document_ml_classifier/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_ner/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/modelTracer/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/bias/bias_testing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/bias/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/noisy_label_fixing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/noisy_label_testing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/utils/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/robustness_fixing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/robustness_testing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/utils/index.rst", "reference/autosummary/sparknlp_jsl/pretrained/index.rst", "reference/autosummary/sparknlp_jsl/structured_deidentification/index.rst", "reference/autosummary/sparknlp_jsl/text_to_documents_columns/index.rst", "reference/autosummary/sparknlp_jsl/training/index.rst", "reference/autosummary/sparknlp_jsl/training_log_parser/index.rst", "reference/autosummary/sparknlp_jsl/updateModels/index.rst", "reference/autosummary/sparknlp_jsl/util/index.rst", "reference/autosummary/sparknlp_jsl/utils/alab_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/conll_parse/index.rst", "reference/autosummary/sparknlp_jsl/utils/deidentification_module/index.rst", "reference/autosummary/sparknlp_jsl/utils/imports/index.rst", "reference/autosummary/sparknlp_jsl/utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/licensed_annotator_type/index.rst", "reference/autosummary/sparknlp_jsl/utils/log_parse/index.rst", "reference/autosummary/sparknlp_jsl/utils/ner_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/ocr_nlp_processor/index.rst", "reference/autosummary/sparknlp_jsl/utils/ocr_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/training_log_parser_utils/index.rst", "reference/index.rst"], "titles": ["Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.assertion_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.build_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.settings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.graph_builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.create_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.rnn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.assertion_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.graph_builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.alab</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.annotation_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertion_chunk_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertion_dl_reg</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.assertion_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_sentence_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunker_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunkmapper_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.docmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.document_log_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.document_ml_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.generic_log_reg_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.generic_svm_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.context.contextual_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.context</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.doccument_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.name_obfuscator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.reIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.replacer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.disambiguation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.disambiguation.ner_disambiguator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.doc2_chunk_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.average_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.feature_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.generic_classifier.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.merge.chunk_merge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.merge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.iob_tagger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.medical_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.ner_chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.ner_converter_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer.date_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer.drug_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_ner_chunk_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution.resolver_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.source_tracking_metadata_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.tf_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common.annotator_approach_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common.annotator_model_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common.annotator_properties_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.compatibility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.custom_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.eval</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.docmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.seq_generation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.seq_generation.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.finance_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.docmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.seq_generation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.seq_generation.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.legal_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.modelTracer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.bias.bias_testing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.bias</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.noisy_labels</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.noisy_labels.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.robustness</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.robustness.robustness_fixing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.robustness.robustness_testing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.robustness.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.structured_deidentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.text_to_documents_columns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.training_log_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.updateModels</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.alab_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.conll_parse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.deidentification_module</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.imports</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.licensed_annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.log_parse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.ner_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.ocr_nlp_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.ocr_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.training_log_parser_utils</span></code>", "API Reference"], "terms": {"4": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "healthcar": [0, 1, 10, 12, 33, 35], "i": [0, 10, 12, 13, 16, 19, 20, 21, 22, 23, 24, 33, 35, 36, 39, 41, 43, 45, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 73, 74, 76, 77, 79, 80, 83, 87, 88, 89, 90, 91, 95, 97, 98, 99, 100, 103, 104, 105, 107, 116, 118, 119, 122, 123, 125, 128, 129, 132, 133, 134, 135, 138, 139, 141, 145, 147, 148, 151, 152, 154, 157, 158, 161, 163, 164, 165, 168, 169, 170, 172, 176, 177, 180, 181, 182, 184, 186, 187, 188, 192, 193, 200], "commerci": 0, "extens": [0, 76], "clinic": [0, 43, 45, 49, 52, 54, 61, 62, 63, 66, 67, 76, 77, 83, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 116, 118, 122, 123, 128, 129, 132, 133, 138, 139, 141, 145, 147, 151, 152, 157, 158, 161, 163, 168, 169, 170], "biomed": 0, "text": [0, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 54, 56, 57, 61, 62, 63, 64, 66, 67, 73, 74, 76, 77, 83, 86, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 103, 104, 105, 116, 118, 119, 123, 125, 128, 132, 133, 134, 135, 138, 139, 141, 145, 147, 148, 152, 154, 157, 161, 163, 164, 165, 168, 169, 170, 172, 178, 180, 181, 190, 192], "mine": 0, "If": [0, 10, 12, 13, 22, 23, 24, 33, 35, 36, 41, 43, 47, 49, 50, 51, 53, 61, 63, 64, 66, 67, 77, 80, 83, 87, 89, 91, 107, 113, 116, 118, 134, 139, 145, 147, 164, 169, 172, 176, 184, 188, 193], "you": [0, 10, 33, 41, 42, 43, 50, 52, 64, 66, 95, 105, 113, 116, 118, 145, 147, 184, 186], "don": [0, 51, 180, 181], "t": [0, 10, 23, 24, 51, 64, 66, 180, 181, 186, 192, 200], "have": [0, 23, 24, 41, 43, 50, 51, 52, 54, 77, 83, 87, 95, 103, 116, 122, 123, 132, 134, 139, 145, 151, 152, 161, 164, 169, 172, 176, 180], "subscript": 0, "yet": [0, 24], "can": [0, 10, 23, 33, 41, 44, 45, 47, 49, 51, 61, 62, 63, 64, 66, 67, 73, 77, 79, 83, 87, 89, 92, 100, 116, 118, 129, 133, 134, 138, 139, 145, 147, 158, 163, 164, 168, 169, 176, 177, 180, 181, 186, 192, 193], "ask": 0, "free": [0, 24], "trial": 0, "click": 0, "button": 0, "below": 0, "try": [0, 56, 57, 80, 91, 103, 113, 125, 135, 154, 165], "http": [0, 20, 22, 23, 24, 41, 73], "www": [0, 189], "johnsnowlab": [0, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 69, 70, 71, 73, 75, 76, 77, 80, 83, 86, 87, 88, 89, 90, 91, 95, 97, 98, 99, 100, 102, 103, 105, 116, 118, 122, 123, 125, 128, 129, 132, 133, 134, 135, 138, 139, 141, 145, 147, 151, 152, 154, 157, 158, 161, 163, 164, 165, 168, 169, 170], "com": [0, 24, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 69, 70, 71, 73, 75, 76, 77, 80, 83, 86, 87, 88, 89, 90, 91, 95, 97, 98, 99, 100, 102, 103, 105, 116, 118, 122, 123, 125, 128, 129, 132, 133, 134, 135, 138, 139, 141, 145, 147, 151, 152, 154, 157, 158, 161, 163, 164, 165, 168, 169, 170, 189], "provid": [0, 22, 23, 24, 41, 43, 50, 62, 64, 66, 87, 88, 111, 118, 134, 138, 139, 147, 164, 168, 169, 184, 187], "specif": [0, 10, 33, 77, 87, 92, 107, 139, 169, 172], "annot": [0, 10, 33, 41, 109, 110, 111, 116, 118, 119, 122, 123, 125, 128, 129, 132, 133, 134, 135, 138, 139, 141, 143, 145, 147, 148, 151, 152, 154, 157, 158, 161, 163, 164, 165, 168, 169, 170, 172, 181, 183, 186, 190, 198], "pipelin": [0, 10, 33, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 56, 57, 61, 62, 63, 64, 66, 67, 73, 74, 76, 77, 79, 80, 83, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 103, 104, 105, 116, 118, 119, 123, 125, 128, 132, 133, 134, 135, 138, 139, 141, 145, 147, 148, 152, 154, 157, 161, 163, 164, 165, 168, 169, 170, 171, 172, 177, 181, 183, 192, 198], "model": [0, 1, 5, 8, 10, 12, 15, 16, 23, 24, 28, 31, 33, 35, 38, 39, 41, 43, 44, 45, 48, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 71, 73, 76, 77, 80, 83, 86, 87, 88, 89, 90, 95, 97, 98, 99, 100, 103, 107, 110, 113, 116, 118, 122, 123, 125, 128, 129, 132, 133, 134, 135, 138, 139, 141, 145, 147, 151, 152, 154, 157, 158, 161, 163, 164, 165, 168, 169, 170, 171, 172, 177, 180, 181, 183, 188], "embed": [0, 10, 12, 16, 18, 33, 35, 39, 43, 45, 47, 49, 51, 52, 54, 61, 62, 63, 66, 67, 73, 79, 82, 86, 87, 88, 89, 95, 97, 98, 99, 100, 103, 105, 115, 116, 118, 123, 125, 128, 132, 133, 134, 138, 139, 143, 145, 147, 152, 154, 157, 161, 163, 164, 168, 169, 180, 181], "entiti": [0, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 54, 62, 64, 66, 69, 71, 73, 77, 83, 87, 88, 89, 90, 91, 95, 97, 98, 99, 100, 102, 103, 105, 116, 118, 122, 123, 125, 128, 129, 132, 138, 139, 141, 144, 145, 147, 151, 152, 154, 157, 158, 161, 168, 169, 170, 172, 176, 180, 181, 182, 184, 186, 190], "recognit": [0, 24, 62, 87, 90, 138, 139, 141, 168, 169, 170, 186], "link": [0, 73], "normal": [0, 13, 24, 36, 56, 57, 64, 82, 103, 107, 125, 134, 135, 143, 154, 164, 165, 180], "assert": [0, 10, 33, 41, 47, 51, 82, 121, 130, 143, 150, 159, 186, 187, 190, 195], "statu": [0, 43, 44, 45, 116, 145], "detect": [0, 44, 198], "de": [0, 66], "identif": [0, 184], "relat": [0, 10, 33, 41, 52, 54, 77, 95, 97, 98, 99, 100, 107, 122, 123, 128, 129, 132, 151, 152, 157, 158, 161, 172, 181, 186, 190], "extract": [0, 41, 43, 45, 47, 49, 64, 73, 76, 87, 88, 97, 98, 99, 100, 103, 116, 125, 128, 129, 139, 145, 154, 157, 158, 169, 171, 172, 180, 181, 186], "spell": [0, 115, 180], "check": [0, 10, 33, 43, 64, 107, 188, 200], "correct": [0, 176], "The": [0, 10, 13, 20, 21, 22, 23, 24, 33, 36, 42, 43, 47, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 69, 73, 76, 77, 79, 83, 87, 89, 90, 91, 95, 97, 100, 103, 105, 116, 118, 122, 123, 125, 129, 132, 133, 134, 135, 138, 139, 141, 145, 147, 151, 152, 154, 158, 161, 163, 164, 165, 168, 169, 170, 171, 177, 180, 182, 183, 184, 186, 192], "librari": [0, 1, 61, 62, 63, 74, 104, 113, 119, 133, 138, 148, 163, 168], "offer": 0, "access": 0, "sever": [0, 23, 43, 47, 66, 116, 118, 145, 147], "transform": [0, 13, 36, 41, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 61, 62, 63, 64, 66, 67, 73, 74, 76, 77, 79, 83, 87, 88, 90, 91, 92, 95, 97, 98, 99, 100, 103, 104, 114, 116, 118, 119, 123, 125, 128, 129, 132, 133, 134, 138, 139, 141, 145, 147, 148, 152, 154, 157, 158, 161, 163, 164, 168, 169, 170, 172], "jsl": [0, 41, 52, 54, 95, 123, 132, 152, 161, 190, 198], "bert": [0, 49, 61, 62, 63, 76, 87, 98, 100, 105, 128, 129, 133, 138, 139, 157, 158, 163, 168, 169], "biobert": [0, 172], "clinicalbert": 0, "glove": [0, 45], "med": 0, "icd": [0, 103, 125, 154], "o": [0, 24, 62, 86, 89, 138, 168, 184, 186, 200], "It": [0, 22, 24, 41, 66, 67, 79, 80, 87, 89, 118, 134, 147, 164, 172, 180, 182, 188, 192], "also": [0, 24, 61, 62, 63, 73, 111, 133, 138, 163, 168, 180], "includ": [0, 21, 41, 43, 83, 87, 89, 99, 106, 116, 139, 145, 169, 180, 181, 190], "over": [0, 19, 66, 180, 181, 198], "50": [0, 10, 24, 33, 52, 54, 64, 80, 87, 95, 122, 123, 132, 139, 151, 152, 161, 169], "pre": [0, 41, 74, 104, 119, 148], "train": [0, 2, 9, 10, 12, 15, 22, 23, 24, 25, 32, 33, 35, 38, 41, 43, 44, 45, 47, 51, 52, 54, 56, 57, 61, 62, 63, 64, 66, 74, 76, 77, 79, 80, 83, 86, 87, 88, 89, 91, 95, 97, 98, 100, 103, 104, 116, 118, 119, 123, 125, 128, 129, 132, 134, 135, 139, 143, 145, 147, 148, 152, 154, 157, 158, 161, 164, 165, 169, 172, 177, 180], "recogn": [0, 87, 89, 90, 100, 139, 169], "follow": [0, 19, 20, 64, 66, 87, 92, 118, 147, 172, 186, 189], "mani": [0, 18, 50, 73], "more": [0, 18, 19, 22, 23, 61, 63, 66, 74, 92, 104, 118, 119, 133, 138, 147, 148, 163, 168], "support": [0, 10, 33, 59, 87, 134, 164], "sign": [0, 186], "symptom": [0, 77], "treatment": [0, 100, 129, 158, 186], "procedur": 0, "test": [0, 43, 44, 48, 50, 87, 100, 105, 116, 134, 139, 145, 164, 169, 172, 177, 180, 181, 182, 186, 187, 193], "lab": [0, 41, 190], "section": [0, 97], "drug": [0, 77, 89, 100, 129, 158], "name": [0, 6, 10, 12, 20, 22, 24, 29, 33, 35, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 66, 67, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 83, 86, 87, 88, 89, 90, 91, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 113, 116, 118, 122, 123, 125, 128, 129, 133, 134, 135, 138, 139, 141, 145, 147, 151, 152, 154, 157, 158, 163, 164, 165, 168, 169, 170, 176, 180, 181, 182, 183, 184, 186, 187, 192, 193, 198], "dosag": [0, 77, 89], "strength": [0, 77, 89], "rout": 0, "durat": 0, "frequenc": [0, 24, 89, 180, 181], "risk": 0, "factor": [0, 24], "smoke": 0, "obes": 0, "diabet": [0, 49, 76], "hypertens": 0, "substanc": 0, "abus": 0, "anatomi": 0, "organ": [0, 62, 138, 168, 184], "subdivis": 0, "cell": [0, 12, 18, 19, 20, 22, 23, 24, 35, 62, 87, 138, 139, 168, 169, 176, 184], "structur": [0, 100, 129, 158, 184, 192], "tissu": 0, "gene": 0, "chemic": 0, "demograph": 0, "ag": [0, 66, 83, 86, 118, 142, 147, 184, 192], "gender": [0, 83, 86, 172], "height": [0, 15, 38, 178], "weight": [0, 22, 24, 41, 76, 77, 107, 144, 178], "race": 0, "ethnic": 0, "marit": 0, "vital": [0, 186], "sensit": [0, 47, 64, 76, 97, 99], "data": [0, 22, 23, 24, 41, 43, 44, 47, 49, 50, 51, 52, 54, 56, 57, 61, 62, 63, 64, 66, 67, 73, 74, 76, 77, 79, 80, 83, 86, 87, 89, 90, 91, 92, 95, 97, 98, 99, 100, 103, 104, 107, 116, 118, 119, 123, 125, 128, 132, 133, 134, 135, 138, 139, 141, 145, 147, 148, 152, 154, 157, 161, 163, 164, 165, 168, 169, 170, 172, 176, 177, 180, 181, 184, 186, 192], "patient": [0, 43, 44, 51, 52, 54, 64, 67, 95, 116, 123, 132, 145, 152, 161, 184], "address": [0, 49, 52, 54, 61, 62, 63, 76, 77, 88, 90, 100, 122, 123, 129, 133, 134, 138, 141, 151, 152, 158, 163, 164, 168, 170], "phone": [0, 184], "email": [0, 184], "date": [0, 42, 50, 66, 67, 91, 105, 118, 147, 184, 188, 192], "identifi": [0, 48, 50, 83, 105, 177, 184, 200], "For": [0, 19, 24, 47, 61, 62, 66, 74, 76, 86, 87, 90, 98, 100, 104, 118, 119, 128, 129, 133, 134, 138, 139, 141, 147, 148, 157, 158, 163, 164, 168, 169, 170], "inform": [0, 1, 23, 24, 64, 66, 67, 83, 91, 118, 147, 180], "visit": 0, "our": 0, "site": [0, 64], "built": [0, 24, 134, 164], "top": [0, 49, 61, 62, 63, 133, 138, 163, 168, 186], "apach": 0, "x": [0, 13, 20, 21, 24, 36, 176], "us": [0, 1, 10, 12, 18, 19, 20, 22, 23, 24, 35, 41, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 57, 59, 61, 62, 63, 64, 66, 67, 69, 73, 74, 76, 77, 79, 80, 83, 87, 88, 89, 90, 91, 95, 97, 98, 99, 100, 103, 104, 105, 107, 116, 118, 119, 122, 123, 125, 129, 132, 133, 134, 138, 139, 141, 145, 147, 148, 151, 152, 154, 158, 161, 163, 164, 168, 169, 170, 172, 177, 180, 181, 183, 184, 190, 192, 198], "need": [0, 10, 18, 23, 24, 33, 45, 64, 66, 76, 88, 97, 118, 147], "java": [0, 69, 70, 71, 109, 110, 115, 183, 186], "8": [0, 24, 61, 63, 77, 87, 133, 138, 139, 163, 168, 169, 186], "ar": [0, 10, 19, 20, 21, 23, 24, 33, 41, 44, 47, 49, 50, 53, 56, 57, 59, 61, 62, 63, 66, 73, 76, 77, 80, 83, 87, 89, 90, 97, 99, 100, 103, 105, 107, 113, 118, 125, 129, 133, 135, 138, 139, 141, 147, 154, 158, 163, 165, 168, 169, 170, 172, 176, 180, 181, 184, 186, 188, 190, 200], "pyspark": [0, 41, 43, 45, 47, 51, 52, 54, 56, 57, 61, 62, 63, 64, 66, 74, 76, 77, 80, 83, 86, 87, 88, 89, 91, 95, 97, 98, 100, 103, 104, 113, 116, 118, 119, 123, 125, 128, 129, 132, 133, 134, 135, 138, 139, 145, 147, 148, 152, 154, 157, 158, 161, 163, 164, 165, 168, 169, 171, 172, 177, 180, 181, 184, 185, 186, 190, 198], "6": [0, 10, 24, 33, 99, 134, 164, 186], "7": [0, 2, 25, 186], "recommend": [0, 73], "basic": [0, 22, 24], "knowledg": [0, 73], "framework": 0, "work": [0, 87], "environ": 0, "befor": [0, 24, 45, 49, 69, 70, 71, 87, 110], "pleas": [0, 61, 62, 87, 98, 128, 133, 134, 138, 139, 157, 163, 164, 168, 169], "refer": [0, 1, 41, 49, 66, 67, 69, 74, 97, 104, 118, 119, 147, 148, 192], "document": [0, 10, 33, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 56, 57, 61, 62, 63, 64, 66, 67, 73, 74, 76, 77, 80, 83, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 103, 104, 105, 116, 118, 119, 123, 125, 128, 129, 132, 133, 134, 135, 138, 139, 141, 145, 147, 148, 152, 154, 157, 158, 161, 163, 164, 165, 168, 169, 170, 172, 176, 180, 181, 190, 192], "first": [0, 23, 24, 48, 50, 64, 76, 87, 139, 169, 186], "let": [0, 49], "": [0, 10, 24, 41, 45, 47, 51, 66, 69, 70, 71, 73, 76, 87, 103, 106, 109, 110, 180, 181, 182], "make": [0, 41, 49, 64, 66, 67, 118, 147, 180], "sure": [0, 41, 66, 118, 147], "version": [0, 10, 33, 44, 89, 107, 111, 113, 114, 143, 183, 188], "oracl": 0, "openjdk": 0, "0_292": 0, "packag": 0, "pip": [0, 186], "extra": [0, 47], "index": [0, 13, 36, 43, 44, 116, 145, 176, 177, 190], "url": [0, 41, 184], "pypi": 0, "secret": [0, 41, 143], "code": [0, 21, 24, 41, 64, 66, 67, 103, 125, 154, 184, 186], "upgrad": 0, "part": [0, 24, 67, 74, 104, 119, 148, 176, 177, 193], "split": [0, 18, 24, 50, 80, 87, 177, 180, 186, 190, 200], "e": [0, 24, 45, 49, 61, 62, 63, 64, 66, 77, 87, 92, 97, 103, 116, 125, 133, 138, 139, 145, 154, 163, 168, 169, 172, 176, 180, 181, 188, 200], "onli": [0, 20, 21, 24, 41, 49, 52, 80, 83, 87, 180, 181, 186], "avail": [0, 10, 21, 33, 61, 62, 83, 87, 133, 134, 138, 139, 163, 164, 168, 169, 183], "user": [0, 64, 89, 181], "valid": [0, 10, 33, 43, 80, 87, 99, 116, 134, 139, 145, 164, 169, 177], "licens": 0, "did": 0, "receiv": [0, 24], "contact": [0, 184], "u": [0, 20, 24, 87, 139, 169, 188, 192], "href": 0, "mailto": 0, "info": [0, 176], "thi": [0, 1, 9, 10, 18, 19, 20, 21, 22, 23, 24, 32, 33, 43, 44, 45, 48, 49, 50, 51, 56, 57, 58, 61, 62, 63, 64, 66, 67, 69, 70, 71, 76, 83, 87, 89, 97, 98, 99, 110, 111, 116, 118, 134, 135, 139, 145, 147, 164, 165, 169, 171, 172, 177, 180, 181, 182, 184, 186, 188, 192, 193, 200, 201], "simpl": [0, 24], "piec": [0, 50], "import": [0, 10, 33, 41, 43, 45, 47, 51, 52, 54, 56, 57, 61, 62, 63, 64, 66, 67, 74, 76, 77, 79, 80, 83, 86, 87, 88, 89, 91, 95, 97, 98, 103, 104, 116, 118, 119, 123, 125, 128, 132, 133, 134, 135, 138, 139, 143, 145, 147, 148, 152, 154, 157, 161, 163, 164, 165, 168, 169, 178, 186, 194], "sparknlp_jsl": 0, "Or": 0, "sparksess": [0, 41, 61, 62, 63, 100, 113, 129, 133, 138, 158, 163, 168, 172, 177, 180, 181, 184, 185, 190, 192, 198], "modul": [0, 1, 21], "flexibl": [0, 19], "sql": [0, 41, 61, 62, 63, 100, 113, 129, 133, 138, 158, 163, 168, 171, 172, 177, 180, 181, 184, 185, 186, 190, 195, 198], "builder": [0, 107], "appnam": 0, "enterpris": 0, "master": 0, "local": [0, 61, 62, 63, 100, 129, 133, 138, 158, 163, 168], "config": [0, 64], "driver": 0, "memori": [0, 22, 23, 24, 61, 63, 133, 138, 163, 168], "16": [0, 186], "maxresults": 0, "2g": 0, "jar": [0, 41, 190, 198], "nlp_2": 0, "11": [0, 9, 32, 45, 51, 66, 91, 118, 147, 186], "version_publ": 0, "getorcr": 0, "main": [1, 45], "page": [1, 92, 176, 201], "workshop": [1, 24, 74, 87, 104, 119, 134, 139, 148, 164, 169], "hub": [1, 61, 62, 87, 133, 134, 138, 139, 163, 164, 168, 169], "welcom": 1, "python": [1, 19, 20, 21, 24], "legal": [1, 143], "financ": [1, 143], "contain": [1, 22, 23, 24, 41, 43, 44, 45, 52, 54, 61, 62, 63, 66, 67, 74, 83, 87, 89, 95, 97, 103, 104, 106, 107, 109, 110, 111, 116, 118, 119, 122, 123, 125, 132, 133, 138, 139, 145, 147, 148, 151, 152, 154, 161, 163, 168, 169, 172, 177, 181, 182, 184, 186, 192], "how": [1, 47, 49, 61, 62, 63, 73, 80, 83, 87, 89, 133, 134, 138, 163, 164, 168], "exampl": [1, 10, 19, 24, 33, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 56, 57, 61, 62, 63, 64, 66, 67, 73, 74, 76, 77, 79, 80, 83, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 103, 104, 105, 116, 118, 119, 123, 125, 128, 129, 132, 133, 134, 135, 138, 139, 141, 145, 147, 148, 152, 154, 157, 158, 161, 163, 164, 165, 168, 169, 170, 184, 186, 189], "get": [1, 13, 36, 41, 43, 107, 116, 134, 145, 164, 177, 180, 181, 190], "start": [1, 10, 18, 22, 33, 43, 44, 45, 74, 83, 87, 97, 103, 104, 116, 119, 125, 139, 143, 145, 148, 154, 169, 180, 181, 190, 200], "requir": [1, 22, 23, 24, 41, 43, 44, 45, 56, 57, 61, 63, 74, 87, 104, 116, 119, 133, 135, 138, 139, 145, 148, 163, 165, 168, 169, 186, 193], "instal": [1, 10, 41, 193], "session": [1, 15, 16, 38, 39, 41, 172, 177, 180, 181, 190, 198], "from": [1, 9, 10, 12, 16, 18, 20, 22, 23, 24, 32, 33, 35, 39, 41, 42, 43, 45, 47, 48, 49, 51, 52, 54, 56, 57, 61, 62, 63, 64, 66, 67, 69, 70, 71, 73, 74, 76, 77, 79, 80, 83, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 103, 104, 105, 110, 116, 118, 119, 123, 125, 128, 132, 133, 134, 135, 138, 139, 141, 145, 147, 148, 152, 154, 157, 161, 163, 164, 165, 168, 169, 170, 171, 172, 176, 180, 181, 182, 183, 186, 188, 189, 190], "api": 1, "assertionmodel": [2, 25, 43, 45, 47, 103, 116, 125, 145, 154], "seq_max_len": [2, 25], "feat_siz": [2, 10, 25, 33], "n_class": [2, 10, 25, 33], "devic": [2, 25, 184], "cpu": [2, 23, 25], "sourc": [2, 4, 5, 6, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 115, 116, 118, 119, 122, 123, 125, 128, 129, 132, 133, 134, 135, 138, 139, 141, 142, 143, 144, 145, 147, 148, 151, 152, 154, 157, 158, 161, 163, 164, 165, 168, 169, 170, 171, 172, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 195, 197, 198, 199, 200], "fully_connected_lay": [2, 25], "input_data": [2, 25], "output_dim": [2, 10, 24, 25, 33], "activation_func": [2, 25], "none": [2, 4, 6, 8, 10, 12, 13, 15, 16, 18, 20, 22, 23, 24, 25, 27, 29, 31, 33, 35, 36, 38, 39, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 69, 70, 71, 73, 75, 76, 77, 79, 80, 83, 86, 87, 88, 89, 90, 91, 95, 97, 98, 99, 100, 102, 103, 105, 110, 116, 118, 122, 123, 125, 128, 129, 132, 133, 134, 135, 138, 139, 141, 143, 145, 147, 151, 152, 154, 157, 158, 161, 163, 164, 165, 168, 169, 170, 172, 176, 178, 180, 181, 182, 183, 184, 186, 189, 190, 192, 193, 200], "add_bidirectional_lstm": [2, 25], "n_hidden": [2, 25], "30": [2, 25, 67, 91, 134, 164], "num_lay": [2, 25], "add_optim": [2, 25], "trainset": [2, 25], "testset": [2, 25], "epoch": [2, 25, 43, 80, 87, 116, 134, 139, 145, 164, 169, 180, 187, 197], "batch_siz": [2, 4, 15, 17, 18, 22, 23, 24, 25, 27, 38, 40], "64": [2, 10, 25, 33, 44, 51, 83, 86, 87, 134, 164, 186], "learning_r": [2, 4, 9, 25, 27, 32], "01": [2, 15, 25, 38, 45, 66, 67, 91, 118, 147], "dropout": [2, 15, 24, 25, 38, 43, 80, 87, 116, 134, 139, 145, 164, 169], "15": [2, 10, 25, 33, 67, 83, 86, 91], "epoch_acc": [2, 25], "calc_accuraci": [2, 25], "dataset": [2, 13, 15, 17, 25, 36, 38, 40, 43, 45, 87, 88, 100, 103, 114, 116, 125, 129, 134, 139, 145, 154, 158, 164, 169, 172, 177, 180, 186], "calcul": [2, 23, 24, 25, 43, 87, 103, 116, 139, 145, 169, 172, 177, 180, 181, 182], "accuraci": [2, 8, 25, 31, 87, 139, 169], "confusion_matrix": [2, 25], "sess": [2, 25], "persist_graph": [2, 25], "model_loc": [2, 4, 6, 10, 12, 27, 29, 33, 35], "model_filenam": [2, 4, 6, 10, 12, 27, 29, 33, 35], "assertion_model": [3, 11, 26, 34, 43], "model_id": [4, 27], "get_graph": [4, 27], "is_built": [4, 27], "export_graph": [4, 6, 27, 29], "generate_batch": [4, 27], "input": [4, 9, 18, 19, 20, 22, 23, 24, 27, 32, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 73, 74, 76, 77, 79, 80, 83, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 116, 118, 119, 122, 123, 125, 128, 129, 132, 133, 134, 135, 138, 139, 141, 145, 147, 148, 151, 152, 154, 157, 158, 161, 163, 164, 165, 168, 169, 170, 176, 180, 181, 190, 192, 198], "output": [4, 9, 13, 18, 22, 23, 24, 27, 32, 36, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 73, 74, 76, 77, 79, 80, 83, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 116, 118, 119, 122, 123, 125, 128, 129, 132, 133, 134, 135, 138, 139, 141, 145, 147, 148, 151, 152, 154, 157, 158, 161, 163, 164, 165, 168, 169, 170, 171, 176, 177, 180, 181, 182, 190, 192, 198], "fit_dataset": [4, 27], "training_set": [4, 27], "validation_set": [4, 27], "training_batch_s": [4, 27], "validation_batch_s": [4, 27], "epochs_n": [4, 8, 27, 31], "verbos": [4, 6, 27, 29, 43, 87, 116, 134, 139, 145, 164, 169, 187, 197, 200], "true": [4, 6, 10, 15, 19, 23, 24, 27, 29, 33, 38, 41, 42, 43, 49, 50, 52, 56, 57, 61, 62, 63, 64, 66, 67, 71, 73, 74, 79, 80, 87, 89, 91, 97, 103, 104, 105, 107, 109, 110, 115, 118, 119, 125, 133, 134, 135, 138, 147, 148, 154, 163, 164, 165, 168, 172, 177, 181, 183, 184, 186, 187, 190, 192, 193, 197, 198, 200], "progresstrack": [4, 7, 11, 27, 30, 34], "load_graph": [4, 27], "models_dir": [4, 9, 27, 32], "build": [4, 6, 10, 20, 22, 24, 27, 29, 33], "param": [4, 6, 10, 27, 29, 33, 41, 66, 69, 70, 71, 83, 110, 111, 118, 143, 147, 172, 176, 177, 180, 181, 182, 186, 190, 193, 198], "run_test": [4, 6, 27, 29, 181], "build_param": [5, 10, 28, 33], "genericclassifiermodel": [6, 29, 56, 57, 80, 135, 165], "basetfmodel": [7, 11, 30, 34], "build_model": [7, 11, 30, 34], "generic_classifier_model": [7, 11, 30, 34], "set": [7, 10, 11, 24, 30, 34, 41, 42, 43, 44, 47, 49, 50, 51, 52, 53, 54, 56, 57, 61, 62, 63, 64, 66, 67, 69, 70, 71, 73, 74, 76, 77, 79, 80, 83, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 103, 105, 106, 107, 110, 114, 116, 118, 123, 129, 139, 145, 147, 152, 158, 169, 172, 177, 180, 181, 182, 187, 190, 198], "batches_n": [8, 31], "on_training_start": [8, 31], "on_training_end": [8, 31], "on_batch": [8, 31], "loss": [8, 9, 24, 31, 32, 187, 197], "is_valid": [8, 31], "fals": [8, 10, 12, 13, 15, 19, 22, 23, 24, 31, 33, 35, 36, 38, 41, 43, 44, 45, 47, 49, 50, 51, 52, 54, 56, 57, 61, 62, 63, 64, 66, 67, 71, 73, 74, 76, 77, 80, 83, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 103, 104, 105, 116, 118, 119, 123, 125, 128, 129, 132, 133, 134, 135, 138, 139, 141, 142, 143, 145, 147, 148, 152, 154, 157, 158, 161, 163, 164, 165, 168, 169, 170, 172, 177, 180, 181, 184, 186, 190, 192, 193, 198, 200], "on_epoch": [8, 31], "get_report_interv": [8, 31], "print_progress": [8, 31], "end_of_epoch": [8, 31], "model_op": [9, 32], "gener": [9, 10, 16, 32, 33, 39, 41, 49, 67, 80, 87, 134, 139, 164, 169, 180, 181, 184, 190, 192, 198], "enumer": [9, 32, 190], "deriv": [9, 32, 58, 59], "defin": [9, 22, 32, 41, 45, 47, 51, 56, 57, 64, 83, 89, 91, 99, 135, 165, 181, 190], "new": [9, 24, 32, 41, 43, 44, 53, 67, 87, 89, 90, 97, 98, 103, 107, 111, 114, 125, 128, 141, 154, 157, 170, 171, 172, 176, 186, 188, 200], "init": [9, 32], "10": [9, 10, 15, 19, 32, 33, 38, 44, 52, 54, 67, 92, 95, 103, 123, 125, 132, 152, 154, 161, 177, 186], "model_tensor": [9, 32], "100": [9, 10, 15, 32, 33, 38, 80, 134, 164, 200], "acc": [9, 32], "101": [9, 15, 32, 38], "102": [9, 32], "target": [9, 10, 32, 33, 43, 44, 45, 73, 74, 77, 80, 97, 98, 104, 116, 119, 128, 145, 148, 157], "103": [9, 32], "104": [9, 32], "105": [9, 32], "run_typ": [9, 32], "evalu": [9, 32, 41, 172, 187, 197], "predict": [9, 10, 15, 24, 32, 33, 38, 43, 56, 57, 73, 80, 87, 116, 135, 139, 145, 165, 169, 172, 176, 177, 180, 181, 187, 197, 200], "datasets_dir": [9, 32], "logs_dir": [9, 32], "tmp": [9, 10, 32, 33, 100], "genericclassifi": [9, 32, 58, 59, 107], "default_model_node_nam": [9, 32], "except": [10, 33, 87, 180, 181, 193], "wrongtfvers": [10, 33], "rais": [10, 22, 23, 24, 33, 87, 193], "tensorflow": [10, 12, 16, 21, 23, 33, 35, 39, 43, 61, 62, 63, 80, 87, 97, 116, 133, 134, 138, 139, 145, 163, 164, 168, 169], "current": [10, 24, 33, 61, 62, 63, 83, 91, 100, 107, 113, 129, 133, 138, 158, 163, 168, 200], "xx": [10, 33], "tensorflowaddonsneed": 10, "when": [10, 12, 24, 35, 41, 43, 50, 64, 66, 83, 87, 88, 89, 91, 97, 103, 118, 125, 147, 154, 180, 181, 183, 193], "addon": 10, "tfgraphbuild": [10, 33, 107], "creat": [10, 12, 22, 23, 33, 35, 41, 44, 64, 67, 91, 99, 176, 177, 180, 181, 186], "graph": [10, 12, 33, 35, 43, 87, 97, 107, 116, 130, 139, 143, 145, 159, 169, 187], "ner_dl": [10, 11, 33, 34, 87, 139, 169], "generic_classifi": [10, 11, 33, 34, 82, 143], "assertion_dl": [10, 11, 33, 34, 43, 116, 145], "relation_extract": [10, 33, 82, 96, 126, 130, 155, 159], "nlp": [10, 12, 33, 35, 41, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 69, 70, 71, 73, 74, 75, 76, 77, 80, 83, 86, 87, 88, 89, 90, 91, 95, 97, 98, 99, 100, 102, 103, 104, 119, 122, 123, 129, 133, 134, 138, 139, 141, 148, 151, 152, 158, 163, 164, 168, 169, 170, 172, 190, 198, 201], "paramet": [10, 23, 33, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 56, 57, 61, 62, 63, 64, 66, 67, 69, 71, 73, 74, 76, 77, 79, 80, 83, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 103, 104, 105, 106, 111, 113, 116, 118, 119, 122, 123, 125, 128, 129, 132, 133, 134, 135, 138, 139, 141, 145, 147, 148, 151, 152, 154, 157, 158, 161, 163, 164, 165, 168, 169, 170, 171, 176, 177, 180, 181, 184, 186, 187, 188, 189, 197, 198], "dict": [10, 33, 41, 43, 64, 66, 77, 83, 89, 90, 97, 98, 100, 172, 176, 180, 181, 182, 184, 190, 192, 200], "tf_graph": [10, 33, 186], "get_model": [10, 33], "supports_auto_file_nam": [10, 33], "return": [10, 13, 22, 23, 24, 33, 36, 41, 47, 49, 52, 53, 54, 61, 62, 63, 66, 74, 76, 77, 80, 87, 90, 97, 98, 100, 102, 103, 104, 113, 118, 119, 122, 123, 125, 129, 133, 134, 138, 141, 147, 148, 151, 152, 154, 158, 163, 164, 168, 170, 172, 176, 177, 180, 181, 182, 183, 186, 187, 190, 193, 197, 198, 200], "automat": [10, 66, 100, 118, 129, 147, 158, 176], "file": [10, 16, 21, 33, 39, 41, 43, 64, 66, 69, 80, 83, 87, 89, 107, 116, 118, 139, 145, 147, 169, 172, 176, 177, 180, 181, 184, 187, 188, 190, 192, 197, 198], "method": [10, 22, 33, 41, 64, 66, 80, 89, 103, 118, 125, 147, 154, 176, 177, 180, 181, 186, 188, 192, 201], "overridden": [10, 33], "child": [10, 33], "get_model_filenam": [10, 33], "implement": [10, 18, 19, 20, 22, 24, 58, 59, 69, 70, 71, 100, 109, 110, 129, 158, 180, 181], "check_build_param": [10, 33], "given": [10, 18, 22, 24, 33, 52, 54, 67, 76, 77, 83, 95, 100, 123, 129, 132, 152, 158, 161, 172, 180, 181, 192], "get_build_param": [10, 33], "get_build_params_with_default": [10, 33], "default": [10, 12, 22, 23, 24, 33, 35, 41, 42, 43, 47, 49, 50, 51, 52, 53, 54, 56, 57, 61, 62, 63, 66, 73, 74, 76, 77, 80, 83, 87, 89, 90, 91, 92, 97, 99, 100, 103, 104, 105, 107, 113, 116, 118, 119, 122, 123, 125, 129, 133, 134, 135, 138, 139, 141, 145, 147, 148, 151, 152, 154, 158, 163, 164, 165, 168, 169, 170, 172, 176, 177, 180, 181, 182, 183, 184, 190, 192, 198, 200], "valu": [10, 22, 23, 33, 42, 43, 44, 47, 49, 50, 51, 53, 56, 57, 61, 62, 63, 64, 66, 67, 71, 73, 74, 76, 77, 79, 80, 83, 87, 89, 90, 91, 92, 97, 98, 99, 100, 103, 105, 106, 107, 111, 114, 116, 118, 125, 129, 133, 134, 135, 138, 139, 141, 145, 147, 154, 158, 163, 164, 165, 168, 169, 170, 176, 177, 178, 180, 181, 182, 184, 192, 200], "str": [10, 12, 13, 16, 33, 35, 36, 39, 41, 42, 43, 44, 49, 50, 51, 52, 53, 54, 56, 57, 61, 62, 63, 64, 66, 67, 69, 73, 74, 76, 77, 79, 80, 83, 86, 87, 89, 90, 92, 97, 98, 99, 100, 103, 105, 106, 107, 113, 122, 123, 129, 133, 134, 138, 141, 151, 152, 158, 163, 164, 168, 170, 172, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 197, 198], "ani": [10, 23, 33, 42, 67, 83, 87, 105, 139, 169, 172, 180, 181], "retriev": [10, 33, 180, 181], "found": [10, 33, 64, 74, 104, 119, 148, 180, 181], "get_model_build_param": [10, 33], "get_model_build_param_explan": [10, 33], "explan": [10, 33], "genericclassifiertfgraphbuild": [10, 33], "tf": [10, 16, 19, 21, 22, 23, 33, 39, 61, 62, 63, 133, 138, 163, 168], "genericclassifierapproach": [10, 33, 80], "extend": [10, 33, 44, 74, 87, 104, 119, 134, 139, 148, 164, 169, 186], "base": [10, 20, 22, 24, 33, 41, 43, 45, 47, 49, 51, 52, 53, 54, 56, 57, 61, 62, 63, 64, 66, 69, 70, 71, 73, 74, 76, 77, 79, 80, 83, 86, 87, 88, 89, 90, 91, 95, 97, 98, 100, 103, 104, 109, 110, 111, 116, 118, 119, 123, 125, 128, 132, 133, 134, 135, 138, 139, 141, 143, 145, 147, 148, 152, 154, 157, 161, 163, 164, 165, 168, 169, 170, 172, 177, 180, 181, 182, 190], "sparknlp": [10, 33, 43, 45, 47, 49, 51, 52, 54, 56, 57, 61, 62, 63, 64, 66, 74, 76, 77, 79, 80, 83, 86, 87, 88, 89, 90, 91, 95, 97, 98, 100, 103, 104, 116, 118, 119, 123, 125, 128, 132, 133, 134, 135, 138, 139, 141, 145, 147, 148, 152, 154, 157, 161, 163, 164, 165, 168, 169, 170, 172, 177, 180, 181, 190, 192], "datafram": [10, 33, 41, 44, 67, 99, 171, 172, 176, 177, 180, 181, 184, 185, 186, 187, 190, 192], "pd": [10, 33, 41, 67, 190], "read_csv": [10, 33], "petfind": [10, 33], "mini": [10, 33], "csv": [10, 33, 51, 64, 66, 79, 89, 118, 134, 147, 164, 180, 181, 186, 192], "dl_param": [10, 33], "input_dim": [10, 33], "302": [10, 33], "hidden_lay": [10, 33], "300": [10, 33, 97], "200": [10, 24, 33, 97], "hidden_act": [10, 33], "tanh": [10, 20, 24, 33, 107], "hidden_act_l2": [10, 33], "batch_norm": [10, 33], "output_act": 10, "softmax": [10, 18, 103, 107], "loss_func": 10, "cross_entropi": 10, "gc_graph": [10, 33], "auto": [10, 33, 107], "save": [10, 12, 16, 33, 35, 39, 41, 43, 52, 61, 62, 63, 66, 80, 87, 95, 100, 116, 129, 133, 134, 138, 139, 145, 158, 163, 164, 168, 169, 172, 176, 177, 180, 181, 189, 192, 198], "gcl": [10, 33], "pb": [10, 33, 80, 97], "we": [10, 22, 24, 41, 50, 51, 52, 54, 56, 57, 66, 73, 80, 95, 103, 118, 122, 123, 125, 132, 134, 135, 147, 151, 152, 154, 161, 164, 165], "modelfil": [10, 80], "gen_clf": [10, 33, 56, 57, 80, 135, 165], "setlabelcolumn": [10, 33, 56, 80, 87, 97, 107, 134, 135, 139, 164, 165, 169], "setinputcol": [10, 33, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 56, 57, 61, 62, 63, 64, 66, 67, 73, 74, 76, 77, 79, 80, 83, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 103, 104, 105, 107, 114, 116, 118, 119, 123, 125, 128, 132, 133, 134, 135, 138, 139, 141, 145, 147, 148, 152, 154, 157, 161, 163, 164, 165, 168, 169, 170], "featur": [10, 24, 33, 45, 79, 80, 83], "setoutputcol": [10, 33, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 56, 57, 61, 62, 63, 64, 66, 67, 73, 74, 76, 77, 79, 80, 83, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 103, 104, 105, 114, 116, 118, 119, 123, 125, 128, 132, 133, 134, 135, 138, 139, 141, 145, 147, 148, 152, 154, 157, 161, 163, 164, 165, 168, 169, 170], "setmodelfil": [10, 33, 80, 97], "setepochsnumb": [10, 33, 80, 97], "setbatchs": [10, 33, 43, 80, 87, 97, 98, 116, 134, 145, 164], "setfeaturesc": [10, 33, 80], "zscore": [10, 33, 80], "setfiximbal": [10, 33, 80, 97], "setlearningr": [10, 33, 43, 80, 97, 116, 145], "001": [10, 24, 33, 80, 87, 97, 139, 169], "setoutputlogspath": [10, 33, 43, 80], "log": [10, 33, 43, 45, 80, 87, 116, 134, 139, 145, 164, 169, 172, 177, 180, 181, 187, 197], "setvalidationsplit": [10, 33, 43, 80, 87, 97], "clf_pipelin": [10, 33], "stage": [10, 33, 41, 43, 45, 47, 48, 51, 64, 66, 73, 83, 86, 88, 89, 91, 92, 97, 98, 99, 103, 116, 118, 125, 128, 145, 147, 154, 157], "features_asm": [10, 33, 80], "bool": [10, 12, 13, 33, 35, 36, 41, 43, 47, 52, 61, 63, 64, 66, 71, 73, 74, 80, 83, 87, 89, 92, 95, 97, 99, 103, 106, 107, 180, 181, 184, 190, 192, 193, 198], "an": [10, 18, 19, 22, 23, 24, 33, 41, 43, 44, 47, 56, 57, 64, 66, 73, 74, 76, 77, 79, 83, 87, 90, 91, 97, 100, 103, 104, 111, 116, 118, 119, 125, 134, 135, 139, 141, 145, 147, 148, 154, 164, 165, 169, 170, 172, 177, 180, 181, 184, 186, 190, 198, 201], "otherwis": [10, 24, 33, 49, 52, 54, 61, 62, 63, 66, 71, 74, 76, 77, 79, 90, 100, 104, 118, 119, 122, 123, 129, 133, 134, 138, 141, 147, 148, 151, 152, 158, 163, 164, 168, 170, 172, 187, 193, 197, 200], "locat": [10, 41, 64, 73, 87, 89, 97, 183, 184, 188], "where": [10, 12, 16, 23, 24, 33, 35, 39, 41, 47, 52, 54, 66, 67, 74, 80, 86, 95, 97, 98, 104, 107, 118, 119, 122, 123, 128, 132, 147, 148, 151, 152, 157, 161, 176, 177, 180, 181, 186, 188], "logregclassifiertfgraphbuild": 10, "svmclassifiertfgraphbuild": 10, "assertiontfgraphbuild": [10, 33], "assertiondlapproach": [10, 33, 43, 107, 116, 145], "blstm_34_32_30_": [10, 33], "_": [10, 33], "format": [10, 23, 33, 41, 43, 64, 66, 69, 83, 86, 87, 91, 97, 118, 139, 147, 169, 172, 176, 177, 180, 181, 182, 184, 186, 192, 198], "setlabelcol": [10, 33, 43, 45, 57, 80, 103, 116, 125, 145, 154], "label": [10, 33, 41, 43, 45, 53, 56, 57, 58, 59, 61, 62, 63, 66, 80, 83, 86, 87, 89, 90, 97, 98, 100, 102, 103, 107, 115, 116, 118, 125, 129, 133, 134, 135, 138, 139, 141, 144, 145, 147, 154, 158, 163, 164, 165, 168, 169, 170, 176, 177, 180, 186, 187, 190, 198], "chunk": [10, 33, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 64, 66, 67, 73, 74, 76, 77, 83, 86, 88, 89, 91, 95, 97, 98, 99, 100, 103, 104, 105, 116, 118, 119, 122, 123, 128, 129, 132, 135, 145, 147, 148, 151, 152, 157, 158, 161, 165, 176, 186, 187, 192, 197, 198, 200], "128": [10, 12, 24, 33, 35, 43, 61, 62, 63, 116, 133, 138, 145, 163, 168], "setdropout": [10, 33, 43, 80, 87, 116, 134, 145, 164], "setepoch": [10, 33, 43, 116, 145], "setstartcol": [10, 33, 43, 45, 74, 116, 145], "setendcol": [10, 33, 43, 45, 116, 145], "end": [10, 23, 33, 43, 44, 45, 83, 86, 87, 97, 116, 145, 180, 181, 190, 200], "setmaxsentlen": [10, 33, 43, 116, 145], "250": [10, 33, 43, 77, 116, 145], "setenableoutputlog": [10, 33, 43], "training_log": [10, 33], "setgraphfold": [10, 33, 43, 87, 107], "nertfgraphbuild": [10, 33], "medicalnerapproach": [10, 33, 87, 107, 139, 169], "embeddings_dim": [10, 12, 33, 35], "nchar": [10, 12, 15, 33, 35, 38], "83": [10, 33], "ntag": [10, 12, 15, 33, 35, 38], "12": [10, 33, 67, 91, 186, 192], "medic": [10, 107, 172, 184, 189], "ner": [10, 15, 16, 33, 38, 39, 41, 43, 45, 49, 52, 54, 62, 66, 67, 73, 76, 77, 82, 83, 95, 100, 115, 116, 118, 123, 129, 130, 132, 137, 143, 145, 147, 152, 158, 159, 161, 166, 172, 177, 180, 181, 186, 190, 198], "is_med": [10, 12, 33, 35, 172], "medical_ner_graph": [10, 33], "nertagg": [10, 33, 76, 87, 97, 98, 128, 139, 157, 169], "sentenc": [10, 13, 15, 33, 36, 38, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 61, 62, 63, 64, 66, 73, 76, 77, 83, 86, 87, 88, 89, 90, 92, 95, 98, 99, 100, 102, 103, 105, 116, 118, 122, 123, 125, 128, 129, 132, 133, 134, 138, 139, 141, 145, 147, 151, 152, 154, 157, 158, 161, 163, 164, 168, 169, 170, 172, 176, 177, 180, 181, 186, 190, 192], "token": [10, 33, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 54, 56, 57, 61, 62, 63, 64, 66, 67, 73, 74, 76, 77, 83, 86, 87, 88, 89, 90, 95, 97, 98, 99, 100, 103, 104, 105, 116, 118, 119, 123, 125, 128, 132, 133, 134, 135, 138, 139, 141, 145, 147, 148, 152, 154, 157, 161, 163, 164, 165, 168, 169, 170, 176, 177, 180, 181, 186, 190, 192], "setmaxepoch": [10, 33, 87, 134, 139, 164, 169], "setrandomse": [10, 33, 87, 139, 169], "setverbos": [10, 33, 43, 87, 139, 169], "setevaluationlogextend": [10, 33], "setincludeconfid": [10, 33, 43, 87, 177], "ner_log": [10, 33], "setenablememoryoptim": [10, 33, 87], "relationextractiontfgraphbuild": [10, 33], "relationextractionapproach": [10, 33, 97, 107, 186], "6000": [10, 33], "relu": [10, 24, 33, 107], "re_with_bn": [10, 33], "re_approach": [10, 33], "rel": [10, 33, 52, 54, 76, 77, 91, 95, 122, 123, 132, 151, 152, 161, 186], "pos_tag": [10, 33, 77, 97, 99, 100, 176], "train_ner_chunk": [10, 33, 97, 186], "depend": [10, 23, 24, 33, 42, 50, 53, 77, 87, 97, 98, 99, 100, 102, 105, 128, 139, 157, 169, 172, 181, 190], "70": [10, 33, 51], "setfroment": [10, 33, 97], "begin1i": [10, 33], "end1i": [10, 33], "label1": [10, 33, 186], "settoent": [10, 33, 97], "begin2i": [10, 33], "end2i": [10, 33], "label2": [10, 33, 186], "tfgraphbuilderfactori": [10, 33], "factori": [10, 33], "differ": [10, 20, 24, 33, 41, 49, 79, 83, 99, 180, 181, 186, 198], "static": [10, 13, 15, 16, 24, 33, 36, 38, 39, 43, 45, 49, 52, 54, 56, 57, 58, 59, 61, 62, 63, 66, 69, 73, 76, 77, 80, 83, 87, 90, 97, 98, 100, 103, 116, 118, 122, 123, 125, 128, 129, 133, 134, 135, 138, 139, 141, 145, 147, 151, 152, 154, 157, 158, 163, 164, 165, 168, 169, 170, 183, 188], "spark": [10, 33, 41, 42, 43, 44, 48, 49, 51, 52, 54, 61, 62, 63, 64, 66, 67, 73, 74, 76, 77, 79, 83, 86, 87, 89, 90, 91, 92, 97, 98, 99, 100, 104, 105, 113, 115, 116, 118, 119, 122, 123, 128, 129, 133, 134, 138, 139, 141, 143, 145, 147, 148, 151, 152, 157, 158, 163, 164, 168, 169, 170, 172, 177, 180, 181, 184, 185, 186, 190, 192, 198, 201], "model_nam": [10, 33], "want": [10, 33, 41, 42, 43, 50, 52, 54, 64, 66, 73, 92, 95, 105, 116, 118, 123, 145, 147, 152, 184], "configur": [10, 33, 41], "path": [10, 33, 41, 43, 45, 48, 51, 52, 54, 56, 57, 64, 66, 76, 80, 83, 87, 89, 90, 95, 97, 103, 107, 116, 118, 122, 123, 125, 132, 134, 139, 141, 145, 147, 151, 152, 154, 161, 164, 169, 170, 172, 176, 177, 180, 181, 186, 187, 188, 189, 190, 192, 197, 198], "rb": [10, 33], "filenam": [10, 25, 33], "doesn": [10, 24], "modulenotfounderror": 10, "print_model_param": [10, 33], "allow": [10, 23, 24, 33, 41, 50, 61, 63, 87, 105, 133, 138, 139, 163, 168, 169, 184, 188], "descript": [10, 33, 41, 49, 103, 125, 154, 181, 186], "everi": [10, 19, 33, 41, 87, 139, 169, 180, 183], "create_graph": [11, 14, 34, 37], "dataset_encod": [11, 14, 34, 37], "ner_model": [11, 14, 34, 37, 52, 54, 73, 77, 95, 123, 132, 152, 161], "ner_model_sav": [11, 14, 34, 37], "sentence_group": [11, 14, 34, 37], "tf2contrib": 11, "core_rnn_cel": [11, 21], "fused_rnn_cel": [11, 21], "gru_op": [11, 21], "lstm_op": [11, 21], "rnn": [11, 18, 19, 21, 22, 24], "rnn_cell": [11, 19, 21], "graph_build": [11, 34], "int": [12, 24, 35, 41, 42, 43, 56, 57, 61, 62, 63, 66, 67, 69, 73, 77, 80, 87, 91, 97, 98, 99, 103, 105, 107, 134, 164, 176, 177, 180, 181, 184, 189, 192], "lstm_size": [12, 35], "gpu_devic": [12, 35], "nerdl": [12, 35, 172], "arg": [12, 13, 16, 22, 23, 24, 35, 36, 39, 43, 44, 53, 62, 180, 183, 190], "folder": [12, 16, 35, 39, 43, 61, 62, 63, 80, 87, 98, 100, 107, 116, 128, 129, 133, 134, 138, 139, 145, 157, 158, 163, 164, 168, 169, 188, 198], "number": [12, 22, 23, 24, 35, 41, 43, 45, 49, 56, 57, 66, 67, 80, 83, 87, 98, 103, 107, 116, 118, 128, 134, 135, 139, 145, 147, 157, 164, 165, 169, 172, 176, 177, 180, 181, 184, 189, 192, 200], "uniqu": [12, 35, 73], "tag": [12, 16, 35, 39, 43, 47, 51, 66, 86, 87, 88, 89, 97, 116, 118, 134, 139, 145, 147, 164, 169, 176, 180, 187, 192, 197, 200], "dimens": [12, 19, 22, 24, 35], "word": [12, 13, 35, 36, 52, 54, 66, 73, 86, 89, 90, 118, 123, 134, 141, 147, 152, 164, 170, 172, 180, 181, 200], "charact": [12, 13, 16, 35, 36, 39, 66, 69, 73, 89, 92, 118, 147, 180, 181], "option": [12, 23, 24, 35, 41, 43, 49, 51, 52, 54, 61, 62, 63, 64, 66, 76, 77, 79, 83, 87, 89, 90, 100, 122, 123, 129, 133, 134, 138, 139, 141, 151, 152, 158, 163, 164, 168, 169, 170, 176, 180, 181, 183, 184, 186, 192, 193, 198], "size": [12, 22, 23, 24, 35, 43, 61, 63, 80, 87, 107, 116, 133, 134, 138, 139, 145, 163, 164, 168, 169, 178], "hidden": [12, 15, 24, 35, 38, 62, 107, 138, 168, 178], "lstm": [12, 22, 24, 35, 87, 139, 169], "disk": [12, 16, 35, 39], "which": [12, 19, 23, 24, 35, 45, 49, 51, 58, 59, 61, 62, 63, 64, 66, 76, 77, 79, 83, 87, 89, 90, 91, 92, 97, 98, 100, 103, 113, 116, 125, 129, 133, 138, 139, 141, 145, 154, 158, 163, 168, 169, 170, 176, 177, 180, 181, 188, 193], "gpu": [12, 23, 35, 143], "being": [12, 13, 24, 35, 36, 66, 87, 105, 118, 147], "datasetencod": [13, 36], "embeddings_resolv": [13, 36], "tag2id": [13, 36], "piece_tag": [13, 36], "encod": [13, 16, 36, 39, 90, 97, 98, 99, 100, 107, 128, 129, 134, 141, 157, 158, 164, 170], "shuffl": [13, 36, 134, 164], "lower": [13, 36, 51, 52, 74, 87, 92, 95, 104, 119, 139, 148, 169, 180], "case": [13, 18, 22, 24, 36, 41, 44, 47, 49, 52, 61, 63, 64, 74, 76, 77, 87, 92, 95, 97, 99, 104, 119, 133, 138, 139, 148, 163, 168, 169, 180, 181, 200], "remov": [13, 36, 47, 49, 92, 180, 181], "addit": [13, 24, 36, 45, 66, 87, 103, 125, 134, 139, 154, 164, 169], "white": [13, 36, 47, 51, 67, 89, 178], "space": [13, 23, 24, 36, 176, 180], "process": [13, 24, 36, 43, 47, 51, 61, 62, 63, 74, 80, 83, 87, 89, 97, 98, 99, 103, 104, 116, 119, 125, 128, 133, 138, 139, 145, 148, 154, 157, 163, 168, 169, 172, 177, 180, 181, 198], "get_char_index": [13, 36], "list": [13, 22, 23, 36, 41, 43, 45, 47, 51, 56, 57, 61, 62, 63, 66, 77, 83, 87, 88, 89, 90, 97, 99, 100, 103, 105, 106, 107, 116, 118, 125, 129, 141, 145, 147, 154, 158, 170, 176, 177, 180, 181, 183, 184, 185, 187, 190, 192, 197, 198, 200, 201], "outpu": [13, 36], "layer": [13, 23, 24, 36, 43, 58, 61, 62, 63, 80, 107, 116, 133, 138, 145, 163, 168], "nermodel": [15, 38, 43, 47, 86, 87, 89, 116, 139, 145, 169], "dummy_tag": [15, 38], "use_contrib": [15, 38], "use_gpu_devic": [15, 38], "add_bilstm_char_repr": [15, 38], "dim": [15, 24, 38], "25": [15, 38, 66, 103, 118, 125, 147, 154, 186], "add_cnn_char_repr": [15, 38], "nfilter": [15, 38], "pad": [15, 38], "add_pretrained_word_embed": [15, 38], "add_context_repr": [15, 38], "hidden_s": [15, 38], "residu": [15, 38], "add_inference_lay": [15, 38], "crf": [15, 38, 87, 139, 169], "predictions_op_nam": [15, 38], "add_training_op": [15, 38], "clip_gradi": [15, 38], "train_op_nam": [15, 38], "num_tru": [15, 38], "arrai": [15, 38, 43, 56, 57, 61, 62, 63, 66, 74, 79, 83, 87, 88, 104, 106, 116, 118, 119, 133, 134, 135, 138, 139, 145, 147, 148, 163, 164, 165, 168, 169, 177], "fill": [15, 38], "l": [15, 38, 66, 186], "val": [15, 38], "get_sentence_length": [15, 38], "batch": [15, 18, 23, 24, 38, 41, 43, 61, 63, 80, 87, 107, 116, 133, 134, 138, 139, 145, 163, 164, 168, 169], "idx": [15, 38], "word_embed": [15, 38, 42, 43, 45, 50, 67, 73, 87, 97, 105, 116, 139, 145, 169], "get_sentence_token_length": [15, 38], "tag_id": [15, 38], "get_word_length": [15, 38], "char_id": [15, 38], "get_char_id": [15, 38], "get_from_batch": [15, 38], "get_tag_id": [15, 38], "get_word_embed": [15, 38], "slice": [15, 17, 38, 40, 52, 54, 76, 77, 123, 152], "init_vari": [15, 38], "epoch_start": [15, 38], "epoch_end": [15, 38], "32": [15, 17, 23, 24, 38, 40, 64, 105], "lr": [15, 38, 43, 87, 134, 139, 164, 169], "po": [15, 38, 42, 50, 51, 87, 97, 105, 115, 139, 169, 176, 180, 186, 190], "65": [15, 38], "measur": [15, 38], "20": [15, 24, 38, 67, 80, 91, 134, 164, 192], "get_softmax": [15, 38], "score": [15, 38, 43, 58, 59, 80, 87, 90, 100, 116, 129, 139, 141, 145, 158, 169, 170, 176, 177, 182, 187, 197, 200], "threshold": [15, 38, 51, 66, 73, 89, 90, 97, 98, 103, 118, 147, 176, 177, 187, 197], "close": [15, 38], "nermodelsav": [16, 39], "embeddings_fil": [16, 39], "restore_tensorflow_st": [16, 39], "export_dir": [16, 39], "restor": [16, 39, 49, 52, 54, 61, 62, 63, 76, 77, 87, 90, 100, 122, 123, 129, 133, 134, 138, 141, 151, 152, 158, 163, 164, 168, 170], "directori": [16, 39, 41], "save_model": [16, 39], "separ": [16, 39, 41, 47, 49, 51, 66, 69, 83, 89, 97, 99, 172, 176, 192], "variabl": [16, 20, 22, 24, 39], "sentencegroup": [17, 40], "bucket_length": [17, 40], "get_bucket_id": [17, 40], "length": [17, 22, 23, 40, 41, 43, 45, 61, 62, 63, 66, 73, 83, 107, 116, 118, 133, 138, 145, 147, 163, 168, 177, 180, 181, 192], "core": 18, "embeddingwrapp": 18, "inputprojectionwrapp": 18, "outputprojectionwrapp": 18, "rnncell": [18, 19, 23, 24], "embedding_class": 18, "embedding_s": 18, "initi": [18, 20, 22, 23, 24, 73, 87, 97, 172, 186], "reus": [18, 20, 22, 24], "oper": [18, 19, 23, 24, 49], "ad": [18, 180, 181], "note": [18, 87, 134, 139, 164, 169, 200], "mai": [18, 22, 24, 44, 64, 74, 104, 119, 148], "effici": [18, 19, 22, 23], "wrapper": [18, 20, 24, 115, 186], "instead": [18, 20, 61, 63, 180], "concaten": [18, 23, 49], "whole": [18, 49], "sequenc": [18, 19, 22, 23, 61, 63, 66, 67, 107, 118, 133, 147, 163], "your": [18, 41, 50, 87, 134, 139, 164, 169, 184], "time": [18, 19, 20, 23, 24, 41, 66, 118, 147, 180], "do": [18, 23, 64, 87, 89, 180, 181], "feed": [18, 61, 63], "zero_st": [18, 24], "dtype": [18, 22, 23, 24], "call": [18, 20, 22, 24, 73], "state": [18, 22, 23, 24, 62, 87, 134, 138, 139, 164, 168, 169, 180, 184, 186], "run": [18, 22, 23, 24, 180, 181], "num_proj": [18, 24], "activ": [18, 24, 97, 98, 107, 128, 157, 172, 177, 180, 181], "input_s": [18, 22, 23, 24], "project": [18, 24, 41], "output_s": [18, 22], "directli": [18, 41], "construct": [19, 24, 62, 138, 168], "fuse": 19, "fusedrnncel": [19, 22], "abstract": [19, 22, 107, 114], "object": [19, 41, 53, 61, 62, 63, 87, 115, 133, 134, 138, 139, 163, 164, 168, 169, 186, 192], "repres": [19, 24, 41, 47, 49, 51, 66, 83, 118, 147, 198], "A": [19, 22, 23, 24, 64, 77, 80, 83, 86, 87, 88, 89, 90, 100, 103, 107, 125, 129, 141, 154, 158, 170, 176, 177, 180, 183, 184, 186, 192], "entir": [19, 22, 61, 63], "expand": 19, "In": [19, 24, 44, 49, 64, 67, 98, 128, 134, 157, 164], "effect": 19, "recurr": [19, 22, 23, 24, 44, 83, 86], "network": [19, 22, 23, 24, 58, 87, 139, 169], "unlik": [19, 22], "subclass": [19, 22, 69, 70, 71, 110], "onc": [19, 98, 128, 157], "put": [19, 33, 50, 73, 134, 164], "loop": 19, "insid": [19, 134, 164], "usual": [19, 89, 100, 129, 158], "lead": 19, "much": [19, 22, 80, 134, 164], "complex": 19, "less": [19, 23, 66, 118, 147], "must": [19, 22, 23, 24, 43, 45, 67, 74, 104, 116, 119, 145, 148], "__call__": 19, "signatur": 19, "fusedrnncelladaptor": 19, "use_dynamic_rnn": 19, "adaptor": 19, "timereversedfusedrnn": 19, "revers": 19, "compat": [19, 22, 61, 62, 63, 87, 133, 138, 139, 143, 163, 168, 169, 172], "v1": 19, "nn": [19, 51, 88], "basicrnncel": 19, "fw_lstm": 19, "contrib": [19, 21, 87, 139, 169], "bw_lstm": 19, "fw_out": 19, "fw_state": 19, "bw_out": 19, "bw_state": 19, "block": [20, 22], "gru": [20, 24], "op": [20, 21, 22], "layerrnncel": [20, 22], "grublockcel": 20, "num_unit": [20, 22, 24], "cell_siz": 20, "gru_cel": 20, "deprec": [20, 186], "grublockcellv2": 20, "arxiv": [20, 22, 23, 24], "org": [20, 22, 23, 24, 73], "ab": [20, 22, 23, 24], "1406": [20, 24], "1078": [20, 24], "comput": [20, 23, 24, 49, 76, 200], "forward": [20, 23], "propag": [20, 24], "step": [20, 24, 47], "kernel": 20, "mathemat": 20, "equat": [20, 24], "bias": [20, 22, 24], "b_ru": 20, "constant_initi": 20, "b_c": 20, "x_h_prev": 20, "h_prev": 20, "r_bar": 20, "u_bar": 20, "w_ru": 20, "r": [20, 24, 52, 95, 186], "sigmoid": [20, 44, 107], "h_prevr": 20, "circ": [20, 24], "x_h_prevr": 20, "c_bar": 20, "w_c": [20, 24], "c": [20, 24, 66, 69], "h": [20, 24], "input_shap": [20, 22, 24], "temporari": 20, "impl": 20, "scheme": [20, 86, 186], "distribut": [21, 113, 172], "origin": [21, 24, 56, 57, 66, 89, 91, 103, 118, 125, 135, 147, 154, 165, 180, 181, 200], "modifi": [21, 83, 86, 89, 181], "chang": [21, 24, 83, 89, 176, 180, 181, 193], "just": [21, 87, 139, 169, 180, 181], "therefor": [21, 24], "all": [21, 24, 41, 49, 50, 56, 57, 61, 63, 66, 77, 80, 87, 89, 92, 103, 106, 113, 118, 125, 135, 139, 147, 154, 165, 169, 180, 181, 188, 190, 201], "function": [21, 41, 58, 59, 103, 107, 171, 186, 192, 201], "enabl": [21, 24, 43, 47, 51, 71, 87, 139, 169], "lstmblockcel": 22, "forget_bia": [22, 24], "cell_clip": [22, 24], "use_peephol": [22, 24], "lstm_cell": 22, "1409": 22, "2329": 22, "add": [22, 24, 91, 171, 176, 180, 181, 184], "forget": [22, 24], "gate": [22, 24], "order": [22, 24, 49, 83, 106], "reduc": [22, 24], "scale": [22, 24, 80], "begin": [22, 23, 24, 44, 67, 74, 83, 86, 87, 97, 99, 103, 104, 119, 125, 148, 154, 180, 181, 190], "rnn_cell_impl": [22, 24], "lstmcell": [22, 24], "monolith": 22, "should": [22, 24, 33, 41, 43, 49, 64, 69, 70, 71, 73, 76, 87, 89, 110, 116, 134, 139, 145, 164, 169, 172, 176, 177, 180, 181, 182, 183, 186, 192, 193], "faster": [22, 61, 63, 133, 138, 163, 168], "bia": [22, 24, 143, 174], "matric": [22, 24], "long": [22, 24, 44, 186], "scope": [22, 23, 24, 43, 116, 145], "match": [22, 23, 43, 45, 61, 63, 64, 66, 73, 74, 83, 88, 104, 116, 118, 119, 133, 138, 145, 147, 148, 163, 168, 181], "inputs_shap": [22, 24], "short": [22, 24], "term": [22, 24, 43, 44, 51, 56, 57, 66, 69, 116, 118, 135, 145, 147, 165, 180, 181, 184], "lstmblockwrapp": 22, "helper": [22, 23, 184, 188], "housekeep": 22, "altern": 22, "similar": [22, 24, 66, 118, 147, 177, 200], "type": [22, 23, 24, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 61, 62, 63, 64, 66, 67, 73, 74, 76, 77, 80, 83, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 116, 118, 119, 122, 123, 125, 128, 129, 132, 133, 134, 135, 138, 139, 141, 145, 147, 148, 151, 152, 154, 157, 158, 161, 163, 164, 165, 168, 169, 170, 180, 181, 182, 187, 190, 197, 198, 200], "_call_cel": 22, "properti": [22, 23, 66, 111, 118, 147], "unit": [22, 24, 92, 97, 98, 107, 128, 157], "initial_st": 22, "sequence_length": [22, 23], "d": [22, 24, 41, 66, 184], "tensor": [22, 23, 24], "shape": [22, 23, 24], "time_len": 22, "tupl": [22, 23, 24, 176, 180, 181], "initial_cell_st": 22, "initial_output": 22, "self": [22, 24, 53, 79], "_num_unit": 22, "expect": [22, 91, 186], "zero": [22, 23, 90, 100, 129, 141, 158, 170], "ha": [22, 23, 24, 41, 43, 47, 49, 51, 53, 56, 57, 64, 66, 67, 74, 76, 87, 91, 97, 104, 116, 119, 134, 135, 145, 148, 164, 165, 177, 198], "heterogen": 22, "specifi": [22, 24, 43, 56, 57, 66, 67, 77, 80, 83, 86, 87, 97, 100, 106, 129, 135, 158, 165], "each": [22, 23, 24, 41, 43, 45, 49, 56, 57, 66, 76, 80, 83, 87, 100, 116, 118, 129, 134, 135, 139, 145, 147, 158, 164, 165, 169, 172, 176, 177, 180, 181, 182, 190, 198], "int32": [22, 23], "int64": [22, 23], "vector": [22, 23, 24, 49, 56, 57, 59, 79, 80, 135, 165], "element": [22, 23, 176], "pair": [22, 24, 41, 47, 51, 83, 89, 97, 98, 99, 100, 129, 158], "final": [22, 23, 192], "cell_stat": 22, "valueerror": [22, 23, 24], "mismatch": 22, "lstmblockfusedcel": 22, "lstm_fused_cel": 22, "extrem": 22, "singl": [22, 23, 24, 49, 52, 58, 66, 79, 83, 87, 89, 134, 139, 164, 169, 172, 176, 180, 190], "both": [22, 23, 24, 62, 64, 66, 76, 118, 138, 147, 168, 172, 180, 181, 184], "than": [22, 51, 66, 87, 118, 147], "abov": [22, 200], "consist": [22, 24, 49, 66, 100, 118, 129, 147, 158, 176, 177, 180], "stack_bidirectional_rnn": 23, "cells_fw": 23, "cells_bw": 23, "initial_states_fw": 23, "initial_states_bw": 23, "bidirect": [23, 24], "neural": [23, 24, 58, 87, 139, 169], "stack": [23, 24], "combin": [23, 24, 76, 89, 99, 180, 181], "backward": 23, "next": [23, 91], "bidirectional_rnn": 23, "doe": [23, 24, 83], "share": [23, 24], "between": [23, 24, 41, 43, 58, 59, 66, 76, 77, 87, 88, 89, 98, 99, 100, 116, 118, 128, 129, 134, 139, 145, 147, 157, 158, 164, 169, 177, 180, 181, 184, 186, 200], "direct": [23, 24, 41, 97, 98, 99, 107, 128, 157], "intermedi": 23, "As": [23, 24], "describ": [23, 24, 49, 172], "1303": 23, "5778": 23, "instanc": [23, 41, 76, 90, 97, 98, 111, 128, 141, 157, 170, 172], "one": [23, 24, 41, 42, 43, 61, 63, 75, 76, 77, 80, 83, 89, 92, 114, 116, 145, 176, 180, 181, 184], "per": [23, 24, 41, 43, 45, 50, 61, 63, 73, 80, 87, 89, 116, 134, 139, 145, 164, 169, 187, 197, 200], "nest": 23, "appropri": [23, 41, 181], "cell_fw": 23, "state_s": [23, 24], "same": [23, 24, 41, 49, 66, 83, 89, 118, 147, 172, 177, 180, 181], "correspond": [23, 49, 58, 59, 66, 73, 76, 118, 147, 176, 177, 180, 181, 182], "either": [23, 45, 49, 74, 86, 104, 119, 134, 148, 164, 193], "actual": 23, "variablescop": 23, "subgraph": 23, "output_state_fw": 23, "output_state_bw": 23, "depth": [23, 24], "output_states_fw": 23, "output_states_bw": 23, "typeerror": 23, "cell_bw": 23, "empti": [23, 74, 77, 80, 83, 103, 104, 119, 148], "stack_bidirectional_dynamic_rnn": 23, "parallel_iter": 23, "time_major": 23, "swap_memori": 23, "dynam": [23, 24], "max_tim": 23, "iter": [23, 45, 56, 57, 135, 165, 180, 181], "parallel": 23, "those": [23, 67, 89], "tempor": 23, "trade": 23, "off": [23, 44, 87, 116, 134, 139, 145, 164, 169], "take": [23, 61, 63, 66, 76, 79, 80, 111, 118, 133, 147, 163, 176, 177, 192], "while": [23, 41, 44, 91, 103, 125, 154, 172], "smaller": 23, "longer": [23, 83, 177], "bit": [23, 61, 63, 133, 163], "becaus": [23, 69, 70, 71, 110, 186], "avoid": [23, 24, 41, 172, 177, 180, 181], "transpos": 23, "howev": [23, 51], "most": [23, 49, 87, 139, 169, 177], "major": 23, "so": [23, 24, 59, 134, 164], "accept": [23, 134, 164], "emit": 23, "form": [23, 56, 57, 73, 77, 134, 135, 164, 165], "transpar": [23, 178], "swap": [23, 180, 181], "produc": [23, 24, 83, 89], "infer": [23, 24, 87, 100, 129, 139, 158, 169], "back": 23, "prop": 23, "would": [23, 134, 164], "typic": 23, "fit": [23, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 56, 57, 61, 62, 63, 64, 66, 67, 73, 74, 76, 77, 79, 80, 83, 87, 88, 90, 91, 92, 95, 97, 98, 99, 100, 103, 104, 107, 116, 118, 119, 123, 125, 128, 132, 133, 134, 135, 138, 139, 141, 145, 147, 148, 152, 154, 157, 161, 163, 164, 165, 168, 169, 170, 198], "veri": [23, 66, 118, 147], "minim": [23, 90, 97, 98, 100, 128, 129, 141, 157, 158, 170], "perform": [23, 24, 87, 172, 187, 197, 200], "penalti": 23, "layers_output": 23, "coupledinputforgetgatelstmcel": 24, "proj_clip": 24, "num_unit_shard": 24, "num_proj_shard": 24, "state_is_tupl": 24, "math_op": 24, "layer_norm": 24, "norm_gain": 24, "norm_shift": 24, "non": [24, 43, 77, 92], "peephol": 24, "pdf": [24, 198], "semanticscholar": 24, "1154": 24, "0131eae85b2e11d53df7f1360eeb6476e7f4": 24, "felix": 24, "ger": 24, "jurgen": 24, "schmidhub": 24, "fred": 24, "cummin": 24, "learn": [24, 43, 80, 87, 97, 116, 134, 139, 145, 164, 169], "continu": [24, 103, 125, 154], "iet": 24, "850": 24, "855": 24, "1999": [24, 91], "research": 24, "googl": 24, "pub": 24, "archiv": 24, "43905": 24, "hasim": 24, "sak": 24, "andrew": 24, "senior": 24, "francois": 24, "beaufai": 24, "architectur": [24, 87, 139, 169], "larg": [24, 61, 63, 87, 133, 138, 139, 163, 168, 169], "acoust": 24, "interspeech": 24, "2014": 24, "coupl": 24, "1503": 24, "04069": 24, "greff": 24, "et": 24, "al": 24, "search": [24, 43, 73, 87, 103, 125, 154], "odyssei": 24, "peep": 24, "hole": 24, "connect": [24, 41], "1607": 24, "06450": 24, "jimmi": 24, "lei": 24, "ba": 24, "jami": 24, "ryan": 24, "kiro": 24, "geoffrei": 24, "hinton": 24, "appli": [24, 66, 92, 118, 147, 176, 180, 181, 186], "intern": [24, 89, 111, 143, 183], "nonlinear": 24, "2d": 24, "column": [24, 41, 42, 43, 44, 45, 50, 52, 54, 56, 57, 64, 66, 67, 74, 79, 80, 83, 86, 87, 92, 95, 97, 103, 104, 105, 106, 107, 116, 118, 119, 122, 123, 125, 132, 134, 135, 139, 145, 147, 148, 151, 152, 154, 161, 164, 165, 169, 171, 172, 177, 180, 181, 184, 185, 186, 190, 192], "c_state": 24, "m_state": 24, "after": [24, 44, 45, 56, 57, 61, 62, 63, 87, 91, 133, 135, 138, 163, 165, 168, 180], "read": [24, 43, 64, 66, 76, 79, 83, 89, 90, 134, 141, 164, 170, 176, 180, 181, 186], "previou": [24, 200], "wa": [24, 41, 43, 44, 50, 51, 52, 54, 67, 77, 95, 116, 123, 132, 134, 145, 152, 161, 164], "here": 24, "cannot": 24, "via": [24, 47, 51], "timefreqlstmcel": 24, "feature_s": 24, "frequency_skip": 24, "tara": 24, "n": [24, 45, 49, 73, 87, 139, 169, 189], "sainath": 24, "bo": 24, "li": 24, "pattern": [24, 41, 66, 88, 92, 118, 147, 180, 190], "v": [24, 45, 87, 187, 197], "convolut": 24, "lvcsr": 24, "task": [24, 41, 61, 62, 63, 100, 129, 133, 138, 158, 163, 168, 190], "submit": 24, "2016": 24, "clip": 24, "gridlstmcel": 24, "share_time_frequency_weight": 24, "num_frequency_block": 24, "start_freqindex_list": 24, "end_freqindex_list": 24, "couple_input_forget_g": 24, "grid": [24, 176], "nal": 24, "kalchbrenn": 24, "ivo": 24, "danihelka": 24, "alex": 24, "grave": 24, "proc": 24, "iclr": 24, "1507": 24, "01526": 24, "shared_weight": 24, "flag": [24, 80, 176], "_state_is_tupl": 24, "bidirectionalgridlstmcel": 24, "backward_slice_offset": 24, "gridlstm": 24, "henc": 24, "affect": [24, 49], "real": [24, 87, 139, 169], "onlin": 24, "system": [24, 184], "two": [24, 44, 49, 53, 66, 75, 83, 89, 118, 147], "attentioncellwrapp": 24, "attn_length": 24, "attn_siz": 24, "attn_vec_s": 24, "attent": 24, "1601": 24, "06733": 24, "lstma": 24, "highwaywrapp": 24, "couple_carry_transform_g": 24, "carry_bias_init": 24, "highwai": 24, "k": [24, 56, 57, 103, 177, 180], "srivastava": 24, "j": 24, "preprint": 24, "1505": 24, "00387": 24, "2015": 24, "layernormbasiclstmcel": 24, "dropout_keep_prob": 24, "dropout_prob_se": 24, "1603": 24, "05118": 24, "without": [24, 66, 118, 147, 180, 181], "stanislau": 24, "semeniuta": 24, "aliaksei": 24, "severyn": 24, "erhardt": 24, "barth": 24, "nascel": 24, "use_bia": 24, "kwarg": 24, "na": 24, "paper": 24, "1611": 24, "01578": 24, "barret": 24, "zoph": 24, "quoc": 24, "le": 24, "reinforc": 24, "2017": 24, "ugrnncel": 24, "updat": [24, 176, 188], "ugrnn": 24, "compromis": 24, "vanilla": 24, "There": 24, "determin": [24, 47, 49, 97, 99, 100, 129, 158], "whether": [24, 43, 47, 49, 50, 52, 53, 56, 57, 61, 63, 64, 66, 73, 74, 80, 83, 87, 89, 92, 97, 99, 100, 103, 104, 106, 107, 116, 118, 119, 125, 129, 133, 134, 135, 138, 139, 145, 147, 148, 154, 158, 163, 164, 165, 168, 169, 172, 181, 187], "integr": 24, "instantan": 24, "idea": 24, "feedforward": 24, "09913": 24, "jasmin": 24, "collin": 24, "jascha": 24, "sohl": 24, "dickstein": 24, "david": 24, "sussillo": 24, "capac": 24, "trainabl": 24, "num": 24, "new_output": 24, "ident": 24, "new_stat": 24, "intersectionrnncel": 24, "num_in_proj": 24, "y_activ": 24, "nn_op": 24, "intersect": 24, "well": [24, 187, 197, 200], "design": 24, "improv": [24, 87, 100, 129, 139, 158, 169], "flow": 24, "through": [24, 64], "dimension": 24, "y": 24, "To": [24, 43, 47, 51, 61, 62, 63, 64, 97, 133, 138, 163, 168], "achiev": [24, 49, 87, 139, 169], "subsequ": 24, "deepli": 24, "best": [24, 87, 134, 164, 187], "new_i": 24, "equal": [24, 41, 76, 77], "compiledwrapp": 24, "compile_st": 24, "wrap": [24, 69, 70, 71, 109, 110], "execut": [24, 41, 66, 118, 147], "xla": 24, "jit": 24, "phasedlstmcel": 24, "leak": 24, "ratio_on": 24, "trainable_ratio_on": 24, "period_init_min": 24, "period_init_max": 24, "1000": [24, 103, 125, 154], "phase": 24, "1610": 24, "09513v1": 24, "float32": 24, "float64": 24, "store": [24, 111], "second": [24, 48, 183], "features_s": 24, "lstmstatetupl": 24, "timestep": 24, "convlstmcel": 24, "conv_ndim": 24, "output_channel": 24, "kernel_shap": 24, "skip_connect": 24, "conv_lstm_cel": 24, "1506": 24, "04214v1": 24, "conv1dlstmcel": 24, "conv_1d_lstm_cel": 24, "1d": 24, "conv2dlstmcel": 24, "conv_2d_lstm_cel": 24, "conv3dlstmcel": 24, "conv_3d_lstm_cel": 24, "3d": 24, "glstmcell": 24, "number_of_group": 24, "group": [24, 50, 66, 88, 192], "g": [24, 45, 49, 61, 62, 63, 77, 87, 92, 97, 103, 116, 125, 133, 138, 139, 145, 154, 163, 168, 169, 172, 176, 180, 181, 200], "1703": 24, "10722": 24, "kuchaiev": 24, "b": [24, 43, 61, 62, 63, 83, 86, 87, 88, 89, 90, 97, 138, 141, 168, 170, 176, 200], "ginsburg": 24, "trick": 24, "brief": 24, "sub": 24, "evenli": 24, "fed": 24, "num_input": 24, "known": [24, 88], "divis": 24, "innermost": 24, "incompat": 24, "layernormlstmcel": 24, "srucel": 24, "sru": 24, "fast": 24, "cnn": [24, 87, 139, 169], "cf": 24, "1709": 24, "02755": 24, "variat": 24, "character": 24, "simplifi": 24, "consecut": 24, "tradition": 24, "multipli": 24, "matrix": 24, "w_hh": 24, "ensu": 24, "flavor": 24, "replac": [24, 64, 66, 67, 68, 82, 83, 89, 118, 147, 176, 180, 181], "multipl": [24, 42, 77, 100, 129, 158], "h_": 24, "pointwis": 24, "result": [24, 41, 43, 44, 47, 49, 50, 51, 52, 54, 56, 57, 61, 62, 63, 64, 66, 67, 73, 74, 76, 77, 79, 80, 83, 86, 87, 88, 90, 91, 92, 95, 97, 98, 99, 100, 104, 116, 118, 119, 123, 128, 129, 132, 133, 134, 135, 138, 139, 141, 145, 147, 148, 152, 157, 158, 161, 163, 164, 165, 168, 169, 170, 172, 177, 180, 181, 182, 192], "gain": 24, "boolean": [24, 41, 49, 50, 66, 97, 99, 107, 187, 197], "exist": [24, 41, 103, 125, 154, 188], "alreadi": [24, 41, 56, 57, 87, 97, 103, 125, 135, 154, 165], "error": [24, 176, 177, 193], "string": [24, 44, 67, 73, 74, 83, 88, 92, 104, 107, 119, 134, 148, 164, 172, 176, 178, 180, 181, 186], "mistak": 24, "keyword": [24, 42, 50, 82, 105, 195], "argument": 24, "weightnormlstmcel": 24, "norm": 24, "adapt": 24, "1602": 24, "07868": 24, "tim": 24, "saliman": 24, "diederik": 24, "p": [24, 43, 52, 54, 87, 92, 106, 123, 152, 200], "kingma": 24, "reparameter": 24, "acceler": 24, "deep": [24, 43, 116, 134, 145, 164], "indrnncel": 24, "independ": 24, "indrnn": 24, "1803": 24, "04831": 24, "mean": [24, 64, 76, 77, 87, 91, 177, 180, 181], "act": [24, 134, 164], "w": 24, "indygrucel": 24, "kernel_initi": 24, "bias_initi": 24, "grucel": 24, "u_r": 24, "u_z": 24, "5": [24, 44, 51, 52, 54, 64, 66, 73, 76, 77, 83, 86, 87, 92, 98, 118, 123, 128, 134, 139, 147, 152, 157, 164, 169, 176, 180, 181, 182, 183, 186], "respect": [24, 41], "diagon": 24, "hadamard": 24, "product": 24, "r_j": 24, "sigmaleft": 24, "mathbf": 24, "w_rmathbf": 24, "_j": 24, "u_rcirc": 24, "_jright": 24, "z_j": 24, "w_zmathbf": 24, "u_zcirc": 24, "tild": 24, "phileft": 24, "denot": 24, "indygru": 24, "node": 24, "see": [24, 47, 61, 62, 63, 74, 87, 97, 98, 104, 119, 128, 133, 134, 138, 139, 148, 157, 163, 164, 168, 169, 198], "its": [24, 77, 83], "own": [24, 87, 134, 139, 164, 169, 184], "oppos": 24, "nunit": 24, "indylstmcel": 24, "indylstm": 24, "basiclstmcel": 24, "u_f": 24, "u_i": 24, "u_o": 24, "u_c": 24, "regular": [24, 41, 45, 47, 51, 66, 107, 118, 147, 172, 190], "f_t": 24, "sigma_gleft": 24, "w_f": 24, "x_t": 24, "b_fright": 24, "i_t": 24, "w_i": 24, "b_iright": 24, "o_t": 24, "w_o": 24, "b_oright": 24, "c_t": 24, "c_": 24, "sigma_cleft": 24, "b_cright": 24, "baselin": 24, "detail": [24, 41], "analysi": [24, 134, 164], "1903": 24, "08023": 24, "ntmcontrollerst": 24, "ntmcell": 24, "control": [24, 41, 43, 47, 116, 145], "memory_s": 24, "memory_vector_dim": 24, "read_head_num": 24, "write_head_num": 24, "shift_rang": 24, "clip_valu": 24, "ture": 24, "machin": [24, 59], "1807": 24, "08518": 24, "mark": [24, 43, 45, 49, 67, 116, 145], "collier": 24, "joeran": 24, "beel": 24, "turn": [24, 180, 181], "snowkylin": 24, "ntm": 24, "cours": 24, "1410": 24, "5401": 24, "wayn": 24, "prev_stat": 24, "minimalrnncel": 24, "glorot_uniform": 24, "ones": [24, 87, 180], "minimalrnn": 24, "1806": 24, "05394v2": 24, "minmin": 24, "chen": 24, "jeffrei": 24, "pennington": 24, "samuel": 24, "schoenholz": 24, "isometri": 24, "field": [24, 48, 50, 64, 79, 83, 91, 105, 106, 192], "theori": 24, "signal": 24, "icml": 24, "2018": [24, 91], "sum": 24, "cfncell": 24, "chao": 24, "openreview": 24, "net": [24, 45], "id": [24, 41, 48, 67, 74, 184, 190, 192], "s1dizvclg": 24, "thoma": 24, "laurent": 24, "jame": 24, "von": 24, "brecht": 24, "cfn": 24, "goe": 24, "contract": [24, 180, 181], "map": [24, 52, 53, 54, 64, 66, 77, 87, 89, 95, 97, 98, 103, 111, 118, 122, 123, 125, 132, 147, 151, 152, 154, 161, 176, 184, 186], "linear": [24, 61, 62, 63, 107, 133, 138, 163, 168], "decoupl": 24, "tf_graph_1x": [33, 186], "manipul": 41, "json": [41, 52, 54, 64, 95, 122, 123, 132, 151, 152, 161, 172, 177, 180, 181, 186, 190, 192], "export": [41, 186, 190], "layout": 41, "annotationlab": 41, "interfac": [41, 103], "john": [41, 67], "snow": 41, "set_credenti": 41, "usernam": [41, 184], "password": 41, "client_secret": 41, "annotationlab_url": 41, "credenti": 41, "client": 41, "get_all_project": 41, "visibl": [41, 66, 118, 147], "rtype": [41, 190], "get_project_config": 41, "project_nam": 41, "create_project": 41, "project_descript": 41, "project_sampl": 41, "project_instruct": 41, "random": [41, 66, 67, 87, 118, 134, 139, 147, 164, 169, 180, 181, 184, 192], "sequenti": [41, 83], "sampl": [41, 67, 172, 176, 180, 181, 189], "show": [41, 43, 44, 47, 49, 50, 51, 52, 54, 61, 62, 63, 64, 66, 67, 73, 74, 76, 77, 83, 86, 90, 91, 92, 95, 97, 98, 99, 100, 104, 116, 118, 119, 123, 128, 132, 133, 134, 138, 141, 145, 147, 148, 152, 157, 161, 163, 164, 168, 170, 178, 183, 186, 198], "guidelin": 41, "delete_project": 41, "confirm": 41, "delet": 41, "set_project_config": 41, "classification_label": 41, "ner_label": [41, 86, 186], "assertion_label": [41, 186, 190], "relations_label": 41, "classif": [41, 80, 82, 133, 134, 135, 138, 143, 163, 164, 165, 168, 172], "By": [41, 77], "multiclass": [41, 80], "upload_task": 41, "task_list": 41, "title_list": 41, "id_offset": 41, "upload": 41, "custom": [41, 43, 64, 66, 97, 98, 118, 147, 178, 180, 192], "titl": [41, 180, 181, 190], "increment": 41, "offset": [41, 43], "delete_task": 41, "task_id": [41, 186], "get_annot": 41, "output_nam": 41, "save_dir": [41, 198], "write": [41, 106, 176, 198], "get_conll_data": 41, "input_json_path": [41, 190], "exported_conl": 41, "ground_truth": [41, 190], "excluded_label": [41, 186, 190], "excluded_task_id": [41, 190], "excluded_task_titl": [41, 190], "regex_pattern": [41, 180, 190], "io": [41, 180, 181, 198], "conll": [41, 87, 139, 169, 172, 176, 177, 180, 181, 190], "select": [41, 43, 44, 47, 49, 50, 52, 54, 61, 62, 63, 66, 67, 69, 83, 90, 95, 97, 98, 103, 116, 118, 123, 128, 132, 133, 138, 141, 145, 147, 152, 157, 161, 163, 168, 170, 184, 190], "ground": [41, 177, 190], "truth": [41, 177, 190], "complet": [41, 190], "latest": [41, 190], "exclud": [41, 45, 87, 139, 169, 190], "irrelev": [41, 190], "regex": [41, 42, 47, 48, 50, 51, 64, 66, 88, 92, 105, 118, 147, 180, 190], "get_assertion_data": 41, "relevant_ner_label": 41, "unannotated_label": 41, "unannotated_label_strategi": 41, "unannotated_label_strategy_dict": 41, "included_task_id": 41, "seed": [41, 66, 67, 69, 87, 118, 134, 139, 147, 164, 169, 184, 192], "panda": [41, 67, 176, 177, 181, 190], "relev": [41, 49], "assign": [41, 180, 181, 182], "strategi": [41, 83, 176], "occurr": 41, "unannot": 41, "count": [41, 172, 180, 181], "fraction": 41, "absolut": 41, "dictionari": [41, 45, 50, 52, 54, 64, 66, 77, 83, 89, 90, 95, 97, 98, 100, 105, 122, 123, 129, 132, 141, 151, 152, 158, 161, 170, 172, 176, 180, 181, 182, 192], "entity_label": [41, 66, 118, 147, 192], "sample_weight_or_count": 41, "max": [41, 43, 45, 57, 61, 62, 63, 116, 133, 135, 138, 145, 163, 165, 168, 178], "get_relation_extraction_data": 41, "negative_rel": 41, "relation_pair": 41, "negative_relation_strategi": 41, "negative_relation_strategy_dict": 41, "were": [41, 44, 53, 87, 139, 169, 190], "discard": [41, 90, 141, 170], "rest": [41, 47, 51, 83, 89, 177], "plausibl": 41, "possibl": [41, 42, 43, 47, 50, 51, 53, 57, 64, 80, 83, 89, 105, 106, 107, 116, 135, 145, 165, 180, 181], "neg": [41, 43], "entity1": [41, 97, 98, 128, 157], "entity2": [41, 97, 98, 128, 157], "get_classification_data": 41, "generate_preannot": 41, "all_result": 41, "document_column": 41, "ner_column": 41, "assertion_column": 41, "relations_column": 41, "user_nam": 41, "titles_list": 41, "light_pipelin": 41, "fullannot": [41, 42, 181], "full_pipelin": 41, "df": [41, 91, 115, 171, 181, 184, 185, 186], "collect": [41, 79], "documentassembl": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 61, 62, 63, 64, 66, 67, 73, 74, 76, 77, 83, 86, 87, 88, 89, 91, 92, 95, 97, 98, 99, 100, 103, 104, 105, 116, 118, 119, 123, 125, 128, 132, 133, 134, 138, 139, 145, 147, 148, 152, 154, 157, 161, 163, 164, 168, 169, 190], "older": 41, "offeset": 41, "overrit": 41, "upload_preannot": 41, "preannot": 41, "get_iaa_metr": 41, "conll_dir": 41, "annotator_nam": 41, "set_ref_annot": 41, "return_nerdlmetr": 41, "results_token_bas": 41, "iaa": 41, "metric": [41, 87, 172, 180, 181, 182, 187, 197, 200], "present": [41, 43, 47, 83, 86, 89, 103, 116, 125, 145, 154], "comparison": [41, 76, 181], "made": [41, 83], "full": 41, "partial": 41, "nerdlmetr": [41, 115], "report": [41, 177, 180, 181, 189], "annotationmerg": 42, "classnam": [42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 69, 70, 71, 73, 75, 76, 77, 80, 83, 86, 87, 88, 89, 90, 91, 95, 97, 98, 99, 100, 102, 103, 105, 109, 110, 116, 118, 122, 123, 125, 128, 129, 132, 133, 134, 135, 138, 139, 141, 145, 147, 151, 152, 154, 157, 158, 161, 163, 164, 165, 168, 169, 170], "java_model": [42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 69, 70, 71, 73, 75, 76, 77, 80, 83, 86, 87, 88, 89, 90, 91, 95, 97, 98, 99, 100, 102, 103, 105, 110, 116, 118, 122, 123, 125, 128, 129, 132, 133, 134, 135, 138, 139, 141, 145, 147, 151, 152, 154, 157, 158, 161, 163, 164, 165, 168, 169, 170], "merg": [42, 56, 57, 82, 86, 102, 135, 143, 165], "inputtyp": [42, 50, 105], "wordpiec": [42, 50, 105], "sentence_embed": [42, 50, 73, 76, 77, 103, 105, 125, 134, 154, 164], "categori": [42, 50, 56, 57, 58, 59, 61, 63, 80, 97, 98, 100, 105, 128, 129, 133, 134, 135, 144, 157, 158, 163, 164, 165], "sentiment": [42, 50, 105, 134, 164], "named_ent": [42, 50, 62, 86, 87, 88, 89, 90, 105, 138, 139, 141, 168, 169, 170], "labeled_depend": [42, 50, 52, 54, 95, 105, 122, 123, 132, 151, 152, 161], "languag": [42, 49, 50, 52, 54, 61, 62, 63, 66, 74, 76, 77, 90, 100, 104, 105, 119, 122, 123, 129, 133, 134, 138, 141, 148, 151, 152, 158, 163, 164, 168, 170, 183, 186, 192], "doc": [42, 103, 125, 154, 172, 176], "test_data": [42, 48, 105, 181, 186], "createdatafram": [42, 43, 44, 48, 49, 51, 61, 62, 63, 64, 66, 67, 73, 74, 76, 77, 83, 86, 87, 89, 90, 91, 92, 97, 98, 100, 104, 105, 116, 118, 119, 128, 133, 134, 138, 139, 141, 145, 147, 148, 157, 163, 164, 168, 169, 170], "todf": [42, 43, 44, 48, 49, 51, 61, 62, 63, 64, 66, 67, 73, 74, 76, 77, 83, 86, 87, 89, 90, 91, 92, 97, 98, 99, 100, 104, 105, 116, 118, 119, 128, 133, 134, 138, 139, 141, 145, 147, 148, 157, 163, 164, 168, 169, 170], "document1": 42, "document2": [42, 67], "setinputtyp": [42, 105], "all_doc": 42, "setstag": [42, 44, 49, 50, 52, 54, 56, 57, 61, 62, 63, 67, 74, 76, 77, 79, 80, 87, 90, 95, 100, 104, 105, 119, 123, 132, 133, 134, 135, 138, 139, 141, 148, 152, 161, 163, 164, 165, 168, 169, 170], "lp": 42, "lightpipelin": [42, 181, 190], "replic": 42, "23": [42, 48], "inputannotatortyp": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 83, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 109, 110, 123, 152], "outputannotatortyp": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 71, 73, 75, 76, 77, 79, 80, 83, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 109, 110, 123, 152], "skiplpinputcolsvalid": [42, 52, 79, 105, 109, 110], "filter": [42, 47, 50, 51, 53, 89, 99, 105, 177, 180, 181, 183, 186], "algorithm": [43, 45, 56, 57, 116, 135, 145, 165, 180], "absent": [43, 47, 116, 145, 186], "hypothet": [43, 47, 116, 145], "condit": [43, 116, 145], "associated_with_other_person": [43, 116, 145], "etc": [43, 103, 116, 125, 145, 154], "pretrain": [43, 45, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 66, 67, 69, 73, 76, 77, 80, 83, 86, 87, 88, 89, 90, 95, 97, 98, 99, 100, 103, 105, 116, 118, 122, 123, 125, 128, 129, 132, 133, 134, 135, 138, 139, 141, 143, 145, 147, 151, 152, 154, 157, 158, 161, 163, 164, 165, 168, 169, 170, 188, 192], "assertiondlmodel": [43, 47, 116, 145], "startcol": [43, 45, 74, 104, 116, 119, 145, 148], "endcol": [43, 45, 116, 145], "batchsiz": [43, 61, 63, 80, 87, 98, 116, 128, 133, 134, 138, 139, 145, 157, 163, 164, 168, 169], "optim": [43, 80, 87, 116, 139, 145, 169, 180], "learningr": [43, 80, 116, 145], "rate": [43, 80, 87, 116, 134, 139, 145, 164, 169, 186], "maxsentlen": [43, 116, 145], "graphfold": [43, 87, 107, 116, 139, 145, 169], "extern": [43, 83, 87, 89, 107, 116, 139, 145, 169], "graphfil": [43, 87, 107, 116, 145], "configprotobyt": [43, 61, 62, 63, 87, 116, 133, 134, 138, 139, 145, 163, 164, 168, 169], "configproto": [43, 61, 62, 63, 87, 116, 133, 134, 138, 139, 145, 163, 164, 168, 169], "serial": [43, 61, 62, 63, 87, 116, 133, 134, 138, 139, 145, 163, 164, 168, 169], "byte": [43, 61, 62, 63, 87, 116, 133, 134, 138, 139, 145, 163, 164, 168, 169], "config_proto": [43, 116, 145], "serializetostr": [43, 116, 145], "validationsplit": [43, 80, 87, 116, 134, 139, 145, 164, 169], "choos": [43, 87, 116, 134, 139, 145, 164, 169], "proport": [43, 87, 116, 134, 139, 145, 164, 169, 180, 181, 182], "against": [43, 49, 87, 116, 134, 139, 145, 164, 169, 172, 181], "testdataset": [43, 87, 116, 139, 145, 169], "statist": [43, 87, 116, 139, 145, 169], "dure": [43, 66, 73, 87, 116, 134, 139, 145, 164, 169, 181, 182, 184], "includeconfid": [43, 87, 116, 139, 145, 169], "confid": [43, 47, 51, 52, 54, 58, 59, 80, 83, 87, 89, 90, 95, 100, 103, 116, 122, 123, 129, 132, 139, 141, 145, 151, 152, 158, 161, 169, 170, 177], "metadata": [43, 44, 48, 49, 50, 64, 66, 73, 83, 86, 87, 90, 91, 97, 98, 99, 100, 105, 106, 116, 128, 139, 141, 145, 157, 169, 170], "enableoutputlog": [43, 87, 116, 134, 139, 145, 164, 169], "outputlogspath": [43, 80, 87, 116, 134, 139, 145, 164, 169], "level": [43, 47, 49, 64, 87, 116, 134, 139, 145, 164, 169], "scopewindow": [43, 116, 145], "window": [43, 87, 116, 139, 145, 169], "express": [43, 47, 51, 66, 116, 118, 145, 147], "ml": [43, 45, 47, 51, 52, 54, 56, 57, 61, 62, 63, 64, 66, 74, 76, 77, 80, 83, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 103, 104, 116, 118, 119, 123, 125, 128, 132, 133, 134, 135, 138, 139, 141, 145, 147, 148, 152, 154, 157, 161, 163, 164, 165, 168, 169, 170, 171, 198], "document_assembl": [43, 44, 45, 48, 56, 57, 88, 90, 91, 116, 135, 141, 145, 165, 170, 190], "doc2chunk": [43, 67, 74, 91, 104, 119, 148], "setchunkcol": [43, 45, 74, 88, 104, 116, 119, 145, 148], "setstartcolbytokenindex": [43, 74], "setfailonmiss": [43, 74], "setlowercas": [43, 52, 74, 92], "wordembeddingsmodel": [43, 45, 49, 52, 54, 66, 67, 73, 76, 77, 83, 86, 87, 88, 89, 95, 97, 98, 99, 100, 116, 118, 123, 128, 132, 139, 145, 147, 152, 157, 161, 169], "embeddings_clin": [43, 45, 49, 52, 54, 66, 67, 77, 83, 86, 88, 89, 95, 97, 98, 99, 100, 116, 118, 123, 128, 132, 145, 147, 152, 157, 161], "en": [43, 45, 49, 52, 54, 56, 57, 58, 59, 61, 62, 63, 66, 67, 69, 73, 76, 77, 80, 83, 86, 87, 88, 89, 90, 95, 97, 98, 99, 100, 103, 116, 118, 122, 123, 125, 128, 129, 132, 133, 134, 135, 138, 139, 141, 145, 147, 151, 152, 154, 157, 158, 161, 163, 164, 165, 168, 169, 170, 192], "setcasesensit": [43, 45, 47, 56, 57, 61, 62, 63, 64, 88, 98, 103, 105, 116, 125, 133, 135, 138, 145, 154, 163, 165, 168], "012": [43, 116, 145], "015": [43, 116, 145], "setscopewindow": [43, 116, 145], "assertionpipelin": [43, 45, 47, 103, 116, 125, 145, 154], "srt": [43, 107], "setgraphfil": [43, 87, 107], "happen": [43, 87], "setconfigprotobyt": [43, 61, 62, 63, 87], "conf": 43, "contai": 43, "colnam": 43, "start_col": 43, "end_col": [43, 97], "float": [43, 49, 56, 57, 66, 73, 76, 77, 79, 80, 87, 89, 90, 97, 98, 103, 134, 164, 176, 177, 180, 181, 182, 187, 197], "maximum": [43, 56, 57, 87, 98, 99, 107, 134, 135, 139, 164, 165, 169], "settestdataset": 43, "read_a": [43, 51, 64, 66, 83, 89], "reada": [43, 51, 64, 66, 83, 89], "waht": 43, "left": [43, 97, 98, 99, 128, 157], "right": [43, 49, 76, 97, 98, 99, 128, 157], "dl": 43, "approach": [43, 52, 54, 95, 109, 116, 122, 123, 132, 145, 151, 152, 161], "targetnerlabel": [43, 45, 116, 145], "common": [43, 47, 51, 52, 54, 56, 57, 64, 66, 74, 76, 77, 79, 80, 83, 86, 87, 89, 91, 95, 97, 98, 103, 104, 116, 118, 119, 123, 125, 128, 132, 135, 139, 143, 145, 147, 148, 152, 154, 157, 161, 165, 169], "fever": [43, 47, 116, 145], "sore": [43, 47, 116, 145], "throat": [43, 47, 116, 145], "stomach": [43, 47, 51, 116, 145], "pain": [43, 47, 51, 116, 145], "she": [43, 116, 145, 186], "maintain": [43, 116, 145], "epidur": [43, 47, 116, 145], "pca": [43, 47, 116, 145], "sentencedetector": [43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 64, 66, 73, 76, 77, 83, 86, 87, 88, 89, 95, 99, 100, 103, 105, 116, 118, 123, 125, 132, 134, 139, 145, 147, 152, 154, 161, 164, 169], "medicalnermodel": [43, 49, 52, 54, 66, 67, 77, 83, 86, 87, 88, 89, 95, 97, 98, 99, 100, 116, 118, 123, 128, 132, 145, 147, 152, 157, 161], "ner_clin": [43, 87, 100, 116, 139, 145, 169], "nerconvert": [43, 47, 49, 66, 67, 73, 76, 83, 86, 89, 97, 98, 99, 100, 116, 118, 128, 145, 147, 157], "ner_chunk": [43, 47, 49, 52, 54, 66, 67, 73, 76, 77, 82, 85, 86, 89, 95, 97, 98, 99, 100, 116, 118, 123, 128, 132, 145, 147, 152, 157, 161, 180, 181, 192, 198], "clinicalassert": [43, 47, 116, 145], "selectexpr": [43, 44, 47, 49, 51, 52, 54, 64, 73, 74, 76, 77, 83, 86, 90, 91, 92, 97, 98, 99, 100, 104, 116, 119, 123, 128, 134, 141, 145, 148, 152, 157, 164, 170], "truncat": [43, 44, 47, 49, 51, 52, 54, 61, 62, 63, 64, 66, 67, 74, 76, 77, 90, 92, 95, 97, 98, 99, 100, 104, 116, 118, 119, 123, 128, 132, 133, 134, 138, 141, 145, 147, 148, 152, 157, 161, 163, 164, 168, 170], "lang": [43, 45, 49, 52, 54, 56, 57, 58, 59, 61, 62, 63, 66, 69, 73, 76, 77, 80, 83, 87, 90, 97, 98, 100, 103, 116, 118, 122, 123, 125, 128, 129, 133, 134, 135, 138, 139, 141, 145, 147, 151, 152, 154, 157, 158, 163, 164, 165, 168, 169, 170, 183], "remote_loc": [43, 45, 49, 52, 54, 56, 57, 58, 59, 61, 62, 63, 66, 69, 73, 76, 77, 80, 83, 87, 90, 97, 98, 100, 103, 116, 118, 122, 123, 125, 128, 129, 133, 134, 135, 138, 139, 141, 145, 147, 151, 152, 154, 157, 158, 163, 164, 165, 168, 169, 170, 183], "assertionchunkconvert": 44, "some": [44, 66, 77, 87, 118, 139, 147, 169], "issu": [44, 88, 176, 177], "indic": [44, 80, 83], "lose": 44, "popul": 44, "alab": [44, 143, 190], "chunktextcol": 44, "chunkbegincol": 44, "chunkendcol": 44, "outputtokenbegincol": 44, "outputtokenendcol": 44, "angiographi": 44, "bleed": 44, "vessel": 44, "minni": 44, "suppli": 44, "succesfulli": 44, "embol": 44, "57": 44, "discuss": 44, "hi": [44, 49, 76, 90, 141, 170], "pcp": [44, 66, 118, 147], "leon": 44, "clear": 44, "had": [44, 61, 63, 73, 133, 163], "dvt": 44, "ultim": 44, "pe": 44, "felt": [44, 61, 63, 133, 163], "strongli": 44, "he": [44, 49, 76], "anticoagul": 44, "31": [44, 48, 186], "34": [44, 186], "char_begin": 44, "char_end": 44, "convert": [44, 48, 74, 89, 92, 104, 105, 119, 148, 176, 180, 181], "setchunktextcol": 44, "setchunkbegincol": 44, "setchunkendcol": 44, "setoutputtokenbegincol": 44, "token_begin": 44, "setoutputtokenendcol": 44, "token_end": 44, "62": 44, "33": 44, "inputcol": [44, 61, 63, 79, 107, 114, 134, 164], "outputcol": [44, 79, 114, 198], "col": [44, 48, 51, 64, 73, 97, 103, 125, 154], "setparam": [44, 67, 74, 79, 104, 110], "assertionlogregapproach": 45, "regress": [45, 56, 57, 58, 61, 63, 133, 135, 163, 165], "done": [45, 87, 134, 139, 164, 169, 181], "maxit": [45, 56, 57, 135, 165], "regparam": 45, "enetparam": 45, "elast": 45, "beforeparam": 45, "context": [45, 49, 76, 82, 143, 180, 181], "afterparam": 45, "externalfeatur": 45, "nercol": 45, "sentence_detector": [45, 48, 52, 54, 77, 88, 90, 95, 116, 123, 132, 141, 145, 152, 161, 170, 190], "chunker": [45, 82, 88, 116, 143, 145], "Then": [45, 73, 87, 134, 139, 164, 169], "setreg": 45, "setbefor": 45, "setaft": 45, "13": [45, 66, 91, 92, 118, 147, 186], "setmaxit": [45, 56, 57], "lamda": [45, 80], "setenet": 45, "enet": 45, "setnercol": 45, "settargetnerlabel": 45, "assertionlogregmodel": [45, 116, 145], "logreg": [45, 56, 57, 135, 165], "assertionlogreg": 45, "famili": [45, 103], "logarithm": [45, 56, 57, 135, 165], "obtain": [45, 100, 116, 129, 145, 158, 182], "assertionpretrain": 45, "assertiondl": [46, 82, 117, 121, 146, 150], "assertion_chunk_convert": [46, 82], "assertion_dl_reg": [46, 82], "assertionfilter": 47, "come": [47, 49, 51, 83, 103, 125, 154], "criteria": [47, 51, 53, 83], "isin": [47, 51], "whitelist": [47, 51, 89], "ignor": [47, 51, 61, 63, 66, 83, 89, 118, 133, 138, 147, 163, 168, 180], "what": [47, 51, 83, 90, 97, 103, 141, 170, 188], "entitiesconfid": [47, 51], "setcriteria": [47, 51], "setwhitelist": [47, 51, 73, 89], "chunksfilt": 47, "casesensit": [47, 61, 63, 64, 133, 138, 163, 168], "definit": [47, 90, 100, 129, 141, 158, 170], "setregex": [47, 51], "llist": [47, 51], "dash": [47, 51, 97, 99], "chunkconvert": 48, "regexmatch": [48, 50, 64, 105], "my": [48, 90, 134, 141, 164, 170], "rule": [48, 64, 172], "ceremoni": 48, "regex_match": 48, "setexternalrul": [48, 50, 105], "src": [48, 50, 87, 105, 134, 139, 164, 169, 186], "resourc": [48, 49, 50, 52, 54, 61, 62, 63, 76, 77, 79, 83, 87, 89, 90, 100, 105, 122, 123, 129, 133, 134, 138, 139, 141, 151, 152, 158, 163, 164, 168, 169, 170, 183, 186], "matcher": [48, 105], "txt": [48, 50, 66, 105, 118, 147, 180, 181, 186], "delimit": [48, 83, 89], "outdf": 48, "71": 48, "80": [48, 192], "chunkkeyphraseextract": 49, "keyphras": 49, "kei": [49, 50, 52, 90, 95, 100, 105, 106, 129, 141, 158, 170, 172, 176, 177, 182, 184, 200], "phrase": [49, 88], "compar": [49, 172, 181], "broader": 49, "thei": [49, 59, 87, 139, 169, 184], "belong": 49, "candid": [49, 73], "variou": 49, "wai": 49, "ngramgener": 49, "textmatch": 49, "latter": 49, "topn": [49, 73], "selectmostdiffer": 49, "find": [49, 64, 76, 100, 113], "them": [49, 61, 62, 63, 76, 77, 80, 98, 99, 133, 138, 163, 168], "other": [49, 67, 77, 83, 180, 181, 184], "diverg": 49, "maxim": [49, 77, 97], "margin": [49, 178], "mmr": 49, "conjunct": 49, "aim": 49, "goal": 49, "documentlevelprocess": 49, "particular": [49, 100, 103, 125, 129, 154, 158], "concatenatesent": 49, "ner_tagg": [49, 100], "ner_jsl_slim": 49, "ner_tag": [49, 97, 98, 99, 100, 128, 157], "ner_convert": [49, 52, 54, 67, 73, 77, 89, 95, 100, 123, 132, 152, 161], "key_phrase_extractor": 49, "settopn": 49, "setdocumentlevelprocess": 49, "setdiverg": 49, "ner_chunk_key_phras": 49, "her": [49, 76, 90, 141, 170], "becom": [49, 76], "last": [49, 76, 103, 181], "year": [49, 66, 76, 83, 86, 89, 91, 118, 147], "complain": [49, 76], "swell": [49, 76], "forearm": [49, 76], "explod": [49, 51, 52, 54, 64, 73, 76, 77, 83, 86, 90, 92, 97, 98, 99, 100, 123, 128, 134, 141, 152, 157, 164, 170, 172], "AS": [49, 52, 54, 76, 77, 90, 123, 141, 152, 170], "key_phras": 49, "documentsimilar": 49, "mmrscore": 49, "gestat": 49, "mellitu": 49, "28": [49, 186], "old": [49, 66, 83, 86, 87, 89, 97, 98, 118, 147], "7391447825527298": 49, "4366776288430703": 49, "7323921930094919": 49, "44348688715422274": 49, "13577881610104517": 49, "085800103824974": 49, "droppunctu": 49, "integ": [49, 66, 67, 118, 147, 176, 177, 184], "interv": 49, "setselectmostdiffer": 49, "constraint": 49, "paramt": 49, "sens": 49, "setconcatenatesent": 49, "averag": [49, 61, 63, 75, 76, 77], "setdroppunctu": 49, "punctuat": [49, 180, 181], "sbert_jsl_medium_uncas": 49, "download": [49, 52, 54, 61, 62, 63, 76, 77, 90, 100, 122, 123, 129, 133, 134, 138, 141, 151, 152, 158, 163, 164, 168, 170, 183, 188, 189], "load": [49, 52, 54, 61, 62, 63, 64, 66, 76, 77, 80, 87, 90, 95, 100, 118, 122, 123, 129, 132, 133, 134, 138, 139, 141, 147, 151, 152, 158, 161, 163, 164, 168, 169, 170, 172, 183, 186], "sent_small_bert_l2_768": [49, 76, 77], "remot": [49, 52, 54, 61, 62, 63, 76, 77, 90, 100, 122, 123, 129, 133, 134, 138, 141, 151, 152, 158, 163, 164, 168, 170, 183], "Will": [49, 52, 54, 61, 62, 63, 76, 77, 90, 100, 122, 123, 129, 133, 134, 138, 141, 151, 152, 158, 163, 164, 168, 170], "repositori": [49, 52, 54, 61, 62, 63, 76, 77, 90, 100, 122, 123, 129, 133, 134, 138, 141, 151, 152, 158, 163, 164, 168, 170], "bertsentenceembed": [49, 76, 77, 103, 105, 125, 154], "chunksentencesplitt": 50, "documento": 50, "header": [50, 79, 134, 164, 178, 186], "title_regex": 50, "paragraph": 50, "groupbysent": 50, "insertchunk": 50, "defaultent": 50, "setgroupbysent": 50, "assum": [50, 77, 182], "detector": [50, 180, 181, 190], "row": [50, 186], "setinsertchunk": 50, "insert": 50, "setdefaultent": 50, "chunkfiltererapproach": 51, "confidencethreshold": 51, "past": 51, "histori": 51, "gastroenter": 51, "docassembl": 51, "postagg": [51, 97, 98, 128, 157], "perceptronmodel": [51, 77, 97, 98, 99, 100, 128, 157, 190], "setregexpars": [51, 88], "chunkerfilt": 51, "17": [51, 83, 86, 186], "22": [51, 52, 54, 91, 95, 122, 123, 132, 151, 152, 161], "36": 51, "42": [51, 186], "53": 51, "81": [51, 99], "110": [51, 83, 86], "now": 51, "care": 51, "118": 51, "132": 51, "chunksfilterapproach": 51, "blacklist": [51, 66, 83, 89, 118, 147], "filtervalu": 51, "entitiesconfidenceresourc": 51, "setblacklist": [51, 66, 83, 89], "setfilterent": 51, "setentitiesconfidenceresourc": 51, "chunkfilter": 51, "chunkmapperfuzzymatchingparam": 52, "enabletokenfingerprintmatch": 52, "enablecharfingerprintmatch": 52, "enablefuzzymatch": 52, "maxtokenngramfingerprint": 52, "mintokenngramfingerprint": 52, "maxtokenngramdroppingtoken": 52, "maxtokenngramdroppingcharsratio": 52, "maxtokenngramdroppingoper": 52, "maxcharngramfingerprint": 52, "mincharngramfingerprint": 52, "fuzzymatchingdist": 52, "fuzzymatchingdistancethreshold": 52, "fuzzydistancescalingmod": 52, "setenabletokenfingerprintmatch": 52, "etfm": [52, 111], "setenablecharfingerprintmatch": 52, "ecfm": 52, "setenablefuzzymatch": 52, "efm": 52, "setmaxtokenngramfingerprint": 52, "mxtnf": 52, "setmintokenngramfingerprint": 52, "mntnf": 52, "setmaxtokenngramdroppingtoken": 52, "etd": 52, "setmaxtokenngramdroppingcharsratio": 52, "setmaxtokenngramdroppingoper": 52, "setmaxcharngramfingerprint": 52, "setmincharngramfingerprint": 52, "setfuzzymatchingdist": 52, "fmd": 52, "setfuzzymatchingdistancethreshold": 52, "fmdth": 52, "setfuzzydistancescalingmod": 52, "fdsm": 52, "commonchunkmapperparam": 52, "allowmultitokenchunk": 52, "multivaluesrel": 52, "lowercas": [52, 54, 74, 92, 95, 104, 119, 122, 123, 132, 148, 151, 152, 161, 180, 181], "setallowmultitokenchunk": 52, "mc": 52, "skip": 52, "multitoken": 52, "decid": [52, 54, 95, 122, 123, 132, 151, 152, 161], "send": 52, "multi": [52, 61, 62, 63, 80, 133, 134, 138, 163, 164, 168], "setmultivaluesrel": 52, "setrel": [52, 54, 95, 123, 132, 152, 161], "lc": [52, 95], "chunkmapperapproach": [52, 95, 122, 132, 151, 161], "mapper": [52, 54, 95, 122, 123, 132, 151, 152, 161], "jsondictionari": [52, 54, 95, 122, 123, 132, 151, 152, 161], "chunkmappermodel": [52, 95, 122, 132, 151, 161], "label_depend": [52, 53, 54, 95, 102, 122, 123, 132, 151, 152, 161], "mappinmg": [52, 54, 95, 122, 123, 132, 151, 152, 161], "go": [52, 54, 95, 122, 123, 132, 151, 152, 161, 177], "ner_posology_larg": [52, 54, 77, 95, 123, 132, 152, 161], "nerconverterintern": [52, 54, 77, 89, 95, 123, 132, 152, 161], "chunkermapperapproach": [52, 54, 95, 123, 132, 152, 161], "setdictionari": [52, 54, 64, 95, 123, 132, 152, 161], "home": [52, 54, 95, 123, 132, 152, 161], "mappings2": [52, 54, 95, 123, 132, 152, 161], "action": [52, 54, 95, 122, 123, 132, 151, 152, 161], "sampledata": [52, 54, 77, 95, 123, 132, 152, 161], "warfarina": [52, 54, 95, 122, 123, 132, 151, 152, 161], "lusa": [52, 54, 95, 122, 123, 132, 151, 152, 161], "amlodipin": [52, 54, 95, 122, 123, 132, 151, 152, 161], "mg": [52, 54, 77, 95, 122, 123, 132, 151, 152, 161], "35": [52, 54, 95, 99, 122, 123, 132, 151, 152, 161], "analges": [52, 54, 95, 122, 123, 132, 151, 152, 161], "56995": [52, 54, 95, 122, 123, 132, 151, 152, 161], "all_rel": [52, 54, 95, 122, 123, 132, 151, 152, 161], "antipyret": [52, 54, 95, 122, 123, 132, 151, 152, 161], "41": [52, 54, 95, 99, 122, 123, 132, 151, 152, 161], "9989": [52, 54, 95, 122, 123, 132, 151, 152, 161], "55": [52, 54, 95, 122, 123, 132, 151, 152, 161], "56": [52, 54, 95, 122, 123, 132, 151, 152, 161], "9123": [52, 54, 95, 122, 123, 132, 151, 152, 161], "bow": [52, 54, 73, 123, 152], "drug_chunk_embed": [52, 54, 77, 123, 152], "drug_chunk": [52, 54, 77, 123, 152], "drug_embed": [52, 54, 77, 123, 152], "cach": [52, 54, 77, 79, 83, 103, 123, 125, 152, 154, 188], "chunkmapperfilter": 53, "chunkmapp": [53, 55, 82, 121, 124, 150, 153], "successfulli": 53, "returncriteria": 53, "success": 53, "fail": [53, 74, 79, 104, 119, 148], "chunkmapperfilterermodel": 53, "setreturncriteria": 53, "return_criteria": 53, "itself": [53, 83], "docmapperapproach": [54, 123, 152], "docmappermodel": [54, 123, 152], "assertion_filter": [55, 82], "chunk_convert": [55, 82], "chunk_key_phrase_extract": [55, 82], "chunk_sentence_splitt": [55, 82], "chunker_filter": [55, 82], "chunkmapper_filter": [55, 82], "docmapp": [55, 82, 121, 124, 150, 153], "documentlogregclassifierapproach": 56, "classifi": [56, 57, 80, 98, 128, 134, 135, 157, 164, 165, 172], "labelcol": [56, 57, 103, 125, 135, 154, 165], "tol": [56, 57, 135, 165], "converg": [56, 57, 135, 165], "toler": [56, 57, 135, 165], "fitintercept": [56, 57, 135, 165], "intercept": [56, 57, 135, 165], "vectorizationmodelpath": [56, 57, 135, 165], "been": [56, 57, 135, 165], "classificationmodelpath": [56, 57, 135, 165], "could": [56, 57, 64, 73, 134, 135, 164, 165], "like": [56, 57, 64, 66, 118, 134, 135, 147, 164, 165], "stopwords_clean": [56, 57, 135, 165], "stopwordsclean": [56, 57, 135, 165], "cleantoken": [56, 57, 135, 165], "stemmer": [56, 57, 135, 165], "stem": [56, 57, 97, 98, 99, 128, 135, 157, 165], "clf_model": [56, 57, 80, 135, 165], "settol": [56, 57], "dist": [56, 57, 103], "setfitintercept": [56, 57], "setvectorizationmodelpath": [56, 57], "setclassificationmodelpath": [56, 57], "setlabel": [56, 57], "documentlogregclassifiermodel": 56, "mergechunk": [56, 57, 135, 165], "vectorizationmodel": [56, 57, 135, 165], "classificationmodel": [56, 57, 135, 165], "setmergechunk": [56, 57], "setvectorizationmodel": [56, 57], "pipelinemodel": [56, 57, 87, 134, 139, 164, 169, 171, 172, 180, 181, 192, 198], "setclassificationmodel": [56, 57], "documentmlclassifierparam": 57, "mintokenngram": [57, 135, 165], "maxtokenngram": [57, 135, 165], "documentmlclassifierapproach": [57, 135, 165], "classificationmodelclass": [57, 135, 165], "sparkml": [57, 135, 165], "svm": [57, 59, 135, 165], "ngram": [57, 135, 165], "min": [57, 135, 165, 178], "setclassificationmodelclass": 57, "setmintokenngram": 57, "minimum": [57, 66, 87, 118, 139, 147, 169, 176], "setmaxtokenngram": 57, "documentmlclassifiermodel": 57, "genericlogregclassifierapproach": 58, "genericlogregclassifi": 58, "multinomi": 58, "logist": [58, 59], "featurevector": [58, 59], "vari": [58, 59], "genericlogregclassifiermodel": 58, "genericsvmclassifierapproach": 59, "svmclassifi": 59, "standard": [59, 106], "genericsvmclassifiermodel": 59, "document_log_classifi": [60, 82], "document_ml_classifi": [60, 82], "generic_log_reg_classifi": [60, 82], "generic_svm_classifi": [60, 82], "medical_bert_for_sequence_classif": [60, 82], "medical_bert_for_token_classifi": [60, 82], "medical_distilbert_for_sequence_classif": [60, 82], "medicalbertforsequenceclassif": [61, 63, 100, 129, 133, 158, 163], "medicalbertfortokenclassifi": [61, 62, 63, 138, 168], "head": [61, 62, 63, 87, 133, 138, 139, 163, 168, 169], "pool": [61, 63, 133, 163], "companion": [61, 62, 63, 87, 115, 133, 134, 138, 139, 163, 164, 168, 169, 186], "huggingfac": [61, 62, 63, 133, 138, 163, 168], "maxsentencelength": [61, 62, 63, 133, 138, 163, 168], "tokenclassifi": [61, 62, 133, 138, 163, 168], "drowsi": [61, 63, 133, 163], "blur": [61, 63, 133, 163], "vision": [61, 63, 133, 163], "aspirin": [61, 63, 92, 133, 163], "coalescesent": [61, 63], "setmaxsentencelength": [61, 62, 63, 105], "getclass": [61, 62, 63, 90, 97, 98, 100], "setcoalescesent": [61, 63], "probabl": [61, 63, 177], "due": [61, 63], "limit": [61, 63, 66, 73], "almost": [61, 63], "512": [61, 63], "help": [61, 63, 66, 118, 147, 184], "loadsavedmodel": [61, 62, 63, 87, 98, 100, 128, 129, 133, 138, 139, 157, 158, 163, 168, 169], "spark_sess": [61, 62, 63, 87, 98, 100, 128, 129, 133, 138, 139, 157, 158, 163, 168, 169], "loadsavedmodelopensourc": [61, 62, 63, 133, 138, 163, 168], "bertfortokenclassifierpath": [61, 62, 63, 133, 138, 163, 168], "tfmodelpath": [61, 62, 63, 133, 138, 163, 168], "bertfortokenclassifi": [61, 62, 63, 133, 138, 163, 168], "taht": [61, 62, 63, 133, 138, 163, 168], "bert_sequence_classifier_ad": [61, 133, 163], "bert_token_classifier_ner_bionlp": [62, 138, 168], "erba": [62, 138, 168], "ir": [62, 138, 168], "myb": [62, 138, 168], "viru": [62, 138, 168], "erythroid": [62, 138, 168], "infect": [62, 138, 168], "bone": [62, 138, 168], "marrow": [62, 138, 168], "blastoderm": [62, 138, 168], "cultur": [62, 138, 168], "tissue_structur": [62, 138, 168], "medicaldistilbertforsequenceclassif": 63, "distilbert": 63, "sequenceclassifi": 63, "distilbertforsequenceclassif": 63, "destilbertfortokenclassifierpath": 63, "distilbert_sequence_classifier_ad": 63, "contextualparserapproach": 64, "setjsonpath": 64, "along": 64, "addition": [64, 87, 139, 169], "unifi": 64, "represent": [64, 76, 89], "jsonpath": 64, "prefixandsuffixmatch": 64, "prefix": [64, 73, 89, 200], "suffix": [64, 180], "hit": [64, 180, 181], "tsv": [64, 89], "optionalcontextrul": 64, "regardless": 64, "shortestcontextmatch": 64, "stop": [64, 87, 89, 183], "completecontextmatch": 64, "exact": 64, "parser": 64, "liver": 64, "metastas": 64, "pt1bn0m0": 64, "t5": 64, "primari": 64, "colon": 64, "contextualpars": [64, 83], "regex_token": [64, 190], "39": 64, "confidencevalu": 64, "00": 64, "49": [64, 186], "148": 64, "156": 64, "ct4bcn2m1": 64, "189": 64, "194": 64, "n3m1": 64, "316": 64, "323": 64, "setprefixandsuffixmatch": 64, "setoptionalcontextrul": 64, "setshortestcontextmatch": 64, "setcompletecontextmatch": 64, "boundari": 64, "contextualparsermodel": 64, "mycontextualparsermodel": 64, "contextual_pars": [65, 82], "deidentificationmodel": [66, 118, 147], "obfusc": [66, 67, 69, 118, 147, 184, 192], "mask": [66, 118, 147, 192], "person": [66, 73, 89, 118, 147, 184], "These": [66, 100, 118, 129, 147, 158], "setregexpatternsdictionari": [66, 118, 147], "line": [66, 89, 118, 147, 186, 190], "regexpatternsdictionari": [66, 118, 147], "ictionari": [66, 118, 147], "protect": [66, 118, 147], "mode": [66, 69, 80, 115, 116, 118, 145, 147, 184, 192], "anonim": [66, 118, 147], "obfuscated": [66, 118, 147], "dateformat": [66, 118, 147, 184], "obfuscatereffil": [66, 69, 118, 147, 184, 192], "reffileformat": [66, 69, 118, 147], "refsep": [66, 69, 118, 147], "sep": [66, 118, 147, 186], "reffil": [66, 69, 118, 147], "datetag": [66, 118, 147], "dai": [66, 67, 91, 118, 147, 184, 192], "displac": [66, 118, 147, 184], "60": [66, 118, 147, 184, 192], "datetoyear": [66, 118, 147], "minyear": [66, 118, 147], "pars": [66, 67, 118, 147, 186], "consistentobfusc": [66, 118, 147], "levenshtein": [66, 73, 118, 147], "distanc": [66, 73, 77, 97, 98, 99, 103, 118, 125, 147, 154], "sameentitythreshold": [66, 118, 147], "consid": [66, 73, 77, 98, 99, 103, 118, 147, 200], "appear": [66, 76, 118, 147], "9": [66, 97, 118, 147, 186], "obfuscaterefsourc": [66, 118, 147, 184], "doesnt": [66, 118, 147], "tha": [66, 118, 147], "obfuscatorreffil": [66, 118, 147], "faker": [66, 67, 118, 147, 192], "randomli": [66, 118, 147, 180, 181, 184], "regexoverrid": [66, 118, 147], "priorit": [66, 83, 118, 147], "With": [66, 118, 147], "repli": [66, 118, 147], "ouptut": [66, 118, 147], "ignoreregex": [66, 118, 147], "israndomdatedisplac": [66, 118, 147], "deidentificationparam": [66, 118, 147], "mappingscolumn": [66, 118, 147], "fake": [66, 118, 147], "returnentitymap": [66, 118, 147], "ssn": [66, 118, 147], "passport": [66, 118, 147], "dln": [66, 118, 147], "npi": [66, 118, 147], "c_card": [66, 118, 147], "iban": [66, 118, 147], "dea": [66, 118, 147], "maskingpolici": [66, 118, 147], "polici": [66, 92, 118, 147, 192], "same_length_char": [66, 118, 147], "compos": [66, 118, 147], "asterisk": [66, 118, 147], "surround": [66, 76, 118, 147], "squar": [66, 118, 147], "bracket": [66, 118, 147], "total": [66, 118, 147, 176], "smith": [66, 118, 147], "char": [66, 87, 118, 139, 147, 169], "jo": [66, 118, 147], "fixed_length_char": [66, 118, 147], "fix": [66, 118, 147, 176, 180, 182, 192], "setuseabbrevi": [66, 118, 147], "clinical_sensitive_ent": [66, 118, 147], "ner_deid_enrich": [66, 118, 147], "ner_con": [66, 118, 147], "dei": [66, 118, 147], "dic_regex_patterns_main_categori": [66, 118, 147], "setobfuscatereffil": [66, 69, 118, 147], "obfuscate_fixed_ent": [66, 118, 147], "setreffileformat": [66, 69, 118, 147], "setrefsep": [66, 69, 118, 147], "setmod": [66, 67, 118, 147], "setdateformat": [66, 118, 147], "mm": [66, 79, 91, 118, 147, 184, 186], "dd": [66, 79, 91, 118, 147, 184], "yy": [66, 118, 147], "yyyi": [66, 79, 91, 118, 147, 184], "setobfuscated": [66, 67, 118, 147], "setdatetag": [66, 67, 118, 147], "setdai": [66, 118, 147], "setobfuscaterefsourc": [66, 67, 118, 147], "7194334": [66, 118, 147], "93": [66, 118, 147], "oliveira": [66, 118, 147], "record": [66, 118, 147, 184], "2079": [66, 118, 147], "09": [66, 118, 147], "01010101": [66, 118, 147], "18": [66, 118, 147], "dr": [66, 118, 147], "gregori": [66, 118, 147], "hous": [66, 118, 147], "14": [66, 67, 118, 147], "fixedmasklength": [66, 118, 147], "zipcodetag": 66, "useshifdai": 66, "region": [66, 192], "unnormalizeddatemod": 66, "agerang": 66, "outputasdocu": 66, "getblacklist": 66, "setlanguag": [66, 67], "english": [66, 180, 181], "spanish": 66, "wher": 66, "m": [66, 134, 164, 184], "setmaskingpolici": 66, "setfixedmasklength": 66, "f": [66, 69, 79, 114], "setzipcodetag": 66, "zip": [66, 184], "zipcod": 66, "auxiliari": [66, 103, 125, 154], "resolv": [66, 102, 103, 125, 154], "setdatetoyear": 66, "setminyear": 66, "setconsistentobfusc": 66, "setsameentitythreshold": 66, "setregexoverrid": 66, "setignoreregex": 66, "setse": [66, 67, 69], "setisrandomdatedisplac": 66, "setmappingscolumn": 66, "setreturnentitymap": 66, "setuseshifdai": [66, 67], "shift": [66, 67, 192], "setregion": 66, "countri": [66, 184], "ountri": 66, "coud": 66, "setunnormalizeddatemod": 66, "setagerang": 66, "preserv": [66, 89], "setoutputasdocu": 66, "join": [66, 176, 180], "regexent": [66, 118, 147], "keep": [66, 80, 103, 118, 125, 147, 154, 176, 181], "regexpatterndictionari": [66, 118, 147], "deidentify_larg": [66, 118, 147], "getregexent": 66, "documenthashcod": 67, "deidentif": [67, 68, 82, 120, 121, 149, 150, 184, 192], "purpos": [67, 80, 180], "accord": [67, 83, 180, 192], "hash": [67, 192], "deidentifi": [67, 192], "accordingli": 67, "patientidcolumn": 67, "dateshiftcolumn": 67, "newdateshift": 67, "rangedai": 67, "rang": [67, 192], "patientid": 67, "a001": 67, "a003": 67, "chri": 67, "brown": [67, 198, 199], "discharg": 67, "02": [67, 91], "2022": 67, "04": [67, 91], "03": [67, 91], "moor": 67, "dateshift": [67, 192], "my_input_df": 67, "documenthash": [67, 192], "setdateshiftcolumn": 67, "clinical_n": 67, "ner_deid_subentity_aug": 67, "de_identif": 67, "deid_text": 67, "pipeline_col": 67, "empty_data": 67, "pipeline_col_model": 67, "ellend": 67, "manual": [67, 172], "errol": 67, "bang": 67, "ariel": 67, "null": 67, "jean": 67, "cotton": 67, "2023": [67, 91], "setpatientidcolumn": 67, "predefin": 67, "setnewdateshift": 67, "setrangedai": 67, "doccument_hashcod": [68, 82], "name_obfusc": [68, 82], "reidentif": [68, 82], "namechunkobfuscatorapproach": 69, "py": [69, 70, 71, 109, 110], "estim": [69, 107, 109], "scala": [69, 70, 71, 109, 110], "namechunkobfusc": 69, "inherit": [69, 70, 71, 110], "mix": [69, 70, 71, 110], "ins": [69, 70, 71, 110], "uid": [69, 70, 71, 110, 171], "redeideintif": 70, "usereplac": 71, "setusereplac": 71, "disabl": [71, 186], "getusereplac": 71, "ner_disambigu": [72, 82], "nerdisambigu": 73, "interest": 73, "compani": [73, 184], "kb": 73, "ne": 73, "mention": 73, "surfac": 73, "instanti": [73, 87, 134, 139, 164, 169], "embeddingtypeparam": 73, "numfirstchar": 73, "tokensearch": 73, "narrowwithapproximatematch": 73, "narrow": 73, "levenstein": 73, "levenshteindistancethresholdparam": 73, "nearmatchinggapparam": 73, "trim": 73, "len": 73, "nearmatchinggap": 73, "predictionslimit": 73, "amount": [73, 177], "s3knowledgebasenam": 73, "s3": [73, 183], "contest": 73, "donald": 73, "trump": 73, "who": 73, "later": 73, "defeat": 73, "christina": 73, "aguilera": 73, "sentenceembed": [73, 134, 164], "nerdlmodel": [73, 76, 87, 139, 169], "sets3knowledgebasenam": 73, "setnumfirstchar": 73, "nlppipelin": 73, "wikipedia": 73, "curid": 73, "4848272": 73, "31698421": 73, "55907961": 73, "144171": 73, "6636454": 73, "setembeddingtyp": 73, "settokensearch": 73, "setnarrowwithapproximatematch": 73, "setlevenshteindistancethresholdparam": 73, "setnearmatchinggapparam": 73, "setpredictionlimit": 73, "nerdisambiguatormodel": 73, "disambiguator_p": 73, "doc2chunkintern": 74, "chunkcol": [74, 104, 119, 148], "within": [74, 104, 119, 148], "stringtyp": [74, 91, 104, 119, 148], "arraytyp": [74, 104, 119, 148], "setisarrai": [74, 104, 119, 148], "startcolbytokenindex": [74, 104, 119, 148], "prepend": [74, 104, 119, 148], "whitespac": [74, 104, 119, 148, 176, 180], "isarrai": [74, 104, 119, 148], "failonmiss": [74, 104, 119, 148], "job": [74, 104, 119, 148], "chunk2doc": [74, 104, 105, 119, 148], "chunkassembl": [74, 104, 119, 148], "open": [74, 104, 119, 148], "advanc": [74, 104, 119, 148], "natur": [74, 100, 104, 119, 129, 148, 158], "annotatortyp": [74, 104, 119, 148], "miss": 74, "averageembed": [75, 76], "embded": 75, "bertsentencechunkembed": 76, "account": 76, "numer": [76, 79, 181], "chunkweight": 76, "prerequisit": [76, 87, 139, 169], "medicalnerdlmodel": [76, 87, 139, 169], "sbluebert_base_uncased_mli": 76, "sentence_chunk_embed": 76, "31995273": 76, "04710883": 76, "28973156": 76, "1294758": 76, "12481072": 76, "027161136": 76, "24613449": 76, "0949309": 76, "1825444": 76, "2252143": 76, "45139068": 76, "12400375": 76, "0075617577": 76, "90806055": 76, "12871636": 76, "setchunkweight": 76, "shortcut": [76, 90, 141, 170], "entitychunkembed": 77, "targetent": [77, 144], "entityweight": [77, 144], "maxsyntacticdist": [77, 97, 99], "syntact": [77, 97, 98, 99, 176], "pos_clin": [77, 97, 98, 99, 100, 128, 157], "dependency_pars": [77, 99, 100], "dependencyparsermodel": [77, 97, 98, 99, 100, 128, 157], "dependency_conllu": [77, 97, 98, 99, 100, 128, 157], "sbiobert_base_cased_mli": 77, "setmaxsyntacticdist": [77, 97, 98, 99, 100, 128, 157], "settargetent": 77, "setentityweight": 77, "parient": 77, "metformin": 77, "125": 77, "coumadin": 77, "pill": 77, "paracetamol": [77, 100], "sparkcontextfortest": 77, "267413": 77, "07614058": 77, "5620966": 77, "83838946": 77, "8911504": 77, "22319649": 77, "07094894": 77, "6885556": 77, "79176235": 77, "82672405": 77, "10939768": 77, "29242": 77, "3574444": 77, "3981813": 77, "79609615": 77, "weigh": 77, "notat": 77, "target_ent": 77, "related_ent": 77, "insensit": 77, "related1": 77, "related2": 77, "average_embed": [78, 82], "bert_sentence_embed": [78, 82], "entity_chunk_embed": [78, 82], "featuresassembl": [79, 80], "anyth": 79, "cast": 79, "tri": 79, "feature_vector": [79, 80, 195], "timestampformat": 79, "hh": 79, "ss": 79, "zz": 79, "test_jsl": 79, "relfeatur": 79, "withcolumn": 79, "array_column": 79, "words_in_ent1": [79, 186], "words_in_ent2": [79, 186], "features_asm1": 79, "words_between": [79, 186], "features_t": 79, "__data": 79, "labelcolumn": [80, 87, 107, 134, 139, 164, 169], "epochsn": 80, "proce": [80, 180], "dropou": 80, "lay": 80, "validaiton": 80, "fiximbal": 80, "whenther": 80, "balanc": 80, "trainig": 80, "highest": [80, 83, 87], "featuresc": 80, "minmax": 80, "feature_1": 80, "feature_2": 80, "feature_n": 80, "graph_fil": [80, 97], "setmulticlass": 80, "label_column": 80, "drouptup": 80, "validation_split": 80, "mode_fil": 80, "fix_imbal": 80, "feature_sc": 80, "output_logs_path": 80, "deid": [82, 121, 130, 143, 150, 159], "disambigu": [82, 143, 195], "chunk_merg": [82, 84], "iob_tagg": [82, 85], "medical_n": [82, 85], "ner_converter_intern": [82, 85], "zero_shot_n": [82, 85, 137, 140, 166, 167], "date_norm": [82, 93], "drug_norm": [82, 93], "qa": [82, 143], "qa_ner_gener": [82, 94, 130, 131, 159, 160], "re": [82, 143, 186], "relation_extraction_dl": [82, 96, 126, 127, 155, 156], "relation_ner_chunk_filt": [82, 96], "zero_shot_relation_extract": [82, 96, 126, 127, 155, 156], "resolut": [82, 104, 121, 130, 143, 150, 159], "resolver_merg": [82, 101], "sentence_entity_resolv": [82, 101, 121, 124, 150, 153], "annotation_merg": [82, 143], "doc2_chunk_intern": [82, 143], "feature_assembl": [82, 143], "resolution2_chunk": [82, 143], "router": [82, 143], "source_tracking_metadata_param": [82, 143], "tf_graph_build": [82, 143], "commonchunkmergeparam": 83, "mergeoverlap": 83, "setmergeoverlap": 83, "overlap": 83, "mergepriorizationparam": 83, "orderingfeatur": 83, "selectionstrategi": 83, "defaultconfid": 83, "chunkpreced": 83, "chunkprecedencevaluepriorit": 83, "setorderingfeatur": 83, "_orderingfeatur": 83, "chunkbegin": 83, "chunklength": 83, "chunkconfid": 83, "setselectionstrategi": 83, "_selectionstrategi": 83, "diverselong": 83, "setdefaultconfid": 83, "_defaultconfid": 83, "setchunkpreced": 83, "_chunkpreced": 83, "comma": [83, 89], "drive": 83, "togeth": 83, "setchunkprecedencevaluepriorit": 83, "_chunkprecedencevaluepriorit": 83, "desir": [83, 180], "chunkmergeapproach": 83, "merger": 83, "certain": [83, 88], "decis": 83, "kept": 83, "setreplacedictresourc": [83, 89], "falsepositivesresourc": 83, "posit": [83, 89], "replacedictresourc": [83, 89], "preced": 83, "proccess": [83, 89], "63": [83, 86, 89], "man": [83, 86, 89], "hospit": [83, 86, 89, 184], "emb": [83, 86], "ner_jsl": [83, 86, 89], "jsl_ner": [83, 89], "jsl_ner_chunk": 83, "ner_bionlp": 83, "bionlp_ner": 83, "bionlp_ner_chunk": 83, "merged_chunk": 83, "19": [83, 86], "72": [83, 86], "98": [83, 86], "107": [83, 86], "cellul": [83, 86], "diagnosi": [83, 86], "119": [83, 86], "pneumonia": [83, 86], "setfalsepositivesresourc": 83, "chunkmergemodel": 83, "chunkmergeraproach": 83, "falseposit": 83, "replacedict": 83, "iobtagg": 86, "iob": [86, 87, 89, 139, 169, 172, 180, 181, 186, 200], "bioe": 86, "iobtaggermodel": 86, "setschem": 86, "bilstm": [87, 139, 169], "art": [87, 134, 139, 164, 169], "2003": [87, 139, 169], "chosen": [87, 139, 169, 181], "bertembed": [87, 103, 125, 139, 154, 169], "usag": [87, 89, 134, 139, 164, 169], "minepoch": [87, 139, 169], "maxepoch": [87, 134, 139, 164, 169], "randomse": [87, 134, 139, 164, 169], "decai": [87, 139, 169], "coeffici": [87, 134, 139, 164, 169], "rage": [87, 139, 169], "005": [87, 134, 139, 164, 169], "usecontrib": [87, 139, 169], "Not": [87, 139, 169], "might": [87, 139, 169], "slightli": [87, 139, 169], "evaluationlogextend": [87, 116, 139, 145, 169], "includeallconfidencescor": [87, 139, 169], "stdout": [87, 134, 139, 164, 169], "enablememoryoptim": [87, 139, 169], "slow": [87, 139, 169], "down": [87, 139, 169], "randomvalidationsplitperepoch": 87, "rather": 87, "nerdlapproach": [87, 107, 139, 169, 177], "trainingdata": [87, 139, 169], "readdataset": [87, 139, 169, 186], "conll2003": [87, 139, 169], "eng": [87, 139, 169, 186], "logprefix": 87, "usebestmodel": 87, "pretrainedmodelpath": [87, 97, 103, 125, 154], "overrideexistingtag": 87, "tagsmap": 87, "earlystoppingcriterion": 87, "earlystoppingpati": 87, "ff": 87, "setusecontrib": 87, "setlr": [87, 134, 164], "setpo": 87, "setincludeallconfidencescor": 87, "setusebestmodel": 87, "monitor": 87, "macro": [87, 187], "f1": [87, 182, 187, 197, 200], "precend": 87, "across": 87, "setlogprefix": 87, "setpretrainedmodelpath": [87, 97, 103], "point": [87, 97, 103, 125, 154], "setoverrideexistingtag": 87, "overrid": [87, 97, 103, 125, 154], "settagsmap": 87, "setearlystoppingcriterion": 87, "criterion": 87, "earli": 87, "setearlystoppingpati": 87, "patienc": 87, "termin": 87, "setrandomvalidationsplitperepoch": 87, "wordembed": [87, 139, 169], "glove_100d": [87, 139, 169], "inferencebatchs": [87, 139, 169], "labelcas": [87, 139, 169], "upper": [87, 97, 98, 99, 128, 139, 157, 169, 180], "offici": [87, 139, 169], "ekeu": [87, 139, 169], "baghdad": [87, 139, 169], "trainingclassdistribut": 87, "setinferencebatchs": 87, "setlabelcas": 87, "gettrainingclassdistribut": 87, "ner_model_path": [87, 139, 169], "nerchunk": [88, 97, 98, 128, 157], "neighbor": 88, "dt": 88, "jj": 88, "ner_radiologi": 88, "imagingfind": 88, "bodypart": 88, "regexpars": 88, "commonnerconverterinternalparam": 89, "preserveposit": 89, "greedymod": 89, "contigu": 89, "ignorestopword": 89, "larger": 89, "black": [89, 178, 198, 199], "setpreserveposit": 89, "preserve_posit": 89, "setgreedymod": 89, "greedy_mod": 89, "setthreshold": [89, 103, 125, 154], "setignorestopword": 89, "stopword": 89, "iob2": [89, 180, 181], "friendli": 89, "annotatorapproachintern": [89, 109], "associ": 89, "replacelabel": 89, "substitut": 89, "binari": [89, 100, 129, 158], "replaced_ner_chunk": 89, "setreplacelabel": 89, "loc": [89, 200], "drug_brandnam": 89, "drug_frequ": 89, "drug_dosag": 89, "drug_strength": 89, "nerconverterinternalmodel": 89, "zeroshotnermodel": [90, 141, 170], "shot": [90, 100, 129, 141, 158, 170], "robertaforquestionansw": [90, 141, 170], "entitydefinit": [90, 141, 170], "question": [90, 141, 170], "citi": [90, 105, 141, 170, 184], "town": [90, 141, 170], "predictionthreshold": [90, 97, 98, 100, 128, 129, 141, 157, 158, 170], "01f": [90, 141, 170], "ignoreent": [90, 141, 170], "setentitydefinit": [90, 141, 170], "clara": [90, 141, 170], "live": [90, 141, 170, 184], "york": [90, 141, 170], "hellen": [90, 141, 170], "pari": [90, 141, 170], "5328949": [90, 141, 170], "9360068": [90, 141, 170], "83294415": [90, 141, 170], "45366877": [90, 141, 170], "setpredictionthreshold": [90, 97, 98, 128, 157], "zero_shot_ner_roberta": [90, 141, 170], "roberta_base_qa_squad2": [90, 141, 170], "datenorm": 91, "els": 91, "anchordateyear": 91, "anchor": 91, "tomorrow": 91, "2021": 91, "anchordatemonth": 91, "month": 91, "januari": 91, "anchordatedai": 91, "08": 91, "12mar2021": 91, "jan": 91, "3april": 91, "2020": 91, "mondai": [91, 134, 164], "todai": 91, "week": 91, "original_d": 91, "date_chunk": 91, "setanchordateyear": 91, "2000": 91, "setanchordatemonth": 91, "setanchordatedai": 91, "normalized_d": 91, "outputdateformat": 91, "defaultreplacementdai": 91, "defaultreplacementmonth": 91, "defaultreplacementyear": 91, "setoutputdateformat": 91, "setdefaultreplacementdai": 91, "setdefaultreplacementmonth": 91, "06": 91, "setdefaultreplacementyear": 91, "drugnorm": 92, "raw": 92, "scrape": 92, "web": 92, "xml": 92, "dirti": 92, "sodium": 92, "chlorid": 92, "potassium": 92, "13bag": 92, "interferon": 92, "alfa": 92, "2b": 92, "million": 92, "injec": 92, "meq": 92, "oral": 92, "sol": 92, "document_norm": 92, "trainingpipelin": 92, "normalized_text": [92, 103, 125, 154], "bag": 92, "10000000": 92, "unt": 92, "inject": 92, "solut": 92, "setpolici": 92, "nerquestiongener": 95, "questionpronoun": 95, "strategytyp": 95, "questionmark": 95, "entities1": 95, "entities2": 95, "setquestionmark": 95, "setstrategytyp": 95, "setentities1": 95, "e1": 95, "setentities2": 95, "e2": 95, "setquestionpronoun": 95, "relationextractionmodel": [97, 98, 128, 157], "fromentitybegincol": 97, "fromentityendcol": 97, "fromentitylabelcol": 97, "toentitybegincol": 97, "toentityendcol": 97, "toentitylabelcol": 97, "relationdirectioncol": 97, "relatio": 97, "embedd": [97, 98, 128, 157], "postag": [97, 98, 128, 157], "ner_events_clin": [97, 98, 128, 157], "depencypars": [97, 98, 128, 157], "relations_t": 97, "target_rel": 97, "05": 97, "from_begin": 97, "from_end": 97, "from_label": 97, "to_begin": 97, "to_end": 97, "to_label": 97, "traindata": [97, 98, 128, 157], "customlabel": [97, 98, 144], "overrideexistinglabel": 97, "begin_col": 97, "label_col": [97, 115], "setcustomlabel": [97, 98], "setrelationdirectioncol": 97, "set\u043everrideexistinglabel": 97, "relationpair": [97, 98, 99, 128, 157], "biomark": 97, "relativedai": 97, "relationpairscasesensit": [97, 99], "external_body_part_or_region": [97, 98, 99, 128, 157], "internal_organ_or_compon": [97, 98, 99, 128, 157], "re_model": [97, 98, 100, 128, 157], "re_bodypart_direct": 97, "setrelationpair": [97, 98, 99, 100, 128, 157], "mri": [97, 98, 99, 100, 128, 157], "demonstr": [97, 98, 99, 128, 157], "infarct": [97, 98, 99, 128, 157], "brain": [97, 98, 99, 128, 157], "cerebellum": [97, 98, 99, 128, 157], "basil": [97, 98, 99, 128, 157], "ganglia": [97, 98, 99, 128, 157], "chunk1": [97, 98, 128, 157, 186], "chunk2": [97, 98, 128, 157, 186], "setrelationpairscasesensit": [97, 99], "posologyremodel": 97, "genericremodel": 97, "relationextractiondlmodel": [98, 99, 128, 157], "contrast": [98, 128, 157], "re_ner_chunk_filt": [98, 99, 100, 128, 157], "renerchunksfilt": [98, 99, 100, 128, 129, 157, 158], "re_ner_chunk": [98, 99, 100, 128, 157], "redl_bodypart_direction_biobert": [98, 128, 157], "further": 99, "especi": 99, "doclevelrel": 99, "words_embedd": [99, 100], "pos_tagg": [99, 100], "clinical_ner_tagg": 99, "jsl_ner_wip_greedy_clin": 99, "trained_pipelin": 99, "cre": 99, "re_chunk": 99, "paired_to": 99, "59": 99, "setdoclevelrel": [99, 100], "zeroshotrelationextractionmodel": [100, 129, 158], "util": [100, 129, 143, 158, 174, 175, 179, 184], "nli": [100, 129, 158], "statement": [100, 129, 158], "regard": [100, 129, 158], "relationship": [100, 129, 158], "append": [100, 129, 158], "relationalcategori": [100, 129, 144, 158], "hypothesi": [100, 129, 158], "templat": [100, 129, 158], "cure": [100, 129, 158], "problem": [100, 129, 158, 186], "5f": [100, 129, 158], "multilabel": [100, 129, 158], "categor": [100, 129, 158], "spark_sbert_zero_shot": 100, "setrelationalcategori": 100, "reveal": [100, 129, 158], "setmultilabel": 100, "allevi": 100, "headach": 100, "sick": 100, "cancer": 100, "9760039": [100, 129, 158], "98819494": [100, 129, 158], "9929625": [100, 129, 158], "zero_shot_r": 100, "resolvermerg": 102, "enit": 102, "sentenceresolverparam": 103, "distancefunct": 103, "wmd": 103, "euclidean": 103, "cosin": [103, 125, 154], "neighbour": 103, "knn": 103, "queri": 103, "confidencefunct": 103, "invers": 103, "missasempti": 103, "unmatch": 103, "setdistancefunct": [103, 125, 154], "setneighbour": [103, 125, 154], "thre": 103, "setconfidencefunct": 103, "setmissasempti": 103, "sentenceentityresolverapproach": [103, 125, 154], "thiu": [103, 125, 154], "sentenceentityresolvermodel": [103, 125, 154], "ontologi": [103, 125, 154], "curat": [103, 125, 154], "rxnorm": [103, 125, 154], "snome": [103, 125, 154], "normalizedcol": [103, 125, 154], "overrideexistingcod": [103, 125, 154], "returncosinedist": [103, 125, 154], "aux_label_col": [103, 125, 154], "useauxlabel": [103, 125, 154], "auxlabel": [103, 125, 154], "dropcodeslist": [103, 125, 154], "omit": [103, 125, 154], "sent_biobert_pubmed_base_cas": [103, 125, 154], "snomedtrainingpipelin": [103, 125, 154], "snomedtrainingmodel": [103, 125, 154], "snomeddata": [103, 125, 154], "bertextractor": [103, 125, 154], "bert_embed": [103, 125, 154], "setnormalizedcol": [103, 125, 154], "snomed_cod": [103, 125, 154], "euclidian": [103, 125, 154], "snomedmodel": [103, 125, 154], "setuseauxlabel": 103, "setauxlabelcol": 103, "setextractcosinedist": 103, "setoverrideexistingcod": 103, "setdropcodeslist": 103, "searchtre": [103, 125, 154], "tree": [103, 125, 154], "setsearchtre": 103, "resolution2chunk": 104, "filterfieldsel": 105, "metadatafield": 105, "rules2": 105, "setstrategi": 105, "match_al": 105, "doc_chunk": 105, "sent_small_bert_l2_128": 105, "router_name_embed": 105, "setmetadatafield": 105, "setfilterfieldsel": 105, "names_embed": 105, "router_city_embed": 105, "cities_embed": 105, "router_nam": 105, "names_chunk": 105, "sourcetrackingmetadataparam": 106, "includeoutputcolumn": 106, "outputcolumnkei": 106, "includestandardfield": 106, "standardfieldkei": 106, "allpossiblefieldstostandard": 106, "setincludeoutputcolumn": 106, "setoutputcolumnkei": 106, "setincludestandardfield": 106, "setstandardfieldkei": 106, "setallpossiblefieldstostandard": 106, "prioriti": 106, "tfgraphbuildermodel": 107, "modelnam": 107, "hiddenunitsnumb": 107, "hiddenlay": 107, "maxsequencelength": 107, "hiddenact": 107, "hiddenactl2": 107, "hiddenweightsl2": 107, "batchnorm": 107, "islicens": 107, "userelationdirect": 107, "outputact": 107, "sethiddenact": 107, "gethiddenact": 107, "sethiddenactl2": 107, "l2": 107, "gethiddenactl2": 107, "sethiddenweightsl2": 107, "gethiddenweightsl2": 107, "setbatchnorm": 107, "getbatchnorm": 107, "setislicens": 107, "medicalneraprroach": 107, "getislicens": 107, "sethiddenlay": 107, "gethiddenlay": 107, "hiudden": 107, "setmaxsequencelength": 107, "getmaxsequencelength": 107, "sethiddenunitsnumb": 107, "gethiddenunitsnumb": 107, "setuserelationdirect": 107, "getuserelationdirect": 107, "settoutputact": 107, "getoutputact": 107, "setmodelnam": 107, "getmodelnam": 107, "getlabelcolumn": 107, "getinputcol": 107, "getgraphfold": 107, "greaph": 107, "getgraphfil": 107, "annotatormodelintern": 110, "annotatorpropertiesintern": 111, "compon": 111, "attach": 111, "setforceinputtypevalid": 111, "inputcolsvalid": 111, "annotator_approach_intern": [112, 143], "annotator_model_intern": [112, 143], "annotator_properties_intern": [112, 143], "verifi": 113, "findvers": 113, "privat": [113, 183], "showvers": 113, "print": [113, 180, 183, 187, 197, 200], "customtransform": 114, "anoth": 114, "norvigspellevalu": 115, "test_fil": 115, "ground_truth_fil": 115, "computeaccuracyannot": 115, "train_fil": 115, "computeaccuracymodel": 115, "symspellevalu": 115, "nerdlevalu": 115, "tag_level": 115, "full_chunk": 115, "computemetricsfromdf": 115, "prediction_col": 115, "drop_o": 115, "case_sensit": [115, 186], "nercrfevalu": 115, "posevalu": 115, "olumn": [116, 145], "eval": [116, 143, 145], "financedocumenthashcod": 119, "document_hashcod": [120, 121, 149, 150], "chunk_classif": [130, 143, 159], "seq_gener": [130, 143, 159], "sequence_classif": [130, 143, 159], "finance_bert_for_sequence_classif": [130, 136], "finance_classifier_dl": [130, 136], "finance_document_ml_classifi": [130, 136], "token_classif": [130, 143, 159], "financenerquestiongener": 132, "sequence_gener": [132, 161], "financebertforsequenceclassif": 133, "financebertfortokenclassif": [133, 138], "financeclassifierdlapproach": 134, "classifierdl": [134, 164], "univers": [134, 164], "dnn": [134, 164], "up": [134, 164, 181], "classifierdlmodel": [134, 164], "multiclassifierdlapproach": [134, 164], "sentimentdlapproach": [134, 164], "item": [134, 164, 178, 190], "doubl": [134, 164], "universalsentenceencod": [134, 164], "movi": [134, 164], "wach": [134, 164], "ever": [134, 164], "opinion": [134, 164], "win": [134, 164], "award": [134, 164], "terribl": [134, 164], "bad": [134, 164], "realli": [134, 164], "trane": [134, 164], "smallcorpu": [134, 164], "useembed": [134, 164], "docclassifi": [134, 164], "classifierdlapproach": [134, 164], "5e": [134, 164], "financeclassifierdlmodel": [134, 135], "financeclassifierdl": 134, "classifierdl_use_trec6": [134, 164], "trec": [134, 164], "multiclassifierdlmodel": [134, 164], "sentimentdlmodel": [134, 164], "sarcasmdl": [134, 164], "classifierdl_use_sarcasm": [134, 164], "sarcasm": [134, 164], "readi": [134, 164], "love": [134, 164], "wake": [134, 164], "am": [134, 164], "arrays_zip": [134, 164], "out": [134, 164], "financedocumentmlclassifierapproach": 135, "financedocumentmlclassifiermodel": [135, 165], "finance_bert_for_token_classifi": [137, 140], "finance_n": [137, 140], "financebertfortokenclassifi": 138, "bert_base_token_classifier_conll03": [138, 168], "financenerapproach": 139, "financenermodel": 139, "profil": 142, "code_arrai": 142, "sex": 142, "elig": 142, "cna": 142, "orec": 142, "medicaid": 142, "profilev24y17": 142, "profilev24y18": 142, "profilev24y19": 142, "profilev24y20": 142, "profilev24y21": 142, "profilev24y22": 142, "profilev23y18": 142, "profilev23y19": 142, "profilev23": 142, "profilev22y17": 142, "profilev22y18": 142, "profilev22y19": 142, "profilev22y20": 142, "profilev22y21": 142, "profilev22y22": 142, "profilev22": 142, "nlp_test": 143, "noisy_label": [143, 174], "robust": [143, 174], "alab_util": [143, 194], "conll_pars": [143, 194], "deidentification_modul": [143, 194], "licensed_annotator_typ": [143, 194], "log_pars": [143, 194], "ner_util": [143, 194], "ocr_nlp_processor": [143, 194], "ocr_util": [143, 194], "training_log_parser_util": [143, 194], "custom_transform": 143, "modeltrac": 143, "structured_deidentif": 143, "text_to_documents_column": 143, "training_log_pars": 143, "updatemodel": 143, "transformer_seq_classif": 143, "version_regex": 143, "size_regex": 143, "m1": 143, "public": 143, "get_credenti": 143, "pub_vers": 143, "library_set": 143, "legaldocumenthashcod": 148, "legal_bert_for_sequence_classif": [159, 162], "legal_classifier_dl": [159, 162], "legal_document_ml_classifi": [159, 162], "legalnerquestiongener": 161, "legalbertforsequenceclassif": 163, "legalbertfortokenclassif": [163, 168], "legalclassifierdlapproach": 164, "legalclassifierdlmodel": [164, 165], "legalclassifierdl": 164, "legaldocumentmlclassifierapproach": 165, "legaldocumentmlclassifiermodel": 165, "legal_bert_for_token_classifi": [166, 167], "legal_n": [166, 167], "legalbertfortokenclassifi": 168, "legalnerapproach": 169, "legalnermodel": 169, "adduidcol": 171, "timestamp": 171, "init_medical_gender_classifi": 172, "rulebasedclassifi": 172, "test_gender_bia": 172, "ner_pipelin": [172, 186, 198], "test_conl": 172, "classifier_pipelin": 172, "training_conl": 172, "log_path": [172, 177, 180, 181, 187, 197], "gender_bias_result": 172, "explode_sent": 172, "thu": 172, "pass": [172, 176, 180], "doc_amount": 172, "training_set_gender_distribut": 172, "test_set_gender_distribut": 172, "test_set_metr": 172, "bias_test": [173, 174], "noisy_label_fix": [174, 175], "noisy_label_test": [174, 175], "robustness_fix": [174, 179], "robustness_test": [174, 179], "conll_read": [176, 180], "conll_path": [176, 177, 180, 181], "conll_writ": 176, "chunk_tag": [176, 200], "save_path": 176, "docs_indx": 176, "sentences_list": 176, "tags_list": 176, "labels_list": 176, "track": 176, "written": 176, "update_with_model_predict": 176, "fix_df": 176, "test_label_error": [176, 177], "sent_indx": 176, "token_indx": 176, "apply_label_fix": 176, "label_fix": 176, "sent_index": 176, "add_flag_to_conl": 176, "flag_index": 176, "speech": 176, "interactivefix": 176, "result_df": 176, "default_strategi": 176, "page_s": 176, "ui": 176, "jupyt": 176, "notebook": 176, "interact": [176, 184], "find_label_error": 176, "displai": [176, 178], "create_grid": 176, "fill_grid": 176, "ipywidget": 176, "gridspeclayout": 176, "get_head": 176, "get_central_grid": 176, "get_foot": 176, "get_page_control_button": 176, "next_pag": 176, "prev_pag": 176, "adjust_page_s": 176, "num_sample_drop_down": 176, "get_page_numb": 176, "empty_grid": 176, "get_class": 176, "fix_label": 176, "apply_fix": 176, "fix_al": 176, "get_drop_down_titl": 176, "get_cell_el": 176, "css_class": 176, "get_sent": 176, "get_default_indx": 176, "indx": 176, "get_drop_down": 176, "get_title_html": 176, "calculate_label_error_scor": 177, "numpi": 177, "pred_prob": 177, "get_label_quality_scor": 177, "seri": [177, 180, 181], "np": 177, "class": [177, 201], "high": 177, "get_unique_ent": 177, "training_pipelin": 177, "noisy_label_test_result": 177, "cross": 177, "fold": 177, "setincludeconfidencescor": 177, "higher": 177, "noisi": [177, 180, 181], "stylesheet": 178, "multilin": 178, "background": 178, "color": [178, 198, 199], "0098da": 178, "align": [178, 180], "center": 178, "footer": 178, "ffffff": 178, "ignore_margin": 178, "row_odd": 178, "262626": 178, "row_even": 178, "eaeaeb": 178, "page_button": 178, "repeat": 178, "border": [178, 190], "cursor": 178, "pointer": 178, "overflow": 178, "outlin": 178, "table_titl": 178, "font": 178, "2em": 178, "500": 178, "title_text": 178, "70px": 178, "inlin": 178, "flex": [178, 180, 181], "dropdown": 178, "1px": 178, "solid": 178, "radiu": 178, "4px": 178, "aeaeae": 178, "kind": [180, 181], "perturb": [180, 181], "create_datafram": 180, "pos_sync_tag": 180, "synthet": 180, "seper": [180, 192], "filter_by_entity_typ": 180, "ent_typ": 180, "get_sampl": 180, "sample_data": 180, "exactli": 180, "create_terminologi": [180, 181], "terminologi": [180, 181], "modify_capitalization_upp": [180, 181], "uppercas": [180, 181], "augment": [180, 182], "modify_capitalization_low": [180, 181], "modify_capitalization_titl": [180, 181], "add_punctuation_to_data": 180, "strip_punctuation_from_data": 180, "strip": [180, 181], "senctenc": 180, "add_typo_to_sent": [180, 181], "introduce_typo": [180, 181], "introduc": [180, 181], "typo": [180, 181], "swap_entities_with_terminologi": 180, "get_cohyponyms_wordnet": [180, 181], "co": [180, 181], "hyponym": [180, 181], "wordnet": [180, 181], "swap_with_cohyponym": [180, 181], "databas": [180, 181], "convert_acc": 180, "lang_dict": [180, 181], "convers": [180, 181], "add_context_to_data": 180, "starting_context": [180, 181], "ending_context": [180, 181], "add_contract": [180, 181], "augment_robust": 180, "add_punctu": [180, 181], "strip_punctu": [180, 181], "make_typo": 180, "american_to_british": [180, 181], "british_to_american": [180, 181], "add_context": [180, 181], "swap_ent": [180, 181], "swap_cohyponym": [180, 181], "optimized_inplac": 180, "random_st": 180, "return_spark": 180, "conll_save_path": 180, "print_info": 180, "ignore_warn": 180, "nois": [180, 181], "british": [180, 181], "american": [180, 181], "inplac": 180, "distinctli": 180, "warn": 180, "about": 180, "test_and_augment_robust": 180, "pipeline_model": [180, 181, 186], "test_file_path": [180, 181], "conll_path_to_aug": 180, "metric_typ": [180, 181], "metrics_output_format": [180, 181], "robustness_test_result": [180, 181], "noise_prob": [180, 181, 182], "One": [180, 189], "liner": 180, "assembl": [180, 181, 190], "applic": [180, 181], "strict": [180, 181], "capit": [180, 181], "special": [180, 181, 189], "test_set_languag": [180, 181], "list_of_str": 181, "keep_numeric_punctu": 181, "ie": 181, "40": [181, 192], "000": 181, "modify_capit": 181, "got": 181, "swap_named_entities_from_terminologi": 181, "remove_punctuation_token": 181, "remove_context_token": 181, "starting_context_token": 181, "ending_context_token": 181, "remove_contraction_token": 181, "list_with_contract": 181, "list_without_contract": 181, "calculate_metr": 181, "filtered_df": 181, "noise_typ": 181, "noise_descript": 181, "test_set": 181, "total_amount": 181, "original_annotations_df": 181, "noisy_test_set": 181, "token_filter_funct": 181, "starting_context_token_list": 181, "ending_context_token_list": 181, "awar": 181, "disrupt": 181, "conll_sentence_read": 181, "test_robust": 181, "sample_sentence_count": 181, "calculate_proport": 182, "f1_score": 182, "suggest_perturb": 182, "test_result": 182, "suggest": 182, "get_augmentation_proport": 182, "pull": 182, "printprogress": 183, "progress": 183, "bar": 183, "consol": 183, "internalresourcedownload": 183, "downlod": 183, "downloadmodel": 183, "reader": [183, 186], "j_dwn": 183, "internalspythonresourcedownload": 183, "showprivatemodel": 183, "showprivatepipelin": 183, "showuncategorizedresourc": 183, "uncategor": 183, "showavailableannot": 183, "returnprivatemodel": 183, "returnprivatepipelin": 183, "tabular": 184, "structureddeidentif": 184, "columnsse": 184, "userandomdatedisplac": 184, "street": 184, "fax": 184, "internet": 184, "profess": 184, "opf": 184, "doctor": 184, "bioid": 184, "screen": 184, "protein": 184, "occur": 184, "someth": 184, "someon": 184, "healthplan": 184, "medicalrecord": 184, "obfuscatecolumn": 184, "texttodocumentscolumn": 185, "todocumentscolumn": 185, "annotationtooljsonread": 186, "cleanup_mod": 186, "split_char": 186, "context_char": 186, "min_chars_tol": 186, "align_chars_tol": 186, "merge_overlap": 186, "sddlpath": 186, "tool": 186, "aspres": 186, "rdr": 186, "anc": 186, "corpu": 186, "small": 186, "json_path": 186, "assertion_df": 186, "generateassertiontrainset": 186, "sentencecol": 186, "assertioncol": 186, "generateconl": 186, "taskcolumn": 186, "tokencol": 186, "nerlabel": 186, "generateplainassertiontrainset": 186, "codiespread": 186, "readdatasettaskx": 186, "textfold": 186, "cantemistread": 186, "readdatasettaskn": 186, "synonymaugmentationuml": 186, "umls_path": 186, "code_col": 186, "description_col": 186, "augmentcsv": 186, "corpus_csv_path": 186, "do_product": 186, "augmentation_mod": 186, "plain_text": 186, "synonym_sourc": 186, "uml": 186, "regex_pars": 186, "euclidean_distance_threshold": 186, "cosine_distance_threshold": 186, "synonym_limit": 186, "casing_funct": 186, "augmentdatafram": 186, "corpus_df": 186, "redatasethelp": 186, "spark_df": 186, "preprocess": 186, "i2b2_clinical_rel_dataset": 186, "column_map": 186, "begin1": 186, "firstcharent1": 186, "end1": 186, "lastcharent1": 186, "begin2": 186, "firstcharent2": 186, "end2": 186, "lastcharent2": 186, "create_annotation_column": 186, "txt_file": 186, "sent_id": 186, "beth": 186, "partner": 186, "i2b2": 186, "2010": 186, "va": 186, "tem": 186, "44": 186, "respiratori": 186, "satur": 186, "84": 186, "75": 186, "No": 186, "lotion": 186, "crea": 186, "146": 186, "trnap": 186, "incis": 186, "conc": 186, "43": [186, 199], "ter": 186, "picc": 186, "54": 186, "68": 186, "58": 186, "21": 186, "light": 186, "headed": 186, "diaphoresi": 186, "92": 186, "82": 186, "electroca": 186, "61": 186, "inferior": 186, "38": 186, "st": 186, "depressio": 186, "239": 186, "196": 186, "176": 186, "145": 186, "train_data": 186, "ner_column_nam": 186, "schema": 186, "printschema": 186, "root": 186, "nullabl": 186, "ner_log_pars": 187, "parse_logfil": 187, "avg": 187, "get_chart": [187, 197], "log_fil": [187, 197], "plot": [187, 197], "figur": [187, 197], "precis": [187, 197, 200], "recal": [187, 197, 200], "loss_plot": [187, 197], "get_best_f1_scor": 187, "micro": 187, "true_seq": [187, 197, 200], "pred_seq": [187, 197, 200], "overal": [187, 197, 200], "simpli": [187, 197, 200], "evaluate_conll_fil": [187, 197], "fileiter": [187, 197], "assertion_log_pars": 187, "updatecachemodel": 188, "cache_fold": 188, "refresh": 188, "hdf": 188, "date_cutoff": 188, "sinc": 188, "get_mt_sampl": 189, "medical_speci": 189, "transcrib": 189, "transcript": 189, "mtsampl": 189, "allergy_immunologi": 189, "autopsi": 189, "bariatr": 189, "cardiovascular_pulmonari": 189, "chiropract": 189, "consult_history_and_phi": 189, "cosmetic_plastic_surgeri": 189, "dentistri": 189, "dermatologi": 189, "diets_and_nutrit": 189, "discharge_summari": 189, "emergency_room_report": 189, "endocrinologi": 189, "ent_otolaryngologi": 189, "gastroenterologi": 189, "general_medicin": 189, "hematology_oncologi": 189, "hospice_palliative_car": 189, "im": 189, "lab_medicine_pathologi": 189, "letter": 189, "nephrologi": 189, "neurologi": 189, "neurosurgeri": 189, "obstetrics_gynecologi": 189, "office_not": 189, "ophthalmologi": 189, "orthoped": 189, "pain_manag": 189, "pediatrics_neonat": 189, "physical_medicine_rehab": 189, "podiatri": 189, "psychiatry_psychologi": 189, "radiologi": 189, "rheumatologi": 189, "sleep_medicin": 189, "soap_chart_progress_not": 189, "speech_languag": 189, "surgeri": 189, "urologi": 189, "scrap": 189, "nlp_token_pipelin": 190, "nlp_pos_pipelin": 190, "token_pipeline_initi": 190, "pos_pipeline_initi": 190, "sentencedetectordlmodel": 190, "regular_token": 190, "regextoken": 190, "empty_df": 190, "get_doc_assembl": 190, "get_sent_detector": 190, "get_regular_token": 190, "get_regex_token": 190, "get_po": 190, "get_empty_df": 190, "get_nlp_token_pipelin": 190, "get_sentence_pipelin": 190, "get_rel_df": 190, "get_ner_df": 190, "get_ner_sentence_bord": 190, "get_nlp_pos_pipelin": 190, "tagger": 190, "get_single_task_conl": 190, "pos_pipelin": 190, "token_pipelin": 190, "style": [190, 193, 198], "get_token_df": 190, "_type_": 190, "read_conl": 190, "filepath": 190, "deid_with_custom_pipelin": 192, "deid_with_pp": 192, "custom_pipelin": 192, "masking_polici": 192, "fixed_mask_length": 192, "obfuscate_d": 192, "obfuscate_ref_sourc": 192, "obfuscate_ref_file_path": 192, "age_group_obfusc": 192, "age_rang": 192, "shift_dai": 192, "number_of_dai": 192, "documenthashcoder_col_nam": 192, "date_tag": 192, "unnormalized_d": 192, "unnormalized_mod": 192, "id_column_nam": 192, "date_shift_column_nam": 192, "input_file_path": 192, "output_file_path": 192, "coder": 192, "unnorm": 192, "date_shift": 192, "structured_deidentifi": 192, "columns_dict": 192, "ref_sourc": 192, "columns_se": 192, "date_format": 192, "is_module_import": 193, "lib": 193, "raise_except": 193, "pip_nam": 193, "message_typ": 193, "messag": 193, "instruct": 193, "internalannotatortyp": 195, "selector": 195, "aqua": [198, 199], "aquamarin": [198, 199], "blanchedalmond": [198, 199], "blue": [198, 199], "blueviolet": [198, 199], "burlywood": [198, 199], "ocr_entity_processor": 198, "file_path": 198, "bounding_box": 198, "save_fold": 198, "label_color": 198, "red": 198, "color_chart_path": 198, "color_chart": 198, "png": 198, "chunk_col": 198, "black_list": 198, "display_result": 198, "ocr": 198, "paint": 198, "highlight": 198, "black_band": 198, "band": 198, "bound": 198, "box": 198, "around": 198, "chart": 198, "label2color": 199, "label2rgb": 199, "colors_rgb": 199, "255": 199, "127": 199, "212": 199, "235": 199, "205": 199, "138": 199, "226": 199, "165": 199, "aggregate_ent": 200, "split_tag": 200, "chunk_typ": 200, "is_chunk_end": 200, "prev_tag": 200, "contradict": 200, "is_chunk_start": 200, "calc_metr": 200, "tp": 200, "percent": 200, "fb1": 200, "decim": 200, "count_chunk": 200, "correct_chunk": 200, "counter": 200, "correctli": 200, "true_chunk": 200, "pred_chunk": 200, "correct_count": 200, "true_count": 200, "pred_count": 200, "get_result": 200, "prec": 200, "rec": 200, "overview": 201}, "objects": {"": [[143, 0, 0, "-", "sparknlp_jsl"]], "sparknlp_jsl": [[11, 0, 0, "-", "_tf_graph_builders"], [34, 0, 0, "-", "_tf_graph_builders_1x"], [41, 0, 0, "-", "alab"], [82, 0, 0, "-", "annotator"], [143, 3, 1, "", "annotators"], [108, 0, 0, "-", "base"], [112, 0, 0, "-", "common"], [113, 0, 0, "-", "compatibility"], [114, 0, 0, "-", "custom_transformer"], [115, 0, 0, "-", "eval"], [130, 0, 0, "-", "finance"], [142, 0, 0, "-", "functions"], [143, 6, 1, "", "get_credentials"], [144, 0, 0, "-", "internal"], [159, 0, 0, "-", "legal"], [143, 6, 1, "", "library_settings"], [171, 0, 0, "-", "modelTracer"], [174, 0, 0, "-", "nlp_test"], [183, 0, 0, "-", "pretrained"], [143, 6, 1, "", "pub_version"], [143, 3, 1, "", "size_regex"], [143, 6, 1, "", "start"], [184, 0, 0, "-", "structured_deidentification"], [185, 0, 0, "-", "text_to_documents_columns"], [186, 0, 0, "-", "training"], [187, 0, 0, "-", "training_log_parser"], [143, 3, 1, "", "transformer_seq_classification"], [188, 0, 0, "-", "updateModels"], [189, 0, 0, "-", "util"], [194, 0, 0, "-", "utils"], [143, 6, 1, "", "version"], [143, 3, 1, "", "version_regex"]], "sparknlp_jsl._tf_graph_builders": [[3, 0, 0, "-", "assertion_dl"], [7, 0, 0, "-", "generic_classifier"], [10, 0, 0, "-", "graph_builders"], [14, 0, 0, "-", "ner_dl"], [21, 0, 0, "-", "tf2contrib"]], "sparknlp_jsl._tf_graph_builders.assertion_dl": [[2, 0, 0, "-", "assertion_model"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model": [[2, 1, 1, "", "AssertionModel"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel": [[2, 2, 1, "", "add_bidirectional_lstm"], [2, 2, 1, "", "add_optimizer"], [2, 2, 1, "", "calc_accuracy"], [2, 2, 1, "", "confusion_matrix"], [2, 2, 1, "", "fully_connected_layer"], [2, 2, 1, "", "persist_graph"], [2, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders.generic_classifier": [[4, 0, 0, "-", "basetfmodel"], [5, 0, 0, "-", "build_model"], [6, 0, 0, "-", "generic_classifier_model"], [8, 0, 0, "-", "progresstracker"], [9, 0, 0, "-", "settings"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel": [[4, 1, 1, "", "BaseTFModel"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel": [[4, 2, 1, "", "build"], [4, 2, 1, "", "export_graph"], [4, 2, 1, "", "fit_dataset"], [4, 2, 1, "", "generate_batch"], [4, 2, 1, "", "get_graph"], [4, 2, 1, "", "is_built"], [4, 2, 1, "", "load_graph"], [4, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model": [[5, 3, 1, "", "build_params"], [5, 3, 1, "", "model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model": [[6, 1, 1, "", "GenericClassifierModel"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel": [[6, 2, 1, "", "build"], [6, 2, 1, "", "export_graph"], [6, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker": [[8, 1, 1, "", "ProgressTracker"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker": [[8, 2, 1, "", "get_report_interval"], [8, 2, 1, "", "on_batch"], [8, 2, 1, "", "on_epoch"], [8, 2, 1, "", "on_training_end"], [8, 2, 1, "", "on_training_start"], [8, 2, 1, "", "print_progress"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings": [[9, 1, 1, "", "MODEL_OPS"], [9, 1, 1, "", "MODEL_TENSORS"], [9, 1, 1, "", "RUN_TYPES"], [9, 1, 1, "", "Settings"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS": [[9, 4, 1, "", "INIT"], [9, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS": [[9, 4, 1, "", "ACC"], [9, 4, 1, "", "INPUTS"], [9, 4, 1, "", "LEARNING_RATE"], [9, 4, 1, "", "LOSS"], [9, 4, 1, "", "OUTPUTS"], [9, 4, 1, "", "TARGETS"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES": [[9, 4, 1, "", "EVALUATE"], [9, 4, 1, "", "PREDICT"], [9, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings": [[9, 4, 1, "", "DATASETS_DIR"], [9, 4, 1, "", "DEFAULT_MODEL_NODE_NAMES"], [9, 4, 1, "", "LOGS_DIR"], [9, 4, 1, "", "MODELS_DIR"]], "sparknlp_jsl._tf_graph_builders.graph_builders": [[10, 1, 1, "", "AssertionTFGraphBuilder"], [10, 1, 1, "", "GenericClassifierTFGraphBuilder"], [10, 1, 1, "", "LogRegClassifierTFGraphBuilder"], [10, 1, 1, "", "NerTFGraphBuilder"], [10, 1, 1, "", "RelationExtractionTFGraphBuilder"], [10, 1, 1, "", "SVMClassifierTFGraphBuilder"], [10, 1, 1, "", "TFGraphBuilder"], [10, 1, 1, "", "TFGraphBuilderFactory"], [10, 5, 1, "", "TensorflowAddonsNeeded"], [10, 5, 1, "", "WrongTFVersion"]], "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.LogRegClassifierTFGraphBuilder": [[10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"]], "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.RelationExtractionTFGraphBuilder": [[10, 2, 1, "", "get_model_filename"]], "sparknlp_jsl._tf_graph_builders.graph_builders.SVMClassifierTFGraphBuilder": [[10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"]], "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder": [[10, 2, 1, "", "check_build_params"], [10, 2, 1, "", "get_build_param"], [10, 2, 1, "", "get_build_params"], [10, 2, 1, "", "get_build_params_with_defaults"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_models"], [10, 2, 1, "", "print_model_params"]], "sparknlp_jsl._tf_graph_builders.ner_dl": [[12, 0, 0, "-", "create_graph"], [13, 0, 0, "-", "dataset_encoder"], [15, 0, 0, "-", "ner_model"], [16, 0, 0, "-", "ner_model_saver"], [17, 0, 0, "-", "sentence_grouper"]], "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph": [[12, 6, 1, "", "create_graph"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder": [[13, 1, 1, "", "DatasetEncoder"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder": [[13, 2, 1, "", "encode"], [13, 2, 1, "", "get_char_indexes"], [13, 2, 1, "", "normalize"], [13, 2, 1, "", "shuffle"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model": [[15, 1, 1, "", "NerModel"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel": [[15, 2, 1, "", "add_bilstm_char_repr"], [15, 2, 1, "", "add_cnn_char_repr"], [15, 2, 1, "", "add_context_repr"], [15, 2, 1, "", "add_inference_layer"], [15, 2, 1, "", "add_pretrained_word_embeddings"], [15, 2, 1, "", "add_training_op"], [15, 2, 1, "", "close"], [15, 2, 1, "", "fill"], [15, 2, 1, "", "get_char_ids"], [15, 2, 1, "", "get_from_batch"], [15, 2, 1, "", "get_sentence_lengths"], [15, 2, 1, "", "get_sentence_token_lengths"], [15, 2, 1, "", "get_softmax"], [15, 2, 1, "", "get_tag_ids"], [15, 2, 1, "", "get_word_embeddings"], [15, 2, 1, "", "get_word_lengths"], [15, 2, 1, "", "init_variables"], [15, 2, 1, "", "measure"], [15, 2, 1, "", "num_trues"], [15, 2, 1, "", "predict"], [15, 2, 1, "", "slice"], [15, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver": [[16, 1, 1, "", "NerModelSaver"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver": [[16, 2, 1, "", "restore_tensorflow_state"], [16, 2, 1, "", "save"], [16, 2, 1, "", "save_models"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper": [[17, 1, 1, "", "SentenceGrouper"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper": [[17, 2, 1, "", "get_bucket_id"], [17, 2, 1, "", "slice"]], "sparknlp_jsl._tf_graph_builders.tf2contrib": [[18, 0, 0, "-", "core_rnn_cell"], [19, 0, 0, "-", "fused_rnn_cell"], [20, 0, 0, "-", "gru_ops"], [22, 0, 0, "-", "lstm_ops"], [23, 0, 0, "-", "rnn"], [24, 0, 0, "-", "rnn_cell"], [21, 3, 1, "", "tf"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell": [[18, 1, 1, "", "EmbeddingWrapper"], [18, 1, 1, "", "InputProjectionWrapper"], [18, 1, 1, "", "OutputProjectionWrapper"], [18, 3, 1, "", "RNNCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper": [[18, 2, 1, "", "call"], [18, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper": [[18, 2, 1, "", "call"], [18, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper": [[18, 2, 1, "", "call"], [18, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell": [[19, 1, 1, "", "FusedRNNCell"], [19, 1, 1, "", "FusedRNNCellAdaptor"], [19, 1, 1, "", "TimeReversedFusedRNN"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops": [[20, 1, 1, "", "GRUBlockCell"], [20, 1, 1, "", "GRUBlockCellV2"], [20, 3, 1, "", "LayerRNNCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell": [[20, 2, 1, "", "build"], [20, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCellV2": [[20, 2, 1, "", "build"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops": [[22, 1, 1, "", "LSTMBlockCell"], [22, 1, 1, "", "LSTMBlockFusedCell"], [22, 1, 1, "", "LSTMBlockWrapper"], [22, 3, 1, "", "LayerRNNCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell": [[22, 2, 1, "", "build"], [22, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockFusedCell": [[22, 2, 1, "", "build"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper": [[22, 2, 1, "", "call"], [22, 2, 1, "", "num_units"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn": [[23, 6, 1, "", "stack_bidirectional_dynamic_rnn"], [23, 6, 1, "", "stack_bidirectional_rnn"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell": [[24, 1, 1, "", "AttentionCellWrapper"], [24, 1, 1, "", "BidirectionalGridLSTMCell"], [24, 1, 1, "", "CFNCell"], [24, 1, 1, "", "CompiledWrapper"], [24, 1, 1, "", "Conv1DLSTMCell"], [24, 1, 1, "", "Conv2DLSTMCell"], [24, 1, 1, "", "Conv3DLSTMCell"], [24, 1, 1, "", "ConvLSTMCell"], [24, 1, 1, "", "CoupledInputForgetGateLSTMCell"], [24, 1, 1, "", "GLSTMCell"], [24, 1, 1, "", "GridLSTMCell"], [24, 1, 1, "", "HighwayWrapper"], [24, 1, 1, "", "IndRNNCell"], [24, 1, 1, "", "IndyGRUCell"], [24, 1, 1, "", "IndyLSTMCell"], [24, 1, 1, "", "IntersectionRNNCell"], [24, 1, 1, "", "LayerNormBasicLSTMCell"], [24, 1, 1, "", "LayerNormLSTMCell"], [24, 1, 1, "", "MinimalRNNCell"], [24, 1, 1, "", "NASCell"], [24, 1, 1, "", "NTMCell"], [24, 3, 1, "", "NTMControllerState"], [24, 1, 1, "", "PhasedLSTMCell"], [24, 1, 1, "", "SRUCell"], [24, 1, 1, "", "TimeFreqLSTMCell"], [24, 1, 1, "", "UGRNNCell"], [24, 1, 1, "", "WeightNormLSTMCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.AttentionCellWrapper": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.BidirectionalGridLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CompiledWrapper": [[24, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.ConvLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CoupledInputForgetGateLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GridLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.HighwayWrapper": [[24, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IntersectionRNNCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormBasicLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"], [24, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.PhasedLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.TimeFreqLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.UGRNNCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.WeightNormLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders_1x": [[26, 0, 0, "-", "assertion_dl"], [30, 0, 0, "-", "generic_classifier"], [33, 0, 0, "-", "graph_builders"], [37, 0, 0, "-", "ner_dl"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl": [[25, 0, 0, "-", "assertion_model"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model": [[25, 1, 1, "", "AssertionModel"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel": [[25, 2, 1, "", "add_bidirectional_lstm"], [25, 2, 1, "", "add_optimizer"], [25, 2, 1, "", "calc_accuracy"], [25, 2, 1, "", "confusion_matrix"], [25, 2, 1, "", "fully_connected_layer"], [25, 2, 1, "", "persist_graph"], [25, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier": [[27, 0, 0, "-", "basetfmodel"], [28, 0, 0, "-", "build_model"], [29, 0, 0, "-", "generic_classifier_model"], [31, 0, 0, "-", "progresstracker"], [32, 0, 0, "-", "settings"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel": [[27, 1, 1, "", "BaseTFModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel": [[27, 2, 1, "", "build"], [27, 2, 1, "", "export_graph"], [27, 2, 1, "", "fit_dataset"], [27, 2, 1, "", "generate_batch"], [27, 2, 1, "", "get_graph"], [27, 2, 1, "", "is_built"], [27, 2, 1, "", "load_graph"], [27, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model": [[28, 3, 1, "", "build_params"], [28, 3, 1, "", "model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model": [[29, 1, 1, "", "GenericClassifierModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel": [[29, 2, 1, "", "build"], [29, 2, 1, "", "export_graph"], [29, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker": [[31, 1, 1, "", "ProgressTracker"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker": [[31, 2, 1, "", "get_report_interval"], [31, 2, 1, "", "on_batch"], [31, 2, 1, "", "on_epoch"], [31, 2, 1, "", "on_training_end"], [31, 2, 1, "", "on_training_start"], [31, 2, 1, "", "print_progress"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings": [[32, 1, 1, "", "MODEL_OPS"], [32, 1, 1, "", "MODEL_TENSORS"], [32, 1, 1, "", "RUN_TYPES"], [32, 1, 1, "", "Settings"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS": [[32, 4, 1, "", "INIT"], [32, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS": [[32, 4, 1, "", "ACC"], [32, 4, 1, "", "INPUTS"], [32, 4, 1, "", "LEARNING_RATE"], [32, 4, 1, "", "LOSS"], [32, 4, 1, "", "OUTPUTS"], [32, 4, 1, "", "TARGETS"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES": [[32, 4, 1, "", "EVALUATE"], [32, 4, 1, "", "PREDICT"], [32, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings": [[32, 4, 1, "", "DATASETS_DIR"], [32, 4, 1, "", "DEFAULT_MODEL_NODE_NAMES"], [32, 4, 1, "", "LOGS_DIR"], [32, 4, 1, "", "MODELS_DIR"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders": [[33, 1, 1, "", "AssertionTFGraphBuilder"], [33, 1, 1, "", "GenericClassifierTFGraphBuilder"], [33, 1, 1, "", "NerTFGraphBuilder"], [33, 1, 1, "", "RelationExtractionTFGraphBuilder"], [33, 1, 1, "", "TFGraphBuilder"], [33, 1, 1, "", "TFGraphBuilderFactory"], [33, 5, 1, "", "WrongTFVersion"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.RelationExtractionTFGraphBuilder": [[33, 2, 1, "", "get_model_filename"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder": [[33, 2, 1, "", "check_build_params"], [33, 2, 1, "", "get_build_param"], [33, 2, 1, "", "get_build_params"], [33, 2, 1, "", "get_build_params_with_defaults"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_models"], [33, 2, 1, "", "print_model_params"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl": [[35, 0, 0, "-", "create_graph"], [36, 0, 0, "-", "dataset_encoder"], [38, 0, 0, "-", "ner_model"], [39, 0, 0, "-", "ner_model_saver"], [40, 0, 0, "-", "sentence_grouper"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph": [[35, 6, 1, "", "create_graph"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder": [[36, 1, 1, "", "DatasetEncoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder": [[36, 2, 1, "", "encode"], [36, 2, 1, "", "get_char_indexes"], [36, 2, 1, "", "normalize"], [36, 2, 1, "", "shuffle"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model": [[38, 1, 1, "", "NerModel"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel": [[38, 2, 1, "", "add_bilstm_char_repr"], [38, 2, 1, "", "add_cnn_char_repr"], [38, 2, 1, "", "add_context_repr"], [38, 2, 1, "", "add_inference_layer"], [38, 2, 1, "", "add_pretrained_word_embeddings"], [38, 2, 1, "", "add_training_op"], [38, 2, 1, "", "close"], [38, 2, 1, "", "fill"], [38, 2, 1, "", "get_char_ids"], [38, 2, 1, "", "get_from_batch"], [38, 2, 1, "", "get_sentence_lengths"], [38, 2, 1, "", "get_sentence_token_lengths"], [38, 2, 1, "", "get_softmax"], [38, 2, 1, "", "get_tag_ids"], [38, 2, 1, "", "get_word_embeddings"], [38, 2, 1, "", "get_word_lengths"], [38, 2, 1, "", "init_variables"], [38, 2, 1, "", "measure"], [38, 2, 1, "", "num_trues"], [38, 2, 1, "", "predict"], [38, 2, 1, "", "slice"], [38, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver": [[39, 1, 1, "", "NerModelSaver"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver": [[39, 2, 1, "", "restore_tensorflow_state"], [39, 2, 1, "", "save"], [39, 2, 1, "", "save_models"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper": [[40, 1, 1, "", "SentenceGrouper"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper": [[40, 2, 1, "", "get_bucket_id"], [40, 2, 1, "", "slice"]], "sparknlp_jsl.alab": [[41, 1, 1, "", "AnnotationLab"]], "sparknlp_jsl.alab.AnnotationLab": [[41, 2, 1, "", "create_project"], [41, 2, 1, "", "delete_project"], [41, 2, 1, "", "delete_tasks"], [41, 2, 1, "", "generate_preannotations"], [41, 2, 1, "", "get_IAA_metrics"], [41, 2, 1, "", "get_all_projects"], [41, 2, 1, "", "get_annotations"], [41, 2, 1, "", "get_assertion_data"], [41, 2, 1, "", "get_classification_data"], [41, 2, 1, "", "get_conll_data"], [41, 2, 1, "", "get_project_config"], [41, 2, 1, "", "get_relation_extraction_data"], [41, 2, 1, "", "set_credentials"], [41, 2, 1, "", "set_project_config"], [41, 2, 1, "", "upload_preannotations"], [41, 2, 1, "", "upload_tasks"]], "sparknlp_jsl.annotator": [[42, 0, 0, "-", "annotation_merger"], [82, 3, 1, "", "assertion"], [46, 0, 0, "-", "assertion"], [82, 3, 1, "", "chunker"], [55, 0, 0, "-", "chunker"], [82, 3, 1, "", "classification"], [60, 0, 0, "-", "classification"], [82, 3, 1, "", "context"], [65, 0, 0, "-", "context"], [82, 3, 1, "", "deid"], [68, 0, 0, "-", "deid"], [82, 3, 1, "", "disambiguation"], [72, 0, 0, "-", "disambiguation"], [74, 0, 0, "-", "doc2_chunk_internal"], [78, 0, 0, "-", "embeddings"], [79, 0, 0, "-", "feature_assembler"], [82, 3, 1, "", "generic_classifier"], [81, 0, 0, "-", "generic_classifier"], [82, 3, 1, "", "keyword"], [84, 0, 0, "-", "merge"], [85, 0, 0, "-", "ner"], [93, 0, 0, "-", "normalizer"], [94, 0, 0, "-", "qa"], [96, 0, 0, "-", "re"], [101, 0, 0, "-", "resolution"], [104, 0, 0, "-", "resolution2_chunk"], [105, 0, 0, "-", "router"], [106, 0, 0, "-", "source_tracking_metadata_params"], [107, 0, 0, "-", "tf_graph_builder"]], "sparknlp_jsl.annotator.annotation_merger": [[42, 1, 1, "", "AnnotationMerger"]], "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger": [[42, 4, 1, "", "inputAnnotatorTypes"], [42, 4, 1, "", "inputType"], [42, 4, 1, "", "name"], [42, 4, 1, "", "outputAnnotatorType"], [42, 2, 1, "", "setInputCols"], [42, 2, 1, "", "setInputType"], [42, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.annotator.assertion": [[43, 0, 0, "-", "assertionDL"], [44, 0, 0, "-", "assertion_chunk_converter"], [45, 0, 0, "-", "assertion_dl_reg"]], "sparknlp_jsl.annotator.assertion.assertionDL": [[43, 1, 1, "", "AssertionDLApproach"], [43, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach": [[43, 4, 1, "", "batchSize"], [43, 4, 1, "", "configProtoBytes"], [43, 4, 1, "", "dropout"], [43, 4, 1, "", "enableOutputLogs"], [43, 4, 1, "", "endCol"], [43, 4, 1, "", "epochs"], [43, 4, 1, "", "graphFile"], [43, 4, 1, "", "graphFolder"], [43, 4, 1, "", "includeConfidence"], [43, 4, 1, "", "inputAnnotatorTypes"], [43, 4, 1, "", "label"], [43, 4, 1, "", "learningRate"], [43, 4, 1, "", "maxSentLen"], [43, 4, 1, "", "outputAnnotatorType"], [43, 4, 1, "", "outputLogsPath"], [43, 4, 1, "", "scopeWindow"], [43, 2, 1, "", "setBatchSize"], [43, 2, 1, "", "setConfigProtoBytes"], [43, 2, 1, "", "setDropout"], [43, 2, 1, "", "setEnableOutputLogs"], [43, 2, 1, "", "setEndCol"], [43, 2, 1, "", "setEpochs"], [43, 2, 1, "", "setGraphFile"], [43, 2, 1, "", "setGraphFolder"], [43, 2, 1, "", "setIncludeConfidence"], [43, 2, 1, "", "setLabelCol"], [43, 2, 1, "", "setLearningRate"], [43, 2, 1, "", "setMaxSentLen"], [43, 2, 1, "", "setOutputLogsPath"], [43, 2, 1, "", "setScopeWindow"], [43, 2, 1, "", "setStartCol"], [43, 2, 1, "", "setTestDataset"], [43, 2, 1, "", "setValidationSplit"], [43, 2, 1, "", "setVerbose"], [43, 4, 1, "", "startCol"], [43, 4, 1, "", "testDataset"], [43, 4, 1, "", "validationSplit"], [43, 4, 1, "", "verbose"]], "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel": [[43, 4, 1, "", "classes"], [43, 4, 1, "", "configProtoBytes"], [43, 4, 1, "", "includeConfidence"], [43, 4, 1, "", "inputAnnotatorTypes"], [43, 4, 1, "", "maxSentLen"], [43, 4, 1, "", "name"], [43, 4, 1, "", "outputAnnotatorType"], [43, 2, 1, "", "pretrained"], [43, 4, 1, "", "scopeWindow"], [43, 2, 1, "", "setConfigProtoBytes"], [43, 2, 1, "", "setIncludeConfidence"], [43, 2, 1, "", "setScopeWindow"], [43, 4, 1, "", "targetNerLabels"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter": [[44, 1, 1, "", "AssertionChunkConverter"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter": [[44, 4, 1, "", "chunkBeginCol"], [44, 4, 1, "", "chunkEndCol"], [44, 4, 1, "", "chunkTextCol"], [44, 4, 1, "", "inputAnnotatorTypes"], [44, 4, 1, "", "inputCols"], [44, 4, 1, "", "name"], [44, 4, 1, "", "outputAnnotatorType"], [44, 4, 1, "", "outputCol"], [44, 4, 1, "", "outputTokenBeginCol"], [44, 4, 1, "", "outputTokenEndCol"], [44, 2, 1, "", "setChunkBeginCol"], [44, 2, 1, "", "setChunkEndCol"], [44, 2, 1, "", "setChunkTextCol"], [44, 2, 1, "", "setInputCols"], [44, 2, 1, "", "setOutputCol"], [44, 2, 1, "", "setOutputTokenBeginCol"], [44, 2, 1, "", "setOutputTokenEndCol"], [44, 2, 1, "", "setParams"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[45, 1, 1, "", "AssertionLogRegApproach"], [45, 1, 1, "", "AssertionLogRegModel"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach": [[45, 4, 1, "", "afterParam"], [45, 4, 1, "", "beforeParam"], [45, 4, 1, "", "eNetParam"], [45, 4, 1, "", "endCol"], [45, 4, 1, "", "inputAnnotatorTypes"], [45, 4, 1, "", "label"], [45, 4, 1, "", "maxIter"], [45, 4, 1, "", "nerCol"], [45, 4, 1, "", "outputAnnotatorType"], [45, 4, 1, "", "regParam"], [45, 2, 1, "", "setAfter"], [45, 2, 1, "", "setBefore"], [45, 2, 1, "", "setEndCol"], [45, 2, 1, "", "setEnet"], [45, 2, 1, "", "setLabelCol"], [45, 2, 1, "", "setMaxIter"], [45, 2, 1, "", "setNerCol"], [45, 2, 1, "", "setReg"], [45, 2, 1, "", "setStartCol"], [45, 2, 1, "", "setTargetNerLabels"], [45, 4, 1, "", "startCol"], [45, 4, 1, "", "targetNerLabels"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel": [[45, 4, 1, "", "afterParam"], [45, 4, 1, "", "beforeParam"], [45, 4, 1, "", "endCol"], [45, 4, 1, "", "inputAnnotatorTypes"], [45, 4, 1, "", "name"], [45, 4, 1, "", "nerCol"], [45, 4, 1, "", "outputAnnotatorType"], [45, 2, 1, "", "pretrained"], [45, 4, 1, "", "startCol"], [45, 4, 1, "", "targetNerLabels"]], "sparknlp_jsl.annotator.chunker": [[47, 0, 0, "-", "assertion_filterer"], [48, 0, 0, "-", "chunk_converter"], [49, 0, 0, "-", "chunk_key_phrase_extraction"], [50, 0, 0, "-", "chunk_sentence_splitter"], [51, 0, 0, "-", "chunker_filterer"], [52, 0, 0, "-", "chunkmapper"], [53, 0, 0, "-", "chunkmapper_filterer"], [54, 0, 0, "-", "docmapper"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[47, 1, 1, "", "AssertionFilterer"]], "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer": [[47, 4, 1, "", "caseSensitive"], [47, 4, 1, "", "criteria"], [47, 4, 1, "", "entitiesConfidence"], [47, 4, 1, "", "inputAnnotatorTypes"], [47, 4, 1, "", "name"], [47, 4, 1, "", "outputAnnotatorType"], [47, 4, 1, "", "regex"], [47, 2, 1, "", "setCaseSensitive"], [47, 2, 1, "", "setCriteria"], [47, 2, 1, "", "setRegex"], [47, 2, 1, "", "setWhiteList"], [47, 4, 1, "", "whiteList"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[48, 1, 1, "", "ChunkConverter"]], "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter": [[48, 4, 1, "", "inputAnnotatorTypes"], [48, 4, 1, "", "name"], [48, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[49, 1, 1, "", "ChunkKeyPhraseExtraction"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction": [[49, 4, 1, "", "concatenateSentences"], [49, 4, 1, "", "divergence"], [49, 4, 1, "", "documentLevelProcessing"], [49, 4, 1, "", "dropPunctuation"], [49, 4, 1, "", "inputAnnotatorTypes"], [49, 4, 1, "", "name"], [49, 4, 1, "", "outputAnnotatorType"], [49, 2, 1, "", "pretrained"], [49, 4, 1, "", "selectMostDifferent"], [49, 2, 1, "", "setConcatenateSentences"], [49, 2, 1, "", "setDivergence"], [49, 2, 1, "", "setDocumentLevelProcessing"], [49, 2, 1, "", "setDropPunctuation"], [49, 2, 1, "", "setSelectMostDifferent"], [49, 2, 1, "", "setTopN"], [49, 4, 1, "", "topN"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[50, 1, 1, "", "ChunkSentenceSplitter"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter": [[50, 4, 1, "", "defaultEntity"], [50, 4, 1, "", "groupBySentences"], [50, 4, 1, "", "inputAnnotatorTypes"], [50, 4, 1, "", "insertChunk"], [50, 4, 1, "", "name"], [50, 4, 1, "", "outputAnnotatorType"], [50, 2, 1, "", "setDefaultEntity"], [50, 2, 1, "", "setGroupBySentences"], [50, 2, 1, "", "setInsertChunk"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[51, 1, 1, "", "ChunkFilterer"], [51, 1, 1, "", "ChunkFiltererApproach"]], "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer": [[51, 4, 1, "", "blackList"], [51, 4, 1, "", "criteria"], [51, 4, 1, "", "filterValue"], [51, 4, 1, "", "inputAnnotatorTypes"], [51, 4, 1, "", "name"], [51, 4, 1, "", "outputAnnotatorType"], [51, 4, 1, "", "regex"], [51, 2, 1, "", "setBlackList"], [51, 2, 1, "", "setCriteria"], [51, 2, 1, "", "setFilterEntity"], [51, 2, 1, "", "setRegex"], [51, 2, 1, "", "setWhiteList"], [51, 4, 1, "", "whiteList"]], "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach": [[51, 4, 1, "", "blackList"], [51, 4, 1, "", "criteria"], [51, 4, 1, "", "entitiesConfidenceResource"], [51, 4, 1, "", "filterValue"], [51, 4, 1, "", "inputAnnotatorTypes"], [51, 4, 1, "", "name"], [51, 4, 1, "", "outputAnnotatorType"], [51, 4, 1, "", "regex"], [51, 2, 1, "", "setBlackList"], [51, 2, 1, "", "setCriteria"], [51, 2, 1, "", "setEntitiesConfidenceResource"], [51, 2, 1, "", "setFilterEntity"], [51, 2, 1, "", "setRegex"], [51, 2, 1, "", "setWhiteList"], [51, 4, 1, "", "whiteList"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[52, 1, 1, "", "ChunkMapperApproach"], [52, 1, 1, "", "ChunkMapperFuzzyMatchingParams"], [52, 1, 1, "", "ChunkMapperModel"], [52, 1, 1, "", "CommonChunkMapperParams"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach": [[52, 4, 1, "", "dictionary"], [52, 4, 1, "", "inputAnnotatorTypes"], [52, 4, 1, "", "name"], [52, 4, 1, "", "outputAnnotatorType"], [52, 2, 1, "", "setDictionary"], [52, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams": [[52, 4, 1, "", "enableCharFingerprintMatching"], [52, 4, 1, "", "enableFuzzyMatching"], [52, 4, 1, "", "enableTokenFingerprintMatching"], [52, 4, 1, "", "fuzzyDistanceScalingMode"], [52, 4, 1, "", "fuzzyMatchingDistanceThresholds"], [52, 4, 1, "", "fuzzyMatchingDistances"], [52, 4, 1, "", "maxCharNgramFingerprint"], [52, 4, 1, "", "maxTokenNgramDroppingCharsRatio"], [52, 4, 1, "", "maxTokenNgramDroppingOperator"], [52, 4, 1, "", "maxTokenNgramDroppingTokens"], [52, 4, 1, "", "maxTokenNgramFingerprint"], [52, 4, 1, "", "minCharNgramFingerprint"], [52, 4, 1, "", "minTokenNgramFingerprint"], [52, 2, 1, "", "setEnableCharFingerprintMatching"], [52, 2, 1, "", "setEnableFuzzyMatching"], [52, 2, 1, "", "setEnableTokenFingerprintMatching"], [52, 2, 1, "", "setFuzzyDistanceScalingMode"], [52, 2, 1, "", "setFuzzyMatchingDistanceThresholds"], [52, 2, 1, "", "setFuzzyMatchingDistances"], [52, 2, 1, "", "setMaxCharNgramFingerprint"], [52, 2, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [52, 2, 1, "", "setMaxTokenNgramDroppingOperator"], [52, 2, 1, "", "setMaxTokenNgramDroppingTokens"], [52, 2, 1, "", "setMaxTokenNgramFingerprint"], [52, 2, 1, "", "setMinCharNgramFingerprint"], [52, 2, 1, "", "setMinTokenNgramFingerprint"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel": [[52, 4, 1, "", "inputAnnotatorTypes"], [52, 4, 1, "", "name"], [52, 4, 1, "", "outputAnnotatorType"], [52, 2, 1, "", "pretrained"], [52, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams": [[52, 4, 1, "", "allowMultiTokenChunk"], [52, 4, 1, "", "lowerCase"], [52, 4, 1, "", "multivaluesRelations"], [52, 4, 1, "", "rel"], [52, 4, 1, "", "rels"], [52, 2, 1, "", "setAllowMultiTokenChunk"], [52, 2, 1, "", "setLowerCase"], [52, 2, 1, "", "setMultivaluesRelations"], [52, 2, 1, "", "setRel"], [52, 2, 1, "", "setRels"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[53, 1, 1, "", "ChunkMapperFilterer"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer": [[53, 4, 1, "", "inputAnnotatorTypes"], [53, 4, 1, "", "name"], [53, 4, 1, "", "outputAnnotatorType"], [53, 4, 1, "", "returnCriteria"], [53, 2, 1, "", "setReturnCriteria"]], "sparknlp_jsl.annotator.chunker.docmapper": [[54, 1, 1, "", "DocMapperApproach"], [54, 1, 1, "", "DocMapperModel"]], "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach": [[54, 4, 1, "", "dictionary"], [54, 4, 1, "", "inputAnnotatorTypes"], [54, 4, 1, "", "name"], [54, 4, 1, "", "outputAnnotatorType"], [54, 2, 1, "", "setDictionary"]], "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel": [[54, 4, 1, "", "inputAnnotatorTypes"], [54, 4, 1, "", "name"], [54, 4, 1, "", "outputAnnotatorType"], [54, 2, 1, "", "pretrained"]], "sparknlp_jsl.annotator.classification": [[56, 0, 0, "-", "document_log_classifier"], [57, 0, 0, "-", "document_ml_classifier"], [58, 0, 0, "-", "generic_log_reg_classifier"], [59, 0, 0, "-", "generic_svm_classifier"], [61, 0, 0, "-", "medical_bert_for_sequence_classification"], [62, 0, 0, "-", "medical_bert_for_token_classifier"], [63, 0, 0, "-", "medical_distilbert_for_sequence_classification"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[56, 1, 1, "", "DocumentLogRegClassifierApproach"], [56, 1, 1, "", "DocumentLogRegClassifierModel"]], "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach": [[56, 4, 1, "", "classificationModelPath"], [56, 4, 1, "", "fitIntercept"], [56, 4, 1, "", "inputAnnotatorTypes"], [56, 4, 1, "", "labelCol"], [56, 4, 1, "", "labels"], [56, 4, 1, "", "maxIter"], [56, 4, 1, "", "outputAnnotatorType"], [56, 2, 1, "", "setClassificationModelPath"], [56, 2, 1, "", "setFitIntercept"], [56, 2, 1, "", "setLabelColumn"], [56, 2, 1, "", "setLabels"], [56, 2, 1, "", "setMaxIter"], [56, 2, 1, "", "setTol"], [56, 2, 1, "", "setVectorizationModelPath"], [56, 4, 1, "", "tol"], [56, 4, 1, "", "vectorizationModelPath"]], "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel": [[56, 4, 1, "", "classificationModel"], [56, 4, 1, "", "labels"], [56, 4, 1, "", "mergeChunks"], [56, 4, 1, "", "name"], [56, 4, 1, "", "outputAnnotatorType"], [56, 2, 1, "", "pretrained"], [56, 2, 1, "", "setClassificationModel"], [56, 2, 1, "", "setLabels"], [56, 2, 1, "", "setMergeChunks"], [56, 2, 1, "", "setVectorizationModel"], [56, 4, 1, "", "vectorizationModel"]], "sparknlp_jsl.annotator.classification.document_ml_classifier": [[57, 1, 1, "", "DocumentMLClassifierApproach"], [57, 1, 1, "", "DocumentMLClassifierModel"], [57, 1, 1, "", "DocumentMLClassifierParams"]], "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach": [[57, 4, 1, "", "classificationModelClass"], [57, 4, 1, "", "classificationModelPath"], [57, 4, 1, "", "fitIntercept"], [57, 4, 1, "", "inputAnnotatorTypes"], [57, 4, 1, "", "labelCol"], [57, 4, 1, "", "maxIter"], [57, 4, 1, "", "outputAnnotatorType"], [57, 2, 1, "", "setClassificationModelClass"], [57, 2, 1, "", "setClassificationModelPath"], [57, 2, 1, "", "setFitIntercept"], [57, 2, 1, "", "setLabelCol"], [57, 2, 1, "", "setMaxIter"], [57, 2, 1, "", "setMaxTokenNgram"], [57, 2, 1, "", "setMinTokenNgram"], [57, 2, 1, "", "setTol"], [57, 2, 1, "", "setVectorizationModelPath"], [57, 4, 1, "", "tol"], [57, 4, 1, "", "vectorizationModelPath"]], "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel": [[57, 4, 1, "", "classificationModel"], [57, 4, 1, "", "inputAnnotatorTypes"], [57, 4, 1, "", "labels"], [57, 4, 1, "", "name"], [57, 4, 1, "", "outputAnnotatorType"], [57, 2, 1, "", "pretrained"], [57, 2, 1, "", "setClassificationModel"], [57, 2, 1, "", "setLabels"], [57, 2, 1, "", "setVectorizationModel"], [57, 4, 1, "", "vectorizationModel"]], "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams": [[57, 4, 1, "", "labels"], [57, 4, 1, "", "maxTokenNgram"], [57, 4, 1, "", "mergeChunks"], [57, 4, 1, "", "minTokenNgram"], [57, 2, 1, "", "setLabels"], [57, 2, 1, "", "setMergeChunks"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier": [[58, 1, 1, "", "GenericLogRegClassifierApproach"], [58, 1, 1, "", "GenericLogRegClassifierModel"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach": [[58, 4, 1, "", "inputAnnotatorTypes"], [58, 4, 1, "", "name"], [58, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel": [[58, 4, 1, "", "inputAnnotatorTypes"], [58, 4, 1, "", "name"], [58, 4, 1, "", "outputAnnotatorType"], [58, 2, 1, "", "pretrained"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier": [[59, 1, 1, "", "GenericSVMClassifierApproach"], [59, 1, 1, "", "GenericSVMClassifierModel"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach": [[59, 4, 1, "", "inputAnnotatorTypes"], [59, 4, 1, "", "name"], [59, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel": [[59, 4, 1, "", "inputAnnotatorTypes"], [59, 4, 1, "", "name"], [59, 4, 1, "", "outputAnnotatorType"], [59, 2, 1, "", "pretrained"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[61, 1, 1, "", "MedicalBertForSequenceClassification"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification": [[61, 4, 1, "", "coalesceSentences"], [61, 4, 1, "", "configProtoBytes"], [61, 2, 1, "", "getClasses"], [61, 4, 1, "", "inputAnnotatorTypes"], [61, 2, 1, "", "loadSavedModel"], [61, 2, 1, "", "loadSavedModelOpenSource"], [61, 4, 1, "", "maxSentenceLength"], [61, 4, 1, "", "name"], [61, 4, 1, "", "outputAnnotatorType"], [61, 2, 1, "", "pretrained"], [61, 2, 1, "", "setCoalesceSentences"], [61, 2, 1, "", "setConfigProtoBytes"], [61, 2, 1, "", "setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[62, 1, 1, "", "MedicalBertForTokenClassifier"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier": [[62, 4, 1, "", "configProtoBytes"], [62, 2, 1, "", "getClasses"], [62, 4, 1, "", "inputAnnotatorTypes"], [62, 2, 1, "", "loadSavedModel"], [62, 2, 1, "", "loadSavedModelOpenSource"], [62, 4, 1, "", "maxSentenceLength"], [62, 4, 1, "", "name"], [62, 4, 1, "", "outputAnnotatorType"], [62, 2, 1, "", "pretrained"], [62, 2, 1, "", "setConfigProtoBytes"], [62, 2, 1, "", "setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[63, 1, 1, "", "MedicalDistilBertForSequenceClassification"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification": [[63, 4, 1, "", "coalesceSentences"], [63, 4, 1, "", "configProtoBytes"], [63, 2, 1, "", "getClasses"], [63, 4, 1, "", "inputAnnotatorTypes"], [63, 2, 1, "", "loadSavedModel"], [63, 2, 1, "", "loadSavedModelOpenSource"], [63, 4, 1, "", "maxSentenceLength"], [63, 4, 1, "", "name"], [63, 4, 1, "", "outputAnnotatorType"], [63, 2, 1, "", "pretrained"], [63, 2, 1, "", "setCoalesceSentences"], [63, 2, 1, "", "setConfigProtoBytes"], [63, 2, 1, "", "setMaxSentenceLength"]], "sparknlp_jsl.annotator.context": [[64, 0, 0, "-", "contextual_parser"]], "sparknlp_jsl.annotator.context.contextual_parser": [[64, 1, 1, "", "ContextualParserApproach"], [64, 1, 1, "", "ContextualParserModel"]], "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach": [[64, 4, 1, "", "caseSensitive"], [64, 4, 1, "", "completeContextMatch"], [64, 4, 1, "", "dictionary"], [64, 4, 1, "", "inputAnnotatorTypes"], [64, 4, 1, "", "jsonPath"], [64, 4, 1, "", "optionalContextRules"], [64, 4, 1, "", "outputAnnotatorType"], [64, 4, 1, "", "prefixAndSuffixMatch"], [64, 2, 1, "", "setCaseSensitive"], [64, 2, 1, "", "setCompleteContextMatch"], [64, 2, 1, "", "setDictionary"], [64, 2, 1, "", "setJsonPath"], [64, 2, 1, "", "setOptionalContextRules"], [64, 2, 1, "", "setPrefixAndSuffixMatch"], [64, 2, 1, "", "setShortestContextMatch"], [64, 4, 1, "", "shortestContextMatch"]], "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel": [[64, 4, 1, "", "caseSensitive"], [64, 4, 1, "", "inputAnnotatorTypes"], [64, 4, 1, "", "optionalContextRules"], [64, 4, 1, "", "outputAnnotatorType"], [64, 4, 1, "", "prefixAndSuffixMatch"], [64, 2, 1, "", "setCaseSensitive"], [64, 2, 1, "", "setOptionalContextRules"], [64, 2, 1, "", "setPrefixAndSuffixMatch"], [64, 2, 1, "", "setShortestContextMatch"], [64, 4, 1, "", "shortestContextMatch"]], "sparknlp_jsl.annotator.deid": [[66, 0, 0, "-", "deIdentification"], [67, 0, 0, "-", "doccument_hashcoder"], [69, 0, 0, "-", "name_obfuscator"], [70, 0, 0, "-", "reIdentification"], [71, 0, 0, "-", "replacer"]], "sparknlp_jsl.annotator.deid.deIdentification": [[66, 1, 1, "", "DeIdentification"], [66, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification": [[66, 4, 1, "", "ageRanges"], [66, 4, 1, "", "blackList"], [66, 4, 1, "", "consistentObfuscation"], [66, 4, 1, "", "dateFormats"], [66, 4, 1, "", "dateTag"], [66, 4, 1, "", "dateToYear"], [66, 4, 1, "", "days"], [66, 4, 1, "", "fixedMaskLength"], [66, 2, 1, "", "getBlackList"], [66, 4, 1, "", "ignoreRegex"], [66, 4, 1, "", "inputAnnotatorTypes"], [66, 4, 1, "", "isRandomDateDisplacement"], [66, 4, 1, "", "language"], [66, 4, 1, "", "mappingsColumn"], [66, 4, 1, "", "maskingPolicy"], [66, 4, 1, "", "minYear"], [66, 4, 1, "", "mode"], [66, 4, 1, "", "name"], [66, 4, 1, "", "obfuscateDate"], [66, 4, 1, "", "obfuscateRefFile"], [66, 4, 1, "", "obfuscateRefSource"], [66, 4, 1, "", "outputAnnotatorType"], [66, 4, 1, "", "outputAsDocument"], [66, 4, 1, "", "refFileFormat"], [66, 4, 1, "", "refSep"], [66, 4, 1, "", "regexOverride"], [66, 4, 1, "", "regexPatternsDictionary"], [66, 4, 1, "", "region"], [66, 4, 1, "", "returnEntityMappings"], [66, 4, 1, "", "sameEntityThreshold"], [66, 4, 1, "", "seed"], [66, 2, 1, "", "setAgeRanges"], [66, 2, 1, "", "setBlackList"], [66, 2, 1, "", "setConsistentObfuscation"], [66, 2, 1, "", "setDateFormats"], [66, 2, 1, "", "setDateTag"], [66, 2, 1, "", "setDateToYear"], [66, 2, 1, "", "setDays"], [66, 2, 1, "", "setFixedMaskLength"], [66, 2, 1, "", "setIgnoreRegex"], [66, 2, 1, "", "setIsRandomDateDisplacement"], [66, 2, 1, "", "setLanguage"], [66, 2, 1, "", "setMappingsColumn"], [66, 2, 1, "", "setMaskingPolicy"], [66, 2, 1, "", "setMinYear"], [66, 2, 1, "", "setMode"], [66, 2, 1, "", "setObfuscateDate"], [66, 2, 1, "", "setObfuscateRefFile"], [66, 2, 1, "", "setObfuscateRefSource"], [66, 2, 1, "", "setOutputAsDocument"], [66, 2, 1, "", "setRefFileFormat"], [66, 2, 1, "", "setRefSep"], [66, 2, 1, "", "setRegexOverride"], [66, 2, 1, "", "setRegexPatternsDictionary"], [66, 2, 1, "", "setRegion"], [66, 2, 1, "", "setReturnEntityMappings"], [66, 2, 1, "", "setSameEntityThreshold"], [66, 2, 1, "", "setSeed"], [66, 2, 1, "", "setUnnormalizedDateMode"], [66, 2, 1, "", "setUseShifDays"], [66, 2, 1, "", "setZipCodeTag"], [66, 4, 1, "", "unnormalizedDateMode"], [66, 4, 1, "", "useShifDays"], [66, 4, 1, "", "zipCodeTag"]], "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel": [[66, 4, 1, "", "ageRanges"], [66, 4, 1, "", "blackList"], [66, 4, 1, "", "consistentObfuscation"], [66, 4, 1, "id0", "dateFormats"], [66, 4, 1, "", "dateTag"], [66, 4, 1, "", "dateToYear"], [66, 4, 1, "", "days"], [66, 4, 1, "", "fixedMaskLength"], [66, 2, 1, "", "getBlackList"], [66, 2, 1, "", "getRegexEntities"], [66, 4, 1, "", "ignoreRegex"], [66, 4, 1, "", "inputAnnotatorTypes"], [66, 4, 1, "", "isRandomDateDisplacement"], [66, 4, 1, "", "language"], [66, 4, 1, "", "mappingsColumn"], [66, 4, 1, "", "maskingPolicy"], [66, 4, 1, "", "minYear"], [66, 4, 1, "id13", "mode"], [66, 4, 1, "", "name"], [66, 4, 1, "", "obfuscateDate"], [66, 4, 1, "", "obfuscateRefSource"], [66, 4, 1, "", "outputAnnotatorType"], [66, 4, 1, "", "outputAsDocument"], [66, 2, 1, "", "pretrained"], [66, 4, 1, "", "regexEntities"], [66, 4, 1, "", "regexOverride"], [66, 4, 1, "", "region"], [66, 4, 1, "", "returnEntityMappings"], [66, 4, 1, "", "sameEntityThreshold"], [66, 4, 1, "", "seed"], [66, 2, 1, "", "setAgeRanges"], [66, 2, 1, "", "setBlackList"], [66, 2, 1, "", "setConsistentObfuscation"], [66, 2, 1, "", "setDateFormats"], [66, 2, 1, "", "setDateTag"], [66, 2, 1, "", "setDateToYear"], [66, 2, 1, "", "setDays"], [66, 2, 1, "", "setFixedMaskLength"], [66, 2, 1, "", "setIgnoreRegex"], [66, 2, 1, "", "setIsRandomDateDisplacement"], [66, 2, 1, "", "setLanguage"], [66, 2, 1, "", "setMappingsColumn"], [66, 2, 1, "", "setMaskingPolicy"], [66, 2, 1, "", "setMinYear"], [66, 2, 1, "", "setMode"], [66, 2, 1, "", "setObfuscateDate"], [66, 2, 1, "", "setObfuscateRefSource"], [66, 2, 1, "", "setOutputAsDocument"], [66, 2, 1, "", "setRegexOverride"], [66, 2, 1, "", "setRegion"], [66, 2, 1, "", "setReturnEntityMappings"], [66, 2, 1, "", "setSameEntityThreshold"], [66, 2, 1, "", "setSeed"], [66, 2, 1, "", "setUnnormalizedDateMode"], [66, 2, 1, "", "setUseShifDays"], [66, 2, 1, "", "setZipCodeTag"], [66, 4, 1, "", "unnormalizedDateMode"], [66, 4, 1, "", "useShifDays"], [66, 4, 1, "", "zipCodeTag"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[67, 1, 1, "", "DocumentHashCoder"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder": [[67, 4, 1, "", "dateShiftColumn"], [67, 4, 1, "", "inputAnnotatorTypes"], [67, 4, 1, "", "name"], [67, 4, 1, "", "newDateShift"], [67, 4, 1, "", "outputAnnotatorType"], [67, 4, 1, "", "patientIdColumn"], [67, 4, 1, "", "rangeDays"], [67, 4, 1, "", "seed"], [67, 2, 1, "", "setDateShiftColumn"], [67, 2, 1, "", "setNewDateShift"], [67, 2, 1, "", "setParams"], [67, 2, 1, "", "setPatientIdColumn"], [67, 2, 1, "", "setRangeDays"], [67, 2, 1, "", "setSeed"]], "sparknlp_jsl.annotator.deid.name_obfuscator": [[69, 1, 1, "", "NameChunkObfuscator"], [69, 1, 1, "", "NameChunkObfuscatorApproach"]], "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator": [[69, 4, 1, "", "inputAnnotatorTypes"], [69, 4, 1, "", "outputAnnotatorType"], [69, 2, 1, "", "pretrained"], [69, 4, 1, "", "seed"], [69, 2, 1, "", "setSeed"]], "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach": [[69, 4, 1, "", "inputAnnotatorTypes"], [69, 4, 1, "", "obfuscateRefFile"], [69, 4, 1, "", "outputAnnotatorType"], [69, 4, 1, "", "refFileFormat"], [69, 4, 1, "", "refSep"], [69, 4, 1, "", "seed"], [69, 2, 1, "", "setObfuscateRefFile"], [69, 2, 1, "", "setRefFileFormat"], [69, 2, 1, "", "setRefSep"], [69, 2, 1, "", "setSeed"]], "sparknlp_jsl.annotator.deid.reIdentification": [[70, 1, 1, "", "ReIdentification"]], "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification": [[70, 4, 1, "", "inputAnnotatorTypes"], [70, 4, 1, "", "name"], [70, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.deid.replacer": [[71, 1, 1, "", "Replacer"]], "sparknlp_jsl.annotator.deid.replacer.Replacer": [[71, 2, 1, "", "getUseReplacement"], [71, 4, 1, "", "inputAnnotatorTypes"], [71, 4, 1, "", "name"], [71, 4, 1, "", "outputAnnotatorType"], [71, 2, 1, "", "setUseReplacement"], [71, 4, 1, "", "useReplacement"]], "sparknlp_jsl.annotator.disambiguation": [[73, 0, 0, "-", "ner_disambiguator"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[73, 1, 1, "", "NerDisambiguator"], [73, 1, 1, "", "NerDisambiguatorModel"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator": [[73, 4, 1, "", "embeddingTypeParam"], [73, 4, 1, "", "inputAnnotatorTypes"], [73, 4, 1, "", "levenshteinDistanceThresholdParam"], [73, 4, 1, "", "narrowWithApproximateMatching"], [73, 4, 1, "", "nearMatchingGapParam"], [73, 4, 1, "", "numFirstChars"], [73, 4, 1, "", "outputAnnotatorType"], [73, 4, 1, "", "predictionsLimit"], [73, 4, 1, "", "s3KnowledgeBaseName"], [73, 2, 1, "", "setEmbeddingType"], [73, 2, 1, "", "setLevenshteinDistanceThresholdParam"], [73, 2, 1, "", "setNarrowWithApproximateMatching"], [73, 2, 1, "", "setNearMatchingGapParam"], [73, 2, 1, "", "setNumFirstChars"], [73, 2, 1, "", "setPredictionLimit"], [73, 2, 1, "", "setS3KnowledgeBaseName"], [73, 2, 1, "", "setTokenSearch"], [73, 4, 1, "", "tokenSearch"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel": [[73, 4, 1, "", "embeddingTypeParam"], [73, 4, 1, "", "inputAnnotatorTypes"], [73, 4, 1, "", "levenshteinDistanceThresholdParam"], [73, 4, 1, "", "name"], [73, 4, 1, "", "narrowWithApproximateMatching"], [73, 4, 1, "", "nearMatchingGapParam"], [73, 4, 1, "", "numFirstChars"], [73, 4, 1, "", "outputAnnotatorType"], [73, 4, 1, "", "predictionsLimit"], [73, 2, 1, "", "pretrained"], [73, 2, 1, "", "setEmbeddingType"], [73, 2, 1, "", "setLevenshteinDistanceThresholdParam"], [73, 2, 1, "", "setNarrowWithApproximateMatching"], [73, 2, 1, "", "setNearMatchingGapParam"], [73, 2, 1, "", "setNumFirstChars"], [73, 2, 1, "", "setPredictionLimit"], [73, 2, 1, "", "setTokenSearch"], [73, 4, 1, "", "tokenSearch"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[74, 1, 1, "", "Doc2ChunkInternal"]], "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal": [[74, 4, 1, "", "chunkCol"], [74, 4, 1, "", "failOnMissing"], [74, 4, 1, "", "inputAnnotatorTypes"], [74, 4, 1, "", "isArray"], [74, 4, 1, "", "lowerCase"], [74, 4, 1, "", "name"], [74, 2, 1, "", "setChunkCol"], [74, 2, 1, "", "setFailOnMissing"], [74, 2, 1, "", "setIsArray"], [74, 2, 1, "", "setLowerCase"], [74, 2, 1, "", "setParams"], [74, 2, 1, "", "setStartCol"], [74, 2, 1, "", "setStartColByTokenIndex"], [74, 4, 1, "", "startCol"], [74, 4, 1, "", "startColByTokenIndex"]], "sparknlp_jsl.annotator.embeddings": [[75, 0, 0, "-", "average_embeddings"], [76, 0, 0, "-", "bert_sentence_embeddings"], [77, 0, 0, "-", "entity_chunk_embeddings"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[75, 1, 1, "", "AverageEmbeddings"]], "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings": [[75, 4, 1, "", "inputAnnotatorTypes"], [75, 4, 1, "", "name"], [75, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[76, 1, 1, "", "BertSentenceChunkEmbeddings"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings": [[76, 4, 1, "", "chunkWeight"], [76, 4, 1, "", "inputAnnotatorTypes"], [76, 2, 1, "", "load"], [76, 4, 1, "", "name"], [76, 4, 1, "", "outputAnnotatorType"], [76, 2, 1, "", "pretrained"], [76, 2, 1, "", "setChunkWeight"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[77, 1, 1, "", "EntityChunkEmbeddings"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings": [[77, 4, 1, "", "entityWeights"], [77, 4, 1, "", "inputAnnotatorTypes"], [77, 4, 1, "", "maxSyntacticDistance"], [77, 4, 1, "", "name"], [77, 4, 1, "", "outputAnnotatorType"], [77, 2, 1, "", "pretrained"], [77, 2, 1, "", "setEntityWeights"], [77, 2, 1, "", "setMaxSyntacticDistance"], [77, 2, 1, "", "setTargetEntities"], [77, 4, 1, "", "targetEntities"]], "sparknlp_jsl.annotator.feature_assembler": [[79, 1, 1, "", "FeaturesAssembler"]], "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler": [[79, 4, 1, "", "inputAnnotatorTypes"], [79, 4, 1, "", "inputCols"], [79, 4, 1, "", "name"], [79, 4, 1, "", "outputAnnotatorType"], [79, 4, 1, "", "outputCol"], [79, 2, 1, "", "setInputCols"], [79, 2, 1, "", "setOutputCol"], [79, 2, 1, "", "setParams"], [79, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.annotator.generic_classifier": [[80, 0, 0, "-", "generic_classifier"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[80, 1, 1, "", "GenericClassifierApproach"], [80, 1, 1, "", "GenericClassifierModel"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach": [[80, 4, 1, "", "batchSize"], [80, 4, 1, "", "dropout"], [80, 4, 1, "", "epochsN"], [80, 4, 1, "", "featureScaling"], [80, 4, 1, "", "fixImbalance"], [80, 4, 1, "", "inputAnnotatorTypes"], [80, 4, 1, "", "labelColumn"], [80, 4, 1, "", "learningRate"], [80, 4, 1, "", "modelFile"], [80, 4, 1, "", "multiClass"], [80, 4, 1, "", "outputAnnotatorType"], [80, 4, 1, "", "outputLogsPath"], [80, 2, 1, "", "setBatchSize"], [80, 2, 1, "", "setDropout"], [80, 2, 1, "", "setEpochsNumber"], [80, 2, 1, "", "setFeatureScaling"], [80, 2, 1, "", "setFixImbalance"], [80, 2, 1, "", "setLabelCol"], [80, 2, 1, "", "setLearningRate"], [80, 2, 1, "", "setModelFile"], [80, 2, 1, "", "setMultiClass"], [80, 2, 1, "", "setOutputLogsPath"], [80, 2, 1, "", "setValidationSplit"], [80, 4, 1, "", "validationSplit"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel": [[80, 4, 1, "", "classes"], [80, 4, 1, "", "inputAnnotatorTypes"], [80, 4, 1, "", "multiClass"], [80, 4, 1, "", "name"], [80, 4, 1, "", "outputAnnotatorType"], [80, 2, 1, "", "pretrained"], [80, 2, 1, "", "setMultiClass"]], "sparknlp_jsl.annotator.merge": [[83, 0, 0, "-", "chunk_merge"]], "sparknlp_jsl.annotator.merge.chunk_merge": [[83, 1, 1, "", "ChunkMergeApproach"], [83, 1, 1, "", "ChunkMergeModel"], [83, 1, 1, "", "CommonChunkMergeParams"], [83, 1, 1, "", "MergePriorizationParams"]], "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach": [[83, 4, 1, "", "falsePositivesResource"], [83, 4, 1, "", "inputAnnotatorTypes"], [83, 4, 1, "", "name"], [83, 4, 1, "", "outputAnnotatorType"], [83, 4, 1, "", "replaceDictResource"], [83, 2, 1, "", "setFalsePositivesResource"], [83, 2, 1, "", "setInputCols"], [83, 2, 1, "", "setReplaceDictResource"]], "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel": [[83, 4, 1, "", "falsePositives"], [83, 4, 1, "", "inputAnnotatorTypes"], [83, 4, 1, "", "name"], [83, 4, 1, "", "outputAnnotatorType"], [83, 2, 1, "", "pretrained"], [83, 4, 1, "", "replaceDict"], [83, 2, 1, "", "setInputCols"]], "sparknlp_jsl.annotator.merge.chunk_merge.CommonChunkMergeParams": [[83, 4, 1, "", "blackList"], [83, 4, 1, "", "mergeOverlapping"], [83, 2, 1, "", "setBlackList"], [83, 2, 1, "", "setMergeOverlapping"]], "sparknlp_jsl.annotator.merge.chunk_merge.MergePriorizationParams": [[83, 4, 1, "", "chunkPrecedence"], [83, 4, 1, "", "chunkPrecedenceValuePrioritization"], [83, 4, 1, "", "defaultConfidence"], [83, 4, 1, "", "orderingFeatures"], [83, 4, 1, "", "selectionStrategy"], [83, 2, 1, "", "setChunkPrecedence"], [83, 2, 1, "", "setChunkPrecedenceValuePrioritization"], [83, 2, 1, "", "setDefaultConfidence"], [83, 2, 1, "", "setOrderingFeatures"], [83, 2, 1, "", "setSelectionStrategy"]], "sparknlp_jsl.annotator.ner": [[86, 0, 0, "-", "iob_tagger"], [87, 0, 0, "-", "medical_ner"], [88, 0, 0, "-", "ner_chunker"], [89, 0, 0, "-", "ner_converter_internal"], [90, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[86, 1, 1, "", "IOBTagger"]], "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger": [[86, 4, 1, "", "inputAnnotatorTypes"], [86, 4, 1, "", "name"], [86, 4, 1, "", "outputAnnotatorType"], [86, 4, 1, "", "scheme"], [86, 2, 1, "", "setScheme"]], "sparknlp_jsl.annotator.ner.medical_ner": [[87, 1, 1, "", "MedicalNerApproach"], [87, 1, 1, "", "MedicalNerModel"]], "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach": [[87, 4, 1, "", "batchSize"], [87, 4, 1, "", "configProtoBytes"], [87, 4, 1, "", "dropout"], [87, 4, 1, "", "earlyStoppingCriterion"], [87, 4, 1, "", "earlyStoppingPatience"], [87, 4, 1, "", "enableMemoryOptimizer"], [87, 4, 1, "", "graphFile"], [87, 4, 1, "", "graphFolder"], [87, 4, 1, "", "includeAllConfidenceScores"], [87, 4, 1, "", "includeConfidence"], [87, 4, 1, "", "inputAnnotatorTypes"], [87, 4, 1, "", "logPrefix"], [87, 4, 1, "", "lr"], [87, 4, 1, "", "outputAnnotatorType"], [87, 4, 1, "", "overrideExistingTags"], [87, 4, 1, "", "po"], [87, 4, 1, "", "pretrainedModelPath"], [87, 4, 1, "", "randomValidationSplitPerEpoch"], [87, 2, 1, "", "setBatchSize"], [87, 2, 1, "", "setConfigProtoBytes"], [87, 2, 1, "", "setDropout"], [87, 2, 1, "", "setEarlyStoppingCriterion"], [87, 2, 1, "", "setEarlyStoppingPatience"], [87, 2, 1, "", "setEnableMemoryOptimizer"], [87, 2, 1, "", "setGraphFile"], [87, 2, 1, "", "setGraphFolder"], [87, 2, 1, "", "setIncludeAllConfidenceScores"], [87, 2, 1, "", "setIncludeConfidence"], [87, 2, 1, "", "setLogPrefix"], [87, 2, 1, "", "setLr"], [87, 2, 1, "", "setOverrideExistingTags"], [87, 2, 1, "", "setPo"], [87, 2, 1, "", "setPretrainedModelPath"], [87, 2, 1, "", "setRandomValidationSplitPerEpoch"], [87, 2, 1, "", "setTagsMapping"], [87, 2, 1, "", "setUseBestModel"], [87, 2, 1, "", "setUseContrib"], [87, 2, 1, "", "setValidationSplit"], [87, 4, 1, "", "tagsMapping"], [87, 4, 1, "", "useBestModel"], [87, 4, 1, "", "useContrib"]], "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel": [[87, 4, 1, "", "classes"], [87, 4, 1, "", "configProtoBytes"], [87, 2, 1, "", "getTrainingClassDistribution"], [87, 4, 1, "", "includeAllConfidenceScores"], [87, 4, 1, "", "includeConfidence"], [87, 4, 1, "", "inferenceBatchSize"], [87, 4, 1, "", "inputAnnotatorTypes"], [87, 4, 1, "", "labelCasing"], [87, 2, 1, "", "loadSavedModel"], [87, 4, 1, "", "name"], [87, 4, 1, "", "outputAnnotatorType"], [87, 2, 1, "id29", "pretrained"], [87, 2, 1, "", "setConfigProtoBytes"], [87, 2, 1, "id0", "setIncludeConfidence"], [87, 2, 1, "", "setInferenceBatchSize"], [87, 2, 1, "", "setLabelCasing"], [87, 4, 1, "", "trainingClassDistribution"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[88, 1, 1, "", "NerChunker"]], "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker": [[88, 4, 1, "", "inputAnnotatorTypes"], [88, 4, 1, "", "name"], [88, 4, 1, "", "outputAnnotatorType"], [88, 4, 1, "", "regexParsers"], [88, 2, 1, "", "setRegexParsers"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[89, 1, 1, "", "CommonNerConverterInternalParams"], [89, 1, 1, "", "NerConverterInternal"], [89, 1, 1, "", "NerConverterInternalModel"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams": [[89, 4, 1, "", "blackList"], [89, 4, 1, "", "greedyMode"], [89, 4, 1, "", "ignoreStopWords"], [89, 4, 1, "", "preservePosition"], [89, 2, 1, "", "setBlackList"], [89, 2, 1, "", "setGreedyMode"], [89, 2, 1, "", "setIgnoreStopWords"], [89, 2, 1, "", "setPreservePosition"], [89, 2, 1, "", "setThreshold"], [89, 2, 1, "", "setWhiteList"], [89, 4, 1, "", "threshold"], [89, 4, 1, "", "whiteList"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal": [[89, 4, 1, "", "inputAnnotatorTypes"], [89, 4, 1, "", "name"], [89, 4, 1, "", "outputAnnotatorType"], [89, 4, 1, "", "replaceDictResource"], [89, 4, 1, "", "replaceLabels"], [89, 2, 1, "", "setReplaceDictResource"], [89, 2, 1, "", "setReplaceLabels"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel": [[89, 4, 1, "", "inputAnnotatorTypes"], [89, 4, 1, "", "name"], [89, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[90, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel": [[90, 2, 1, "", "getClasses"], [90, 4, 1, "", "ignoreEntities"], [90, 4, 1, "", "inputAnnotatorTypes"], [90, 2, 1, "", "load"], [90, 4, 1, "", "name"], [90, 4, 1, "", "outputAnnotatorType"], [90, 4, 1, "", "predictionThreshold"], [90, 2, 1, "", "pretrained"], [90, 2, 1, "", "setEntityDefinitions"], [90, 2, 1, "", "setPredictionThreshold"]], "sparknlp_jsl.annotator.normalizer": [[91, 0, 0, "-", "date_normalizer"], [92, 0, 0, "-", "drug_normalizer"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[91, 1, 1, "", "DateNormalizer"]], "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer": [[91, 4, 1, "", "anchorDateDay"], [91, 4, 1, "", "anchorDateMonth"], [91, 4, 1, "", "anchorDateYear"], [91, 4, 1, "", "defaultReplacementDay"], [91, 4, 1, "", "defaultReplacementMonth"], [91, 4, 1, "", "defaultReplacementYear"], [91, 4, 1, "", "inputAnnotatorTypes"], [91, 4, 1, "", "name"], [91, 4, 1, "", "outputAnnotatorType"], [91, 4, 1, "", "outputDateFormat"], [91, 2, 1, "", "setAnchorDateDay"], [91, 2, 1, "", "setAnchorDateMonth"], [91, 2, 1, "", "setAnchorDateYear"], [91, 2, 1, "", "setDefaultReplacementDay"], [91, 2, 1, "", "setDefaultReplacementMonth"], [91, 2, 1, "", "setDefaultReplacementYear"], [91, 2, 1, "", "setOutputDateformat"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[92, 1, 1, "", "DrugNormalizer"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer": [[92, 4, 1, "", "inputAnnotatorTypes"], [92, 4, 1, "", "lowercase"], [92, 4, 1, "", "outputAnnotatorType"], [92, 4, 1, "", "policy"], [92, 2, 1, "", "setLowercase"], [92, 2, 1, "", "setPolicy"]], "sparknlp_jsl.annotator.qa": [[95, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[95, 1, 1, "", "NerQuestionGenerator"]], "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator": [[95, 4, 1, "", "entities1"], [95, 4, 1, "", "entities2"], [95, 4, 1, "", "inputAnnotatorTypes"], [95, 4, 1, "", "name"], [95, 4, 1, "", "outputAnnotatorType"], [95, 4, 1, "", "questionMark"], [95, 4, 1, "", "questionPronoun"], [95, 2, 1, "", "setEntities1"], [95, 2, 1, "", "setEntities2"], [95, 2, 1, "", "setQuestionMark"], [95, 2, 1, "", "setQuestionPronoun"], [95, 2, 1, "", "setStrategyType"], [95, 4, 1, "", "strategyType"]], "sparknlp_jsl.annotator.re": [[97, 0, 0, "-", "relation_extraction"], [98, 0, 0, "-", "relation_extraction_dl"], [99, 0, 0, "-", "relation_ner_chunk_filter"], [100, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.annotator.re.relation_extraction": [[97, 1, 1, "", "GenericREModel"], [97, 1, 1, "", "PosologyREModel"], [97, 1, 1, "", "RelationExtractionApproach"], [97, 1, 1, "", "RelationExtractionModel"]], "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach": [[97, 4, 1, "", "customLabels"], [97, 4, 1, "", "fromEntityBeginCol"], [97, 4, 1, "", "fromEntityEndCol"], [97, 4, 1, "", "fromEntityLabelCol"], [97, 4, 1, "", "inputAnnotatorTypes"], [97, 4, 1, "", "maxSyntacticDistance"], [97, 4, 1, "", "name"], [97, 4, 1, "", "outputAnnotatorType"], [97, 4, 1, "", "overrideExistingLabels"], [97, 4, 1, "", "pretrainedModelPath"], [97, 4, 1, "", "relationDirectionCol"], [97, 2, 1, "", "setCustomLabels"], [97, 2, 1, "", "setFromEntity"], [97, 2, 1, "", "setMaxSyntacticDistance"], [97, 2, 1, "", "setPretrainedModelPath"], [97, 2, 1, "", "setRelationDirectionCol"], [97, 2, 1, "", "setToEntity"], [97, 2, 1, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setverrideExistingLabels", "set\u041everrideExistingLabels"], [97, 4, 1, "", "toEntityBeginCol"], [97, 4, 1, "", "toEntityEndCol"], [97, 4, 1, "", "toEntityLabelCol"]], "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel": [[97, 4, 1, "", "classes"], [97, 2, 1, "", "getClasses"], [97, 4, 1, "", "inputAnnotatorTypes"], [97, 4, 1, "", "maxSyntacticDistance"], [97, 4, 1, "", "name"], [97, 4, 1, "", "outputAnnotatorType"], [97, 4, 1, "", "predictionThreshold"], [97, 2, 1, "", "pretrained"], [97, 4, 1, "", "relationPairs"], [97, 4, 1, "", "relationPairsCaseSensitive"], [97, 2, 1, "", "setCustomLabels"], [97, 2, 1, "", "setMaxSyntacticDistance"], [97, 2, 1, "", "setPredictionThreshold"], [97, 2, 1, "", "setRelationPairs"], [97, 2, 1, "", "setRelationPairsCaseSensitive"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[98, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel": [[98, 4, 1, "", "batchSize"], [98, 4, 1, "", "classes"], [98, 4, 1, "", "customLabels"], [98, 2, 1, "", "getClasses"], [98, 4, 1, "", "inputAnnotatorTypes"], [98, 2, 1, "", "loadSavedModel"], [98, 4, 1, "", "name"], [98, 4, 1, "", "outputAnnotatorType"], [98, 4, 1, "", "predictionThreshold"], [98, 2, 1, "", "pretrained"], [98, 2, 1, "", "setBatchSize"], [98, 2, 1, "", "setCaseSensitive"], [98, 2, 1, "", "setCustomLabels"], [98, 2, 1, "", "setPredictionThreshold"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[99, 1, 1, "", "RENerChunksFilter"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter": [[99, 4, 1, "", "docLevelRelations"], [99, 4, 1, "", "inputAnnotatorTypes"], [99, 4, 1, "", "maxSyntacticDistance"], [99, 4, 1, "", "name"], [99, 4, 1, "", "outputAnnotatorType"], [99, 4, 1, "", "relationPairs"], [99, 4, 1, "", "relationPairsCaseSensitive"], [99, 2, 1, "", "setDocLevelRelations"], [99, 2, 1, "", "setMaxSyntacticDistance"], [99, 2, 1, "", "setRelationPairs"], [99, 2, 1, "", "setRelationPairsCaseSensitive"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[100, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[100, 2, 1, "", "getClasses"], [100, 4, 1, "", "inputAnnotatorTypes"], [100, 2, 1, "", "loadSavedModel"], [100, 4, 1, "", "multiLabel"], [100, 4, 1, "", "outputAnnotatorType"], [100, 4, 1, "", "predictionThreshold"], [100, 2, 1, "", "pretrained"], [100, 2, 1, "", "setRelationalCategories"]], "sparknlp_jsl.annotator.resolution": [[102, 0, 0, "-", "resolver_merger"], [103, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[102, 1, 1, "", "ResolverMerger"]], "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger": [[102, 4, 1, "", "inputAnnotatorTypes"], [102, 4, 1, "", "name"], [102, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[103, 1, 1, "", "SentenceEntityResolverApproach"], [103, 1, 1, "", "SentenceEntityResolverModel"], [103, 1, 1, "", "SentenceResolverParams"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach": [[103, 4, 1, "", "aux_label_col"], [103, 4, 1, "", "dropCodesList"], [103, 4, 1, "", "inputAnnotatorTypes"], [103, 4, 1, "", "labelCol"], [103, 4, 1, "", "normalizedCol"], [103, 4, 1, "", "outputAnnotatorType"], [103, 4, 1, "", "overrideExistingCodes"], [103, 4, 1, "", "pretrainedModelPath"], [103, 4, 1, "", "returnCosineDistances"], [103, 2, 1, "", "setAuxLabelCol"], [103, 2, 1, "", "setDropCodesList"], [103, 2, 1, "", "setExtractCosineDistances"], [103, 2, 1, "", "setLabelCol"], [103, 2, 1, "", "setNormalizedCol"], [103, 2, 1, "", "setOverrideExistingCodes"], [103, 2, 1, "", "setPretrainedModelPath"], [103, 2, 1, "", "setUseAuxLabel"], [103, 4, 1, "", "useAuxLabel"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[103, 4, 1, "", "aux_label_col"], [103, 4, 1, "", "inputAnnotatorTypes"], [103, 4, 1, "", "name"], [103, 4, 1, "", "outputAnnotatorType"], [103, 2, 1, "", "pretrained"], [103, 4, 1, "", "returnCosineDistances"], [103, 4, 1, "", "searchTree"], [103, 2, 1, "", "setAuxLabelCol"], [103, 2, 1, "", "setSearchTree"], [103, 2, 1, "", "setUseAuxLabel"], [103, 4, 1, "", "useAuxLabel"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams": [[103, 4, 1, "", "confidenceFunction"], [103, 4, 1, "", "distanceFunction"], [103, 4, 1, "", "inputAnnotatorTypes"], [103, 4, 1, "", "missAsEmpty"], [103, 4, 1, "", "neighbours"], [103, 2, 1, "", "setConfidenceFunction"], [103, 2, 1, "", "setDistanceFunction"], [103, 2, 1, "", "setMissAsEmpty"], [103, 2, 1, "", "setNeighbours"], [103, 2, 1, "", "setThreshold"], [103, 4, 1, "", "threshold"]], "sparknlp_jsl.annotator.resolution2_chunk": [[104, 1, 1, "", "Resolution2Chunk"]], "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk": [[104, 4, 1, "", "inputAnnotatorTypes"], [104, 4, 1, "", "name"], [104, 4, 1, "", "outputAnnotatorType"], [104, 2, 1, "", "setParams"]], "sparknlp_jsl.annotator.router": [[105, 1, 1, "", "Router"]], "sparknlp_jsl.annotator.router.Router": [[105, 4, 1, "", "filterFieldsElements"], [105, 4, 1, "", "inputAnnotatorTypes"], [105, 4, 1, "", "inputType"], [105, 4, 1, "", "metadataField"], [105, 4, 1, "", "name"], [105, 4, 1, "", "outputAnnotatorType"], [105, 2, 1, "", "setFilterFieldsElements"], [105, 2, 1, "", "setInputCols"], [105, 2, 1, "", "setInputType"], [105, 2, 1, "", "setMetadataField"], [105, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.annotator.source_tracking_metadata_params": [[106, 1, 1, "", "SourceTrackingMetadataParams"]], "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams": [[106, 4, 1, "", "allPossibleFieldsToStandardize"], [106, 4, 1, "", "includeOutputColumn"], [106, 4, 1, "", "includeStandardField"], [106, 4, 1, "", "outputColumnKey"], [106, 2, 1, "", "setAllPossibleFieldsToStandardize"], [106, 2, 1, "", "setIncludeOutputColumn"], [106, 2, 1, "", "setIncludeStandardField"], [106, 2, 1, "", "setOutputColumnKey"], [106, 2, 1, "", "setStandardFieldKey"], [106, 4, 1, "", "standardFieldKey"]], "sparknlp_jsl.annotator.tf_graph_builder": [[107, 1, 1, "", "TFGraphBuilder"], [107, 1, 1, "", "TFGraphBuilderModel"]], "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder": [[107, 4, 1, "", "batchNorm"], [107, 2, 1, "", "getBatchNorm"], [107, 2, 1, "", "getGraphFile"], [107, 2, 1, "", "getGraphFolder"], [107, 2, 1, "", "getHiddenAct"], [107, 2, 1, "", "getHiddenActL2"], [107, 2, 1, "", "getHiddenLayers"], [107, 2, 1, "", "getHiddenUnitsNumber"], [107, 2, 1, "", "getHiddenWeightsL2"], [107, 2, 1, "", "getInputCols"], [107, 2, 1, "", "getIsLicensed"], [107, 2, 1, "", "getLabelColumn"], [107, 2, 1, "", "getMaxSequenceLength"], [107, 2, 1, "", "getModelName"], [107, 2, 1, "", "getOutputAct"], [107, 2, 1, "", "getUseRelationDirection"], [107, 4, 1, "", "graphFile"], [107, 4, 1, "", "graphFolder"], [107, 4, 1, "", "hiddenAct"], [107, 4, 1, "", "hiddenActL2"], [107, 4, 1, "", "hiddenLayers"], [107, 4, 1, "", "hiddenUnitsNumber"], [107, 4, 1, "", "hiddenWeightsL2"], [107, 4, 1, "", "inputCols"], [107, 4, 1, "", "isLicensed"], [107, 4, 1, "", "labelColumn"], [107, 4, 1, "", "maxSequenceLength"], [107, 4, 1, "", "modelName"], [107, 4, 1, "", "outputAct"], [107, 2, 1, "", "setBatchNorm"], [107, 2, 1, "", "setGraphFile"], [107, 2, 1, "", "setGraphFolder"], [107, 2, 1, "", "setHiddenAct"], [107, 2, 1, "", "setHiddenActL2"], [107, 2, 1, "", "setHiddenLayers"], [107, 2, 1, "", "setHiddenUnitsNumber"], [107, 2, 1, "", "setHiddenWeightsL2"], [107, 2, 1, "", "setInputCols"], [107, 2, 1, "", "setIsLicensed"], [107, 2, 1, "", "setLabelColumn"], [107, 2, 1, "", "setMaxSequenceLength"], [107, 2, 1, "", "setModelName"], [107, 2, 1, "", "setUseRelationDirection"], [107, 2, 1, "", "settOutputAct"], [107, 4, 1, "id0", "useRelationDirection"]], "sparknlp_jsl.common": [[109, 0, 0, "-", "annotator_approach_internal"], [110, 0, 0, "-", "annotator_model_internal"], [111, 0, 0, "-", "annotator_properties_internal"]], "sparknlp_jsl.common.annotator_approach_internal": [[109, 1, 1, "", "AnnotatorApproachInternal"]], "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal": [[109, 4, 1, "", "inputAnnotatorTypes"], [109, 4, 1, "", "outputAnnotatorType"], [109, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.common.annotator_model_internal": [[110, 1, 1, "", "AnnotatorModelInternal"]], "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal": [[110, 4, 1, "", "inputAnnotatorTypes"], [110, 4, 1, "", "outputAnnotatorType"], [110, 2, 1, "", "setParams"], [110, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.common.annotator_properties_internal": [[111, 1, 1, "", "AnnotatorPropertiesInternal"]], "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal": [[111, 2, 1, "", "inputColsValidation"], [111, 2, 1, "", "setForceInputTypeValidation"]], "sparknlp_jsl.compatibility": [[113, 1, 1, "", "Compatibility"]], "sparknlp_jsl.compatibility.Compatibility": [[113, 2, 1, "", "findVersion"], [113, 2, 1, "", "showVersion"]], "sparknlp_jsl.custom_transformer": [[114, 1, 1, "", "CustomTransformer"]], "sparknlp_jsl.custom_transformer.CustomTransformer": [[114, 4, 1, "", "f"], [114, 2, 1, "", "setInputCol"], [114, 2, 1, "", "setOutputCol"]], "sparknlp_jsl.eval": [[115, 1, 1, "", "NerCrfEvaluation"], [115, 1, 1, "", "NerDLEvaluation"], [115, 1, 1, "", "NerDLMetrics"], [115, 1, 1, "", "NorvigSpellEvaluation"], [115, 1, 1, "", "POSEvaluation"], [115, 1, 1, "", "SymSpellEvaluation"]], "sparknlp_jsl.eval.NerCrfEvaluation": [[115, 2, 1, "", "computeAccuracyAnnotator"], [115, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.NerDLEvaluation": [[115, 2, 1, "", "computeAccuracyAnnotator"], [115, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.NerDLMetrics": [[115, 2, 1, "", "computeMetricsFromDF"]], "sparknlp_jsl.eval.NorvigSpellEvaluation": [[115, 2, 1, "", "computeAccuracyAnnotator"], [115, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.POSEvaluation": [[115, 2, 1, "", "computeAccuracyAnnotator"], [115, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.SymSpellEvaluation": [[115, 2, 1, "", "computeAccuracyAnnotator"], [115, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.finance": [[121, 0, 0, "-", "chunk_classification"], [126, 0, 0, "-", "graph"], [131, 0, 0, "-", "seq_generation"], [136, 0, 0, "-", "sequence_classification"], [137, 0, 0, "-", "token_classification"]], "sparknlp_jsl.finance.chunk_classification": [[117, 0, 0, "-", "assertion"], [120, 0, 0, "-", "deid"], [124, 0, 0, "-", "resolution"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[116, 0, 0, "-", "assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL": [[116, 1, 1, "", "AssertionDLApproach"], [116, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel": [[116, 4, 1, "", "name"], [116, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.chunk_classification.deid": [[118, 0, 0, "-", "deIdentification"], [119, 0, 0, "-", "document_hashcoder"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification": [[118, 1, 1, "", "DeIdentification"], [118, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification": [[118, 4, 1, "", "name"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel": [[118, 4, 1, "", "name"], [118, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[119, 1, 1, "", "FinanceDocumentHashCoder"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[122, 0, 0, "-", "chunkmapper"], [123, 0, 0, "-", "docmapper"], [125, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[122, 1, 1, "", "ChunkMapperApproach"], [122, 1, 1, "", "ChunkMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach": [[122, 4, 1, "", "name"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel": [[122, 4, 1, "", "name"], [122, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper": [[123, 1, 1, "", "DocMapperApproach"], [123, 1, 1, "", "DocMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach": [[123, 4, 1, "", "dictionary"], [123, 4, 1, "", "inputAnnotatorTypes"], [123, 4, 1, "", "name"], [123, 4, 1, "", "outputAnnotatorType"], [123, 2, 1, "", "setDictionary"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel": [[123, 4, 1, "", "inputAnnotatorTypes"], [123, 4, 1, "", "name"], [123, 4, 1, "", "outputAnnotatorType"], [123, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[125, 1, 1, "", "SentenceEntityResolverApproach"], [125, 1, 1, "", "SentenceEntityResolverModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[125, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.graph": [[127, 0, 0, "-", "relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction": [[128, 0, 0, "-", "relation_extraction_dl"], [129, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[128, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel": [[128, 2, 1, "", "loadSavedModel"], [128, 4, 1, "", "name"], [128, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[129, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[129, 2, 1, "", "loadSavedModel"], [129, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.seq_generation": [[132, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.finance.seq_generation.qa_ner_generator": [[132, 1, 1, "", "FinanceNerQuestionGenerator"]], "sparknlp_jsl.finance.sequence_classification": [[133, 0, 0, "-", "finance_bert_for_sequence_classification"], [134, 0, 0, "-", "finance_classifier_dl"], [135, 0, 0, "-", "finance_document_ml_classifier"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[133, 1, 1, "", "FinanceBertForSequenceClassification"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification": [[133, 2, 1, "", "loadSavedModel"], [133, 2, 1, "", "loadSavedModelOpenSource"], [133, 4, 1, "", "name"], [133, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[134, 1, 1, "", "FinanceClassifierDLApproach"], [134, 1, 1, "", "FinanceClassifierDLModel"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel": [[134, 4, 1, "", "name"], [134, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier": [[135, 1, 1, "", "FinanceDocumentMLClassifierApproach"], [135, 1, 1, "", "FinanceDocumentMLClassifierModel"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel": [[135, 4, 1, "", "name"], [135, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.token_classification": [[140, 0, 0, "-", "ner"]], "sparknlp_jsl.finance.token_classification.ner": [[138, 0, 0, "-", "finance_bert_for_token_classifier"], [139, 0, 0, "-", "finance_ner"], [141, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[138, 1, 1, "", "FinanceBertForTokenClassification"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification": [[138, 2, 1, "", "loadSavedModel"], [138, 2, 1, "", "loadSavedModelOpenSource"], [138, 4, 1, "", "name"], [138, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[139, 1, 1, "", "FinanceNerApproach"], [139, 1, 1, "", "FinanceNerModel"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel": [[139, 2, 1, "", "loadSavedModel"], [139, 4, 1, "", "name"], [139, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[141, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel": [[141, 2, 1, "", "load"], [141, 4, 1, "", "name"], [141, 2, 1, "", "pretrained"]], "sparknlp_jsl.functions": [[142, 6, 1, "", "profile"], [142, 6, 1, "", "profileV22"], [142, 6, 1, "", "profileV22Y17"], [142, 6, 1, "", "profileV22Y18"], [142, 6, 1, "", "profileV22Y19"], [142, 6, 1, "", "profileV22Y20"], [142, 6, 1, "", "profileV22Y21"], [142, 6, 1, "", "profileV22Y22"], [142, 6, 1, "", "profileV23"], [142, 6, 1, "", "profileV23Y18"], [142, 6, 1, "", "profileV23Y19"], [142, 6, 1, "", "profileV24Y17"], [142, 6, 1, "", "profileV24Y18"], [142, 6, 1, "", "profileV24Y19"], [142, 6, 1, "", "profileV24Y20"], [142, 6, 1, "", "profileV24Y21"], [142, 6, 1, "", "profileV24Y22"]], "sparknlp_jsl.internal": [[144, 6, 1, "", "CustomLabels"], [144, 6, 1, "", "EntityWeights"], [144, 6, 1, "", "RelationalCategories"], [144, 6, 1, "", "TargetEntities"]], "sparknlp_jsl.legal": [[150, 0, 0, "-", "chunk_classification"], [155, 0, 0, "-", "graph"], [160, 0, 0, "-", "seq_generation"], [162, 0, 0, "-", "sequence_classification"], [166, 0, 0, "-", "token_classification"]], "sparknlp_jsl.legal.chunk_classification": [[146, 0, 0, "-", "assertion"], [149, 0, 0, "-", "deid"], [153, 0, 0, "-", "resolution"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[145, 0, 0, "-", "assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL": [[145, 1, 1, "", "AssertionDLApproach"], [145, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel": [[145, 4, 1, "", "name"], [145, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.chunk_classification.deid": [[147, 0, 0, "-", "deIdentification"], [148, 0, 0, "-", "document_hashcoder"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification": [[147, 1, 1, "", "DeIdentification"], [147, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification": [[147, 4, 1, "", "name"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel": [[147, 4, 1, "", "name"], [147, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[148, 1, 1, "", "LegalDocumentHashCoder"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[151, 0, 0, "-", "chunkmapper"], [152, 0, 0, "-", "docmapper"], [154, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[151, 1, 1, "", "ChunkMapperApproach"], [151, 1, 1, "", "ChunkMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach": [[151, 4, 1, "", "name"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel": [[151, 4, 1, "", "name"], [151, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper": [[152, 1, 1, "", "DocMapperApproach"], [152, 1, 1, "", "DocMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach": [[152, 4, 1, "", "dictionary"], [152, 4, 1, "", "inputAnnotatorTypes"], [152, 4, 1, "", "name"], [152, 4, 1, "", "outputAnnotatorType"], [152, 2, 1, "", "setDictionary"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel": [[152, 4, 1, "", "inputAnnotatorTypes"], [152, 4, 1, "", "name"], [152, 4, 1, "", "outputAnnotatorType"], [152, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[154, 1, 1, "", "SentenceEntityResolverApproach"], [154, 1, 1, "", "SentenceEntityResolverModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[154, 4, 1, "", "name"], [154, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.graph": [[156, 0, 0, "-", "relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction": [[157, 0, 0, "-", "relation_extraction_dl"], [158, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[157, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel": [[157, 2, 1, "", "loadSavedModel"], [157, 4, 1, "", "name"], [157, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[158, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[158, 2, 1, "", "loadSavedModel"], [158, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.seq_generation": [[161, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.legal.seq_generation.qa_ner_generator": [[161, 1, 1, "", "LegalNerQuestionGenerator"]], "sparknlp_jsl.legal.sequence_classification": [[163, 0, 0, "-", "legal_bert_for_sequence_classification"], [164, 0, 0, "-", "legal_classifier_dl"], [165, 0, 0, "-", "legal_document_ml_classifier"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[163, 1, 1, "", "LegalBertForSequenceClassification"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification": [[163, 2, 1, "", "loadSavedModel"], [163, 2, 1, "", "loadSavedModelOpenSource"], [163, 4, 1, "", "name"], [163, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[164, 1, 1, "", "LegalClassifierDLApproach"], [164, 1, 1, "", "LegalClassifierDLModel"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel": [[164, 4, 1, "", "name"], [164, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier": [[165, 1, 1, "", "LegalDocumentMLClassifierApproach"], [165, 1, 1, "", "LegalDocumentMLClassifierModel"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel": [[165, 4, 1, "", "name"], [165, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.token_classification": [[167, 0, 0, "-", "ner"]], "sparknlp_jsl.legal.token_classification.ner": [[168, 0, 0, "-", "legal_bert_for_token_classifier"], [169, 0, 0, "-", "legal_ner"], [170, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[168, 1, 1, "", "LegalBertForTokenClassification"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification": [[168, 2, 1, "", "loadSavedModel"], [168, 2, 1, "", "loadSavedModelOpenSource"], [168, 4, 1, "", "name"], [168, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[169, 1, 1, "", "LegalNerApproach"], [169, 1, 1, "", "LegalNerModel"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel": [[169, 2, 1, "", "loadSavedModel"], [169, 4, 1, "", "name"], [169, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[170, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel": [[170, 2, 1, "", "load"], [170, 4, 1, "", "name"], [170, 2, 1, "", "pretrained"]], "sparknlp_jsl.modelTracer": [[171, 1, 1, "", "ModelTracer"]], "sparknlp_jsl.modelTracer.ModelTracer": [[171, 2, 1, "", "addUidCols"]], "sparknlp_jsl.nlp_test": [[173, 0, 0, "-", "bias"], [175, 0, 0, "-", "noisy_labels"], [179, 0, 0, "-", "robustness"]], "sparknlp_jsl.nlp_test.bias": [[172, 0, 0, "-", "bias_testing"]], "sparknlp_jsl.nlp_test.bias.bias_testing": [[172, 1, 1, "", "RuleBasedClassifier"], [172, 6, 1, "", "init_medical_gender_classifier"], [172, 6, 1, "", "test_gender_bias"]], "sparknlp_jsl.nlp_test.bias.bias_testing.RuleBasedClassifier": [[172, 2, 1, "", "transform"]], "sparknlp_jsl.nlp_test.noisy_labels": [[176, 0, 0, "-", "noisy_label_fixing"], [177, 0, 0, "-", "noisy_label_testing"], [178, 0, 0, "-", "utils"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing": [[176, 1, 1, "", "InteractiveFix"], [176, 6, 1, "", "add_flag_to_conll"], [176, 6, 1, "", "apply_label_fixes"], [176, 6, 1, "", "conll_reader"], [176, 6, 1, "", "conll_writer"], [176, 6, 1, "", "update_with_model_predictions"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix": [[176, 2, 1, "", "adjust_page_size"], [176, 2, 1, "", "apply_fixes"], [176, 2, 1, "", "create_grid"], [176, 2, 1, "", "display"], [176, 2, 1, "", "empty_grid"], [176, 2, 1, "", "fill_grid"], [176, 2, 1, "", "fix_all"], [176, 2, 1, "", "fix_label"], [176, 2, 1, "", "get_cell_element"], [176, 2, 1, "", "get_central_grid"], [176, 2, 1, "", "get_classes"], [176, 2, 1, "", "get_default_indx"], [176, 2, 1, "", "get_drop_down"], [176, 2, 1, "", "get_drop_down_title"], [176, 2, 1, "", "get_footer"], [176, 2, 1, "", "get_header"], [176, 2, 1, "", "get_page_control_buttons"], [176, 2, 1, "", "get_page_number"], [176, 2, 1, "", "get_sentence"], [176, 2, 1, "", "get_title_html"], [176, 2, 1, "", "next_page"], [176, 2, 1, "", "num_sample_drop_down"], [176, 2, 1, "", "prev_page"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing": [[177, 6, 1, "", "calculate_label_error_score"], [177, 6, 1, "", "get_label_quality_scores"], [177, 6, 1, "", "get_unique_entities"], [177, 6, 1, "", "test_label_errors"]], "sparknlp_jsl.nlp_test.noisy_labels.utils": [[178, 3, 1, "", "stylesheet"]], "sparknlp_jsl.nlp_test.robustness": [[180, 0, 0, "-", "robustness_fixing"], [181, 0, 0, "-", "robustness_testing"], [182, 0, 0, "-", "utils"]], "sparknlp_jsl.nlp_test.robustness.robustness_fixing": [[180, 6, 1, "", "add_context_to_data"], [180, 6, 1, "", "add_contractions"], [180, 6, 1, "", "add_punctuation_to_data"], [180, 6, 1, "", "add_typo_to_sentence"], [180, 6, 1, "", "augment_robustness"], [180, 6, 1, "", "conll_reader"], [180, 6, 1, "", "convert_accent"], [180, 6, 1, "", "create_dataframe"], [180, 6, 1, "", "create_terminology"], [180, 6, 1, "", "filter_by_entity_type"], [180, 6, 1, "", "get_cohyponyms_wordnet"], [180, 6, 1, "", "get_sample"], [180, 6, 1, "", "introduce_typos"], [180, 6, 1, "", "modify_capitalization_lower"], [180, 6, 1, "", "modify_capitalization_title"], [180, 6, 1, "", "modify_capitalization_upper"], [180, 6, 1, "", "strip_punctuation_from_data"], [180, 6, 1, "", "swap_entities_with_terminology"], [180, 6, 1, "", "swap_with_cohyponym"], [180, 6, 1, "", "test_and_augment_robustness"]], "sparknlp_jsl.nlp_test.robustness.robustness_testing": [[181, 6, 1, "", "add_context"], [181, 6, 1, "", "add_contractions"], [181, 6, 1, "", "add_punctuation"], [181, 6, 1, "", "add_typo_to_sentence"], [181, 6, 1, "", "american_to_british"], [181, 6, 1, "", "british_to_american"], [181, 6, 1, "", "calculate_metrics"], [181, 6, 1, "", "conll_sentence_reader"], [181, 6, 1, "", "create_terminology"], [181, 6, 1, "", "get_cohyponyms_wordnet"], [181, 6, 1, "", "introduce_typos"], [181, 6, 1, "", "modify_capitalization"], [181, 6, 1, "", "remove_context_tokens"], [181, 6, 1, "", "remove_contraction_tokens"], [181, 6, 1, "", "remove_punctuation_tokens"], [181, 6, 1, "", "run_test"], [181, 6, 1, "", "strip_punctuation"], [181, 6, 1, "", "swap_named_entities_from_terminology"], [181, 6, 1, "", "swap_with_cohyponym"], [181, 6, 1, "", "test_robustness"]], "sparknlp_jsl.nlp_test.robustness.utils": [[182, 6, 1, "", "calculate_proportion"], [182, 6, 1, "", "get_augmentation_proportions"], [182, 6, 1, "", "suggest_perturbations"]], "sparknlp_jsl.pretrained": [[183, 1, 1, "", "InternalResourceDownloader"], [183, 6, 1, "", "printProgress"]], "sparknlp_jsl.pretrained.InternalResourceDownloader": [[183, 2, 1, "", "downloadModel"], [183, 2, 1, "", "returnPrivateModels"], [183, 2, 1, "", "returnPrivatePipelines"], [183, 2, 1, "", "showAvailableAnnotators"], [183, 2, 1, "", "showPrivateModels"], [183, 2, 1, "", "showPrivatePipelines"], [183, 2, 1, "", "showUnCategorizedResources"]], "sparknlp_jsl.structured_deidentification": [[184, 1, 1, "", "StructuredDeidentification"]], "sparknlp_jsl.structured_deidentification.StructuredDeidentification": [[184, 2, 1, "", "obfuscateColumns"]], "sparknlp_jsl.text_to_documents_columns": [[185, 1, 1, "", "TextToDocumentsColumns"]], "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns": [[185, 2, 1, "", "toDocumentsColumns"]], "sparknlp_jsl.training": [[186, 1, 1, "", "AnnotationToolJsonReader"], [186, 1, 1, "", "CantemistReader"], [186, 1, 1, "", "CodiEspReader"], [186, 1, 1, "", "REDatasetHelper"], [186, 1, 1, "", "SynonymAugmentationUMLS"], [186, 3, 1, "", "tf_graph"], [186, 3, 1, "", "tf_graph_1x"]], "sparknlp_jsl.training.AnnotationToolJsonReader": [[186, 2, 1, "", "generateAssertionTrainSet"], [186, 2, 1, "", "generateConll"], [186, 2, 1, "", "generatePlainAssertionTrainSet"], [186, 2, 1, "", "readDataset"]], "sparknlp_jsl.training.CantemistReader": [[186, 2, 1, "", "readDatasetTaskNer"]], "sparknlp_jsl.training.CodiEspReader": [[186, 2, 1, "", "readDatasetTaskX"]], "sparknlp_jsl.training.REDatasetHelper": [[186, 2, 1, "", "create_annotation_column"]], "sparknlp_jsl.training.SynonymAugmentationUMLS": [[186, 2, 1, "", "augmentCsv"], [186, 2, 1, "", "augmentDataFrame"]], "sparknlp_jsl.training_log_parser": [[187, 1, 1, "", "assertion_log_parser"], [187, 1, 1, "", "ner_log_parser"]], "sparknlp_jsl.training_log_parser.assertion_log_parser": [[187, 2, 1, "", "get_best_f1_scores"], [187, 2, 1, "", "get_charts"], [187, 2, 1, "", "loss_plot"], [187, 2, 1, "", "parse_logfile"]], "sparknlp_jsl.training_log_parser.ner_log_parser": [[187, 2, 1, "", "evaluate"], [187, 2, 1, "", "evaluate_conll_file"], [187, 2, 1, "", "get_best_f1_scores"], [187, 2, 1, "", "get_charts"], [187, 2, 1, "", "loss_plot"], [187, 2, 1, "", "parse_logfile"]], "sparknlp_jsl.updateModels": [[188, 1, 1, "", "UpdateModels"]], "sparknlp_jsl.updateModels.UpdateModels": [[188, 2, 1, "", "updateCacheModels"], [188, 2, 1, "", "updateModels"]], "sparknlp_jsl.util": [[189, 6, 1, "", "get_mt_samples"]], "sparknlp_jsl.utils": [[190, 0, 0, "-", "alab_utils"], [191, 0, 0, "-", "conll_parse"], [192, 0, 0, "-", "deidentification_module"], [193, 0, 0, "-", "imports"], [195, 0, 0, "-", "licensed_annotator_type"], [196, 0, 0, "-", "log_parse"], [197, 0, 0, "-", "ner_utils"], [198, 0, 0, "-", "ocr_nlp_processor"], [199, 0, 0, "-", "ocr_utils"], [200, 0, 0, "-", "training_log_parser_utils"]], "sparknlp_jsl.utils.alab_utils": [[190, 3, 1, "", "document_assembler"], [190, 3, 1, "", "empty_df"], [190, 6, 1, "", "get_doc_assembler"], [190, 6, 1, "", "get_empty_df"], [190, 6, 1, "", "get_ner_df"], [190, 6, 1, "", "get_ner_sentence_borders"], [190, 6, 1, "", "get_nlp_pos_pipeline"], [190, 6, 1, "", "get_nlp_token_pipeline"], [190, 6, 1, "", "get_pos"], [190, 6, 1, "", "get_regex_tokenizer"], [190, 6, 1, "", "get_regular_tokenizer"], [190, 6, 1, "", "get_rel_df"], [190, 6, 1, "", "get_sent_detector"], [190, 6, 1, "", "get_sentence_pipeline"], [190, 6, 1, "", "get_single_task_conll"], [190, 6, 1, "", "get_token_df"], [190, 3, 1, "", "nlp_pos_pipeline"], [190, 3, 1, "", "nlp_token_pipeline"], [190, 3, 1, "", "pos"], [190, 3, 1, "", "pos_pipeline_initialized"], [190, 6, 1, "", "read_conll"], [190, 3, 1, "", "regex_tokenizer"], [190, 3, 1, "", "regular_tokenizer"], [190, 3, 1, "", "sentence_detector"], [190, 3, 1, "", "token_pipeline_initialized"]], "sparknlp_jsl.utils.deidentification_module": [[192, 1, 1, "", "Deidentifier"]], "sparknlp_jsl.utils.deidentification_module.Deidentifier": [[192, 2, 1, "", "deid_with_custom_pipeline"], [192, 2, 1, "", "deid_with_pp"], [192, 2, 1, "", "deidentify"], [192, 4, 1, "", "spark"], [192, 2, 1, "", "structured_deidentifier"]], "sparknlp_jsl.utils.imports": [[193, 6, 1, "", "is_module_importable"]], "sparknlp_jsl.utils.licensed_annotator_type": [[195, 1, 1, "", "InternalAnnotatorType"]], "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType": [[195, 4, 1, "", "ASSERTION"], [195, 4, 1, "", "DISAMBIGUATION"], [195, 4, 1, "", "FEATURE_VECTOR"], [195, 4, 1, "", "KEYWORD"], [195, 4, 1, "", "SELECTOR"], [195, 4, 1, "", "SQL"]], "sparknlp_jsl.utils.ner_utils": [[197, 6, 1, "", "evaluate"], [197, 6, 1, "", "evaluate_conll_file"], [197, 6, 1, "", "get_charts"], [197, 6, 1, "", "loss_plot"]], "sparknlp_jsl.utils.ocr_nlp_processor": [[198, 3, 1, "", "colors"], [198, 6, 1, "", "ocr_entity_processor"]], "sparknlp_jsl.utils.ocr_utils": [[199, 3, 1, "", "colors"], [199, 3, 1, "", "colors_rgb"], [199, 3, 1, "", "label2color"], [199, 3, 1, "", "label2rgb"]], "sparknlp_jsl.utils.training_log_parser_utils": [[200, 6, 1, "", "aggregate_entities"], [200, 6, 1, "", "calc_metrics"], [200, 6, 1, "", "count_chunks"], [200, 6, 1, "", "get_result"], [200, 6, 1, "", "is_chunk_end"], [200, 6, 1, "", "is_chunk_start"], [200, 6, 1, "", "split_tag"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:data", "4": "py:attribute", "5": "py:exception", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "data", "Python data"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "exception", "Python exception"], "6": ["py", "function", "Python function"]}, "titleterms": {"get": 0, "start": 0, "requir": 0, "instal": 0, "spark": [0, 1], "nlp": [0, 1], "session": 0, "from": 0, "python": 0, "document": 1, "content": [1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 115, 116, 118, 119, 122, 123, 125, 128, 129, 132, 133, 134, 135, 138, 139, 141, 142, 143, 144, 145, 147, 148, 151, 152, 154, 157, 158, 161, 163, 164, 165, 168, 169, 170, 171, 172, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 195, 197, 198, 199, 200], "sparknlp_jsl": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200], "_tf_graph_build": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], "assertion_dl": [2, 3, 25, 26], "assertion_model": [2, 25], "modul": [2, 4, 5, 6, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 83, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 115, 116, 118, 119, 122, 123, 125, 128, 129, 132, 133, 134, 135, 138, 139, 141, 142, 144, 145, 147, 148, 151, 152, 154, 157, 158, 161, 163, 164, 165, 168, 169, 170, 171, 172, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 195, 197, 198, 199, 200, 201], "class": [2, 4, 6, 8, 9, 10, 13, 15, 16, 17, 18, 19, 20, 22, 24, 25, 27, 29, 31, 32, 33, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 83, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 115, 116, 118, 119, 122, 123, 125, 128, 129, 132, 133, 134, 135, 138, 139, 141, 145, 147, 148, 151, 152, 154, 157, 158, 161, 163, 164, 165, 168, 169, 170, 171, 172, 176, 183, 184, 185, 186, 187, 188, 192, 195], "submodul": [3, 7, 11, 14, 21, 26, 30, 34, 37, 46, 55, 60, 65, 68, 72, 78, 81, 82, 84, 85, 93, 94, 96, 101, 112, 117, 120, 124, 127, 131, 136, 140, 143, 146, 149, 153, 156, 160, 162, 167, 173, 175, 179, 194], "generic_classifi": [4, 5, 6, 7, 8, 9, 27, 28, 29, 30, 31, 32, 80, 81], "basetfmodel": [4, 27], "build_model": [5, 28], "generic_classifier_model": [6, 29], "progresstrack": [8, 31], "set": [9, 32], "graph_build": [10, 33], "subpackag": [11, 34, 82, 121, 126, 130, 137, 143, 150, 155, 159, 166, 174], "ner_dl": [12, 13, 14, 15, 16, 17, 35, 36, 37, 38, 39, 40], "create_graph": [12, 35], "function": [12, 23, 35, 142, 143, 144, 172, 176, 177, 180, 181, 182, 183, 189, 190, 193, 197, 198, 200], "dataset_encod": [13, 36], "ner_model": [15, 38], "ner_model_sav": [16, 39], "sentence_group": [17, 40], "tf2contrib": [18, 19, 20, 21, 22, 23, 24], "core_rnn_cel": 18, "attribut": [18, 20, 22, 24, 143, 186, 190, 198], "fused_rnn_cel": 19, "gru_op": 20, "packag": [21, 82, 143], "lstm_op": 22, "rnn": 23, "rnn_cell": 24, "_tf_graph_builders_1x": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "alab": 41, "annot": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "annotation_merg": 42, "assert": [43, 44, 45, 46, 116, 117, 145, 146], "assertiondl": [43, 116, 145], "assertion_chunk_convert": 44, "assertion_dl_reg": 45, "chunker": [47, 48, 49, 50, 51, 52, 53, 54, 55], "assertion_filter": 47, "chunk_convert": 48, "chunk_key_phrase_extract": 49, "chunk_sentence_splitt": 50, "chunker_filter": 51, "chunkmapp": [52, 122, 151], "chunkmapper_filter": 53, "docmapp": [54, 123, 152], "classif": [56, 57, 58, 59, 60, 61, 62, 63], "document_log_classifi": 56, "document_ml_classifi": 57, "generic_log_reg_classifi": 58, "generic_svm_classifi": 59, "medical_bert_for_sequence_classif": 61, "medical_bert_for_token_classifi": 62, "medical_distilbert_for_sequence_classif": 63, "context": [64, 65], "contextual_pars": 64, "deid": [66, 67, 68, 69, 70, 71, 118, 119, 120, 147, 148, 149], "deidentif": [66, 118, 147], "doccument_hashcod": 67, "name_obfusc": 69, "reidentif": 70, "replac": 71, "disambigu": [72, 73], "ner_disambigu": 73, "doc2_chunk_intern": 74, "embed": [75, 76, 77, 78], "average_embed": 75, "bert_sentence_embed": 76, "entity_chunk_embed": 77, "feature_assembl": 79, "merg": [83, 84], "chunk_merg": 83, "ner": [85, 86, 87, 88, 89, 90, 138, 139, 140, 141, 167, 168, 169, 170], "iob_tagg": 86, "medical_n": 87, "ner_chunk": 88, "ner_converter_intern": 89, "zero_shot_n": [90, 141, 170], "normal": [91, 92, 93], "date_norm": 91, "drug_norm": 92, "qa": [94, 95], "qa_ner_gener": [95, 132, 161], "re": [96, 97, 98, 99, 100], "relation_extract": [97, 127, 128, 129, 156, 157, 158], "relation_extraction_dl": [98, 128, 157], "relation_ner_chunk_filt": 99, "zero_shot_relation_extract": [100, 129, 158], "resolut": [101, 102, 103, 122, 123, 124, 125, 151, 152, 153, 154], "resolver_merg": 102, "sentence_entity_resolv": [103, 125, 154], "resolution2_chunk": 104, "router": 105, "source_tracking_metadata_param": 106, "tf_graph_build": 107, "paramet": [107, 192], "base": 108, "common": [109, 110, 111, 112], "annotator_approach_intern": 109, "annotator_model_intern": 110, "annotator_properties_intern": 111, "compat": 113, "custom_transform": 114, "eval": 115, "financ": [116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141], "chunk_classif": [116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154], "document_hashcod": [119, 148], "graph": [126, 127, 128, 129, 155, 156, 157, 158], "seq_gener": [131, 132, 160, 161], "sequence_classif": [133, 134, 135, 136, 162, 163, 164, 165], "finance_bert_for_sequence_classif": 133, "finance_classifier_dl": 134, "finance_document_ml_classifi": 135, "token_classif": [137, 138, 139, 140, 141, 166, 167, 168, 169, 170], "finance_bert_for_token_classifi": 138, "finance_n": 139, "intern": 144, "legal": [145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170], "legal_bert_for_sequence_classif": 163, "legal_classifier_dl": 164, "legal_document_ml_classifi": 165, "legal_bert_for_token_classifi": 168, "legal_n": 169, "modeltrac": 171, "nlp_test": [172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182], "bia": [172, 173], "bias_test": 172, "noisy_label": [175, 176, 177, 178], "noisy_label_fix": 176, "noisy_label_test": 177, "util": [178, 182, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200], "robust": [179, 180, 181, 182], "robustness_fix": 180, "robustness_test": 181, "pretrain": 183, "structured_deidentif": 184, "text_to_documents_column": 185, "train": 186, "training_log_pars": 187, "updatemodel": 188, "alab_util": 190, "conll_pars": 191, "deidentification_modul": 192, "return": 192, "import": 193, "licensed_annotator_typ": 195, "log_pars": 196, "ner_util": 197, "ocr_nlp_processor": 198, "ocr_util": 199, "training_log_parser_util": 200, "api": 201, "refer": 201}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Getting Started": [[0, "getting-started"]], "Requirements": [[0, "requirements"]], "Installation": [[0, "installation"]], "Starting a Spark NLP Session from Python": [[0, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[1, "spark-nlp-documentation"]], "Content": [[1, "content"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model": [[2, "module-sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model"]], "Module Contents": [[2, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [12, "module-contents"], [13, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [35, "module-contents"], [36, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [66, "module-contents"], [67, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [79, "module-contents"], [80, "module-contents"], [83, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [95, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [118, "module-contents"], [119, "module-contents"], [122, "module-contents"], [123, "module-contents"], [125, "module-contents"], [128, "module-contents"], [129, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [138, "module-contents"], [139, "module-contents"], [141, "module-contents"], [142, "module-contents"], [144, "module-contents"], [145, "module-contents"], [147, "module-contents"], [148, "module-contents"], [151, "module-contents"], [152, "module-contents"], [154, "module-contents"], [157, "module-contents"], [158, "module-contents"], [161, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [180, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [192, "module-contents"], [193, "module-contents"], [195, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"]], "Classes": [[2, "classes"], [4, "classes"], [6, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [13, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [22, "classes"], [24, "classes"], [25, "classes"], [27, "classes"], [29, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [36, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [66, "classes"], [67, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [79, "classes"], [80, "classes"], [83, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [95, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [106, "classes"], [107, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [118, "classes"], [119, "classes"], [122, "classes"], [123, "classes"], [125, "classes"], [128, "classes"], [129, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [138, "classes"], [139, "classes"], [141, "classes"], [145, "classes"], [147, "classes"], [148, "classes"], [151, "classes"], [152, "classes"], [154, "classes"], [157, "classes"], [158, "classes"], [161, "classes"], [163, "classes"], [164, "classes"], [165, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [176, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [192, "classes"], [195, "classes"]], "sparknlp_jsl._tf_graph_builders.assertion_dl": [[3, "module-sparknlp_jsl._tf_graph_builders.assertion_dl"]], "Submodules": [[3, "submodules"], [7, "submodules"], [11, "submodules"], [14, "submodules"], [21, "submodules"], [26, "submodules"], [30, "submodules"], [34, "submodules"], [37, "submodules"], [46, "submodules"], [55, "submodules"], [60, "submodules"], [65, "submodules"], [68, "submodules"], [72, "submodules"], [78, "submodules"], [81, "submodules"], [82, "submodules"], [84, "submodules"], [85, "submodules"], [93, "submodules"], [94, "submodules"], [96, "submodules"], [101, "submodules"], [112, "submodules"], [117, "submodules"], [120, "submodules"], [124, "submodules"], [127, "submodules"], [131, "submodules"], [136, "submodules"], [140, "submodules"], [143, "submodules"], [146, "submodules"], [149, "submodules"], [153, "submodules"], [156, "submodules"], [160, "submodules"], [162, "submodules"], [167, "submodules"], [173, "submodules"], [175, "submodules"], [179, "submodules"], [194, "submodules"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel": [[4, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model": [[5, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.build_model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model": [[6, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier": [[7, "module-sparknlp_jsl._tf_graph_builders.generic_classifier"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker": [[8, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings": [[9, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.settings"]], "sparknlp_jsl._tf_graph_builders.graph_builders": [[10, "module-sparknlp_jsl._tf_graph_builders.graph_builders"]], "sparknlp_jsl._tf_graph_builders": [[11, "module-sparknlp_jsl._tf_graph_builders"]], "Subpackages": [[11, "subpackages"], [34, "subpackages"], [82, "subpackages"], [121, "subpackages"], [126, "subpackages"], [130, "subpackages"], [137, "subpackages"], [143, "subpackages"], [150, "subpackages"], [155, "subpackages"], [159, "subpackages"], [166, "subpackages"], [174, "subpackages"]], "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph": [[12, "module-sparknlp_jsl._tf_graph_builders.ner_dl.create_graph"]], "Functions": [[12, "functions"], [23, "functions"], [35, "functions"], [142, "functions"], [143, "functions"], [144, "functions"], [172, "functions"], [176, "functions"], [177, "functions"], [180, "functions"], [181, "functions"], [182, "functions"], [183, "functions"], [189, "functions"], [190, "functions"], [193, "functions"], [197, "functions"], [198, "functions"], [200, "functions"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder": [[13, "module-sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders.ner_dl": [[14, "module-sparknlp_jsl._tf_graph_builders.ner_dl"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model": [[15, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver": [[16, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper": [[17, "module-sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell": [[18, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell"]], "Attributes": [[18, "attributes"], [20, "attributes"], [22, "attributes"], [24, "attributes"], [143, "attributes"], [186, "attributes"], [190, "attributes"], [198, "attributes"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell": [[19, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops": [[20, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib": [[21, "module-sparknlp_jsl._tf_graph_builders.tf2contrib"]], "Package Contents": [[21, "package-contents"], [82, "package-contents"], [143, "package-contents"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops": [[22, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn": [[23, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell": [[24, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model": [[25, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl": [[26, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel": [[27, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model": [[28, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model": [[29, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier": [[30, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker": [[31, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings": [[32, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders": [[33, "module-sparknlp_jsl._tf_graph_builders_1x.graph_builders"]], "sparknlp_jsl._tf_graph_builders_1x": [[34, "module-sparknlp_jsl._tf_graph_builders_1x"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph": [[35, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder": [[36, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl": [[37, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model": [[38, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver": [[39, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper": [[40, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper"]], "sparknlp_jsl.alab": [[41, "module-sparknlp_jsl.alab"]], "sparknlp_jsl.annotator.annotation_merger": [[42, "module-sparknlp_jsl.annotator.annotation_merger"]], "sparknlp_jsl.annotator.assertion.assertionDL": [[43, "module-sparknlp_jsl.annotator.assertion.assertionDL"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter": [[44, "module-sparknlp_jsl.annotator.assertion.assertion_chunk_converter"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[45, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"]], "sparknlp_jsl.annotator.assertion": [[46, "module-sparknlp_jsl.annotator.assertion"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[47, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[48, "module-sparknlp_jsl.annotator.chunker.chunk_converter"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[49, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[50, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[51, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[52, "module-sparknlp_jsl.annotator.chunker.chunkmapper"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[53, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"]], "sparknlp_jsl.annotator.chunker.docmapper": [[54, "module-sparknlp_jsl.annotator.chunker.docmapper"]], "sparknlp_jsl.annotator.chunker": [[55, "module-sparknlp_jsl.annotator.chunker"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[56, "module-sparknlp_jsl.annotator.classification.document_log_classifier"]], "sparknlp_jsl.annotator.classification.document_ml_classifier": [[57, "module-sparknlp_jsl.annotator.classification.document_ml_classifier"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier": [[58, "module-sparknlp_jsl.annotator.classification.generic_log_reg_classifier"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier": [[59, "module-sparknlp_jsl.annotator.classification.generic_svm_classifier"]], "sparknlp_jsl.annotator.classification": [[60, "module-sparknlp_jsl.annotator.classification"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[61, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[62, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[63, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"]], "sparknlp_jsl.annotator.context.contextual_parser": [[64, "module-sparknlp_jsl.annotator.context.contextual_parser"]], "sparknlp_jsl.annotator.context": [[65, "module-sparknlp_jsl.annotator.context"]], "sparknlp_jsl.annotator.deid.deIdentification": [[66, "module-sparknlp_jsl.annotator.deid.deIdentification"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[67, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"]], "sparknlp_jsl.annotator.deid": [[68, "module-sparknlp_jsl.annotator.deid"]], "sparknlp_jsl.annotator.deid.name_obfuscator": [[69, "module-sparknlp_jsl.annotator.deid.name_obfuscator"]], "sparknlp_jsl.annotator.deid.reIdentification": [[70, "module-sparknlp_jsl.annotator.deid.reIdentification"]], "sparknlp_jsl.annotator.deid.replacer": [[71, "module-sparknlp_jsl.annotator.deid.replacer"]], "sparknlp_jsl.annotator.disambiguation": [[72, "module-sparknlp_jsl.annotator.disambiguation"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[73, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[74, "module-sparknlp_jsl.annotator.doc2_chunk_internal"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[75, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[76, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[77, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"]], "sparknlp_jsl.annotator.embeddings": [[78, "module-sparknlp_jsl.annotator.embeddings"]], "sparknlp_jsl.annotator.feature_assembler": [[79, "module-sparknlp_jsl.annotator.feature_assembler"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[80, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"]], "sparknlp_jsl.annotator.generic_classifier": [[81, "module-sparknlp_jsl.annotator.generic_classifier"]], "sparknlp_jsl.annotator": [[82, "module-sparknlp_jsl.annotator"]], "sparknlp_jsl.annotator.merge.chunk_merge": [[83, "module-sparknlp_jsl.annotator.merge.chunk_merge"]], "sparknlp_jsl.annotator.merge": [[84, "module-sparknlp_jsl.annotator.merge"]], "sparknlp_jsl.annotator.ner": [[85, "module-sparknlp_jsl.annotator.ner"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[86, "module-sparknlp_jsl.annotator.ner.iob_tagger"]], "sparknlp_jsl.annotator.ner.medical_ner": [[87, "module-sparknlp_jsl.annotator.ner.medical_ner"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[88, "module-sparknlp_jsl.annotator.ner.ner_chunker"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[89, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[90, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[91, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[92, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"]], "sparknlp_jsl.annotator.normalizer": [[93, "module-sparknlp_jsl.annotator.normalizer"]], "sparknlp_jsl.annotator.qa": [[94, "module-sparknlp_jsl.annotator.qa"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[95, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"]], "sparknlp_jsl.annotator.re": [[96, "module-sparknlp_jsl.annotator.re"]], "sparknlp_jsl.annotator.re.relation_extraction": [[97, "module-sparknlp_jsl.annotator.re.relation_extraction"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[98, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[99, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[100, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"]], "sparknlp_jsl.annotator.resolution": [[101, "module-sparknlp_jsl.annotator.resolution"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[102, "module-sparknlp_jsl.annotator.resolution.resolver_merger"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[103, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"]], "sparknlp_jsl.annotator.resolution2_chunk": [[104, "module-sparknlp_jsl.annotator.resolution2_chunk"]], "sparknlp_jsl.annotator.router": [[105, "module-sparknlp_jsl.annotator.router"]], "sparknlp_jsl.annotator.source_tracking_metadata_params": [[106, "module-sparknlp_jsl.annotator.source_tracking_metadata_params"]], "sparknlp_jsl.annotator.tf_graph_builder": [[107, "module-sparknlp_jsl.annotator.tf_graph_builder"]], "Parameters": [[107, "parameters"], [107, "id1"]], "sparknlp_jsl.base": [[108, "module-sparknlp_jsl.base"]], "sparknlp_jsl.common.annotator_approach_internal": [[109, "module-sparknlp_jsl.common.annotator_approach_internal"]], "sparknlp_jsl.common.annotator_model_internal": [[110, "module-sparknlp_jsl.common.annotator_model_internal"]], "sparknlp_jsl.common.annotator_properties_internal": [[111, "module-sparknlp_jsl.common.annotator_properties_internal"]], "sparknlp_jsl.common": [[112, "module-sparknlp_jsl.common"]], "sparknlp_jsl.compatibility": [[113, "module-sparknlp_jsl.compatibility"]], "sparknlp_jsl.custom_transformer": [[114, "module-sparknlp_jsl.custom_transformer"]], "sparknlp_jsl.eval": [[115, "module-sparknlp_jsl.eval"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL": [[116, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[117, "module-sparknlp_jsl.finance.chunk_classification.assertion"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification": [[118, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[119, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.finance.chunk_classification.deid": [[120, "module-sparknlp_jsl.finance.chunk_classification.deid"]], "sparknlp_jsl.finance.chunk_classification": [[121, "module-sparknlp_jsl.finance.chunk_classification"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[122, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper": [[123, "module-sparknlp_jsl.finance.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[124, "module-sparknlp_jsl.finance.chunk_classification.resolution"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[125, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.finance.graph": [[126, "module-sparknlp_jsl.finance.graph"]], "sparknlp_jsl.finance.graph.relation_extraction": [[127, "module-sparknlp_jsl.finance.graph.relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[128, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[129, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.finance": [[130, "module-sparknlp_jsl.finance"]], "sparknlp_jsl.finance.seq_generation": [[131, "module-sparknlp_jsl.finance.seq_generation"]], "sparknlp_jsl.finance.seq_generation.qa_ner_generator": [[132, "module-sparknlp_jsl.finance.seq_generation.qa_ner_generator"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[133, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[134, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier": [[135, "module-sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier"]], "sparknlp_jsl.finance.sequence_classification": [[136, "module-sparknlp_jsl.finance.sequence_classification"]], "sparknlp_jsl.finance.token_classification": [[137, "module-sparknlp_jsl.finance.token_classification"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[138, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[139, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"]], "sparknlp_jsl.finance.token_classification.ner": [[140, "module-sparknlp_jsl.finance.token_classification.ner"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[141, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"]], "sparknlp_jsl.functions": [[142, "module-sparknlp_jsl.functions"]], "sparknlp_jsl": [[143, "module-sparknlp_jsl"]], "sparknlp_jsl.internal": [[144, "module-sparknlp_jsl.internal"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL": [[145, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[146, "module-sparknlp_jsl.legal.chunk_classification.assertion"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification": [[147, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[148, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.legal.chunk_classification.deid": [[149, "module-sparknlp_jsl.legal.chunk_classification.deid"]], "sparknlp_jsl.legal.chunk_classification": [[150, "module-sparknlp_jsl.legal.chunk_classification"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[151, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper": [[152, "module-sparknlp_jsl.legal.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[153, "module-sparknlp_jsl.legal.chunk_classification.resolution"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[154, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.legal.graph": [[155, "module-sparknlp_jsl.legal.graph"]], "sparknlp_jsl.legal.graph.relation_extraction": [[156, "module-sparknlp_jsl.legal.graph.relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[157, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[158, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.legal": [[159, "module-sparknlp_jsl.legal"]], "sparknlp_jsl.legal.seq_generation": [[160, "module-sparknlp_jsl.legal.seq_generation"]], "sparknlp_jsl.legal.seq_generation.qa_ner_generator": [[161, "module-sparknlp_jsl.legal.seq_generation.qa_ner_generator"]], "sparknlp_jsl.legal.sequence_classification": [[162, "module-sparknlp_jsl.legal.sequence_classification"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[163, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[164, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier": [[165, "module-sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier"]], "sparknlp_jsl.legal.token_classification": [[166, "module-sparknlp_jsl.legal.token_classification"]], "sparknlp_jsl.legal.token_classification.ner": [[167, "module-sparknlp_jsl.legal.token_classification.ner"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[168, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[169, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[170, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"]], "sparknlp_jsl.modelTracer": [[171, "module-sparknlp_jsl.modelTracer"]], "sparknlp_jsl.nlp_test.bias.bias_testing": [[172, "module-sparknlp_jsl.nlp_test.bias.bias_testing"]], "sparknlp_jsl.nlp_test.bias": [[173, "module-sparknlp_jsl.nlp_test.bias"]], "sparknlp_jsl.nlp_test": [[174, "module-sparknlp_jsl.nlp_test"]], "sparknlp_jsl.nlp_test.noisy_labels": [[175, "module-sparknlp_jsl.nlp_test.noisy_labels"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing": [[176, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing": [[177, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing"]], "sparknlp_jsl.nlp_test.noisy_labels.utils": [[178, "module-sparknlp_jsl.nlp_test.noisy_labels.utils"]], "sparknlp_jsl.nlp_test.robustness": [[179, "module-sparknlp_jsl.nlp_test.robustness"]], "sparknlp_jsl.nlp_test.robustness.robustness_fixing": [[180, "module-sparknlp_jsl.nlp_test.robustness.robustness_fixing"]], "sparknlp_jsl.nlp_test.robustness.robustness_testing": [[181, "module-sparknlp_jsl.nlp_test.robustness.robustness_testing"]], "sparknlp_jsl.nlp_test.robustness.utils": [[182, "module-sparknlp_jsl.nlp_test.robustness.utils"]], "sparknlp_jsl.pretrained": [[183, "module-sparknlp_jsl.pretrained"]], "sparknlp_jsl.structured_deidentification": [[184, "module-sparknlp_jsl.structured_deidentification"]], "sparknlp_jsl.text_to_documents_columns": [[185, "module-sparknlp_jsl.text_to_documents_columns"]], "sparknlp_jsl.training": [[186, "module-sparknlp_jsl.training"]], "sparknlp_jsl.training_log_parser": [[187, "module-sparknlp_jsl.training_log_parser"]], "sparknlp_jsl.updateModels": [[188, "module-sparknlp_jsl.updateModels"]], "sparknlp_jsl.util": [[189, "module-sparknlp_jsl.util"]], "sparknlp_jsl.utils.alab_utils": [[190, "module-sparknlp_jsl.utils.alab_utils"]], "sparknlp_jsl.utils.conll_parse": [[191, "module-sparknlp_jsl.utils.conll_parse"]], "sparknlp_jsl.utils.deidentification_module": [[192, "module-sparknlp_jsl.utils.deidentification_module"]], "Parameters:": [[192, "parameters"]], "Returns:": [[192, "returns"]], "sparknlp_jsl.utils.imports": [[193, "module-sparknlp_jsl.utils.imports"]], "sparknlp_jsl.utils": [[194, "module-sparknlp_jsl.utils"]], "sparknlp_jsl.utils.licensed_annotator_type": [[195, "module-sparknlp_jsl.utils.licensed_annotator_type"]], "sparknlp_jsl.utils.log_parse": [[196, "module-sparknlp_jsl.utils.log_parse"]], "sparknlp_jsl.utils.ner_utils": [[197, "module-sparknlp_jsl.utils.ner_utils"]], "sparknlp_jsl.utils.ocr_nlp_processor": [[198, "module-sparknlp_jsl.utils.ocr_nlp_processor"]], "sparknlp_jsl.utils.ocr_utils": [[199, "module-sparknlp_jsl.utils.ocr_utils"]], "sparknlp_jsl.utils.training_log_parser_utils": [[200, "module-sparknlp_jsl.utils.training_log_parser_utils"]], "API Reference": [[201, "api-reference"]], "Modules": [[201, "modules"]]}, "indexentries": {"assertionmodel (class in sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel"]], "add_bidirectional_lstm() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.add_bidirectional_lstm"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.add_bidirectional_lstm"]], "add_optimizer() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.add_optimizer"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.add_optimizer"]], "calc_accuracy() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.calc_accuracy"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.calc_accuracy"]], "confusion_matrix() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.confusion_matrix"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.confusion_matrix"]], "fully_connected_layer() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.fully_connected_layer"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.fully_connected_layer"]], "module": [[2, "module-sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model"], [3, "module-sparknlp_jsl._tf_graph_builders.assertion_dl"], [4, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel"], [5, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.build_model"], [6, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model"], [7, "module-sparknlp_jsl._tf_graph_builders.generic_classifier"], [8, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker"], [9, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.settings"], [10, "module-sparknlp_jsl._tf_graph_builders.graph_builders"], [11, "module-sparknlp_jsl._tf_graph_builders"], [12, "module-sparknlp_jsl._tf_graph_builders.ner_dl.create_graph"], [13, "module-sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder"], [14, "module-sparknlp_jsl._tf_graph_builders.ner_dl"], [15, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model"], [16, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver"], [17, "module-sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper"], [18, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell"], [19, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell"], [20, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops"], [21, "module-sparknlp_jsl._tf_graph_builders.tf2contrib"], [22, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops"], [23, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn"], [24, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell"], [25, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model"], [26, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl"], [27, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel"], [28, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model"], [29, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model"], [30, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier"], [31, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker"], [32, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings"], [33, "module-sparknlp_jsl._tf_graph_builders_1x.graph_builders"], [34, "module-sparknlp_jsl._tf_graph_builders_1x"], [35, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph"], [36, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder"], [37, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl"], [38, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model"], [39, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver"], [40, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper"], [41, "module-sparknlp_jsl.alab"], [42, "module-sparknlp_jsl.annotator.annotation_merger"], [43, "module-sparknlp_jsl.annotator.assertion.assertionDL"], [44, "module-sparknlp_jsl.annotator.assertion.assertion_chunk_converter"], [45, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"], [46, "module-sparknlp_jsl.annotator.assertion"], [47, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"], [48, "module-sparknlp_jsl.annotator.chunker.chunk_converter"], [49, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"], [50, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"], [51, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"], [52, "module-sparknlp_jsl.annotator.chunker.chunkmapper"], [53, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"], [54, "module-sparknlp_jsl.annotator.chunker.docmapper"], [55, "module-sparknlp_jsl.annotator.chunker"], [56, "module-sparknlp_jsl.annotator.classification.document_log_classifier"], [57, "module-sparknlp_jsl.annotator.classification.document_ml_classifier"], [58, "module-sparknlp_jsl.annotator.classification.generic_log_reg_classifier"], [59, "module-sparknlp_jsl.annotator.classification.generic_svm_classifier"], [60, "module-sparknlp_jsl.annotator.classification"], [61, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"], [62, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"], [63, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"], [64, "module-sparknlp_jsl.annotator.context.contextual_parser"], [65, "module-sparknlp_jsl.annotator.context"], [66, "module-sparknlp_jsl.annotator.deid.deIdentification"], [67, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"], [68, "module-sparknlp_jsl.annotator.deid"], [69, "module-sparknlp_jsl.annotator.deid.name_obfuscator"], [70, "module-sparknlp_jsl.annotator.deid.reIdentification"], [71, "module-sparknlp_jsl.annotator.deid.replacer"], [72, "module-sparknlp_jsl.annotator.disambiguation"], [73, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"], [74, "module-sparknlp_jsl.annotator.doc2_chunk_internal"], [75, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"], [76, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"], [77, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"], [78, "module-sparknlp_jsl.annotator.embeddings"], [79, "module-sparknlp_jsl.annotator.feature_assembler"], [80, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"], [81, "module-sparknlp_jsl.annotator.generic_classifier"], [82, "module-sparknlp_jsl.annotator"], [83, "module-sparknlp_jsl.annotator.merge.chunk_merge"], [84, "module-sparknlp_jsl.annotator.merge"], [85, "module-sparknlp_jsl.annotator.ner"], [86, "module-sparknlp_jsl.annotator.ner.iob_tagger"], [87, "module-sparknlp_jsl.annotator.ner.medical_ner"], [88, "module-sparknlp_jsl.annotator.ner.ner_chunker"], [89, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"], [90, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"], [91, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"], [92, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"], [93, "module-sparknlp_jsl.annotator.normalizer"], [94, "module-sparknlp_jsl.annotator.qa"], [95, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"], [96, "module-sparknlp_jsl.annotator.re"], [97, "module-sparknlp_jsl.annotator.re.relation_extraction"], [98, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"], [99, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"], [100, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"], [101, "module-sparknlp_jsl.annotator.resolution"], [102, "module-sparknlp_jsl.annotator.resolution.resolver_merger"], [103, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"], [104, "module-sparknlp_jsl.annotator.resolution2_chunk"], [105, "module-sparknlp_jsl.annotator.router"], [106, "module-sparknlp_jsl.annotator.source_tracking_metadata_params"], [107, "module-sparknlp_jsl.annotator.tf_graph_builder"], [108, "module-sparknlp_jsl.base"], [109, "module-sparknlp_jsl.common.annotator_approach_internal"], [110, "module-sparknlp_jsl.common.annotator_model_internal"], [111, "module-sparknlp_jsl.common.annotator_properties_internal"], [112, "module-sparknlp_jsl.common"], [113, "module-sparknlp_jsl.compatibility"], [114, "module-sparknlp_jsl.custom_transformer"], [115, "module-sparknlp_jsl.eval"], [116, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"], [117, "module-sparknlp_jsl.finance.chunk_classification.assertion"], [118, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"], [119, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"], [120, "module-sparknlp_jsl.finance.chunk_classification.deid"], [121, "module-sparknlp_jsl.finance.chunk_classification"], [122, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"], [123, "module-sparknlp_jsl.finance.chunk_classification.resolution.docmapper"], [124, "module-sparknlp_jsl.finance.chunk_classification.resolution"], [125, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"], [126, "module-sparknlp_jsl.finance.graph"], [127, "module-sparknlp_jsl.finance.graph.relation_extraction"], [128, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"], [129, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"], [130, "module-sparknlp_jsl.finance"], [131, "module-sparknlp_jsl.finance.seq_generation"], [132, "module-sparknlp_jsl.finance.seq_generation.qa_ner_generator"], [133, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"], [134, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"], [135, "module-sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier"], [136, "module-sparknlp_jsl.finance.sequence_classification"], [137, "module-sparknlp_jsl.finance.token_classification"], [138, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"], [139, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"], [140, "module-sparknlp_jsl.finance.token_classification.ner"], [141, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"], [142, "module-sparknlp_jsl.functions"], [143, "module-sparknlp_jsl"], [144, "module-sparknlp_jsl.internal"], [145, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"], [146, "module-sparknlp_jsl.legal.chunk_classification.assertion"], [147, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"], [148, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"], [149, "module-sparknlp_jsl.legal.chunk_classification.deid"], [150, "module-sparknlp_jsl.legal.chunk_classification"], [151, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"], [152, "module-sparknlp_jsl.legal.chunk_classification.resolution.docmapper"], [153, "module-sparknlp_jsl.legal.chunk_classification.resolution"], [154, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"], [155, "module-sparknlp_jsl.legal.graph"], [156, "module-sparknlp_jsl.legal.graph.relation_extraction"], [157, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"], [158, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"], [159, "module-sparknlp_jsl.legal"], [160, "module-sparknlp_jsl.legal.seq_generation"], [161, "module-sparknlp_jsl.legal.seq_generation.qa_ner_generator"], [162, "module-sparknlp_jsl.legal.sequence_classification"], [163, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"], [164, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"], [165, "module-sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier"], [166, "module-sparknlp_jsl.legal.token_classification"], [167, "module-sparknlp_jsl.legal.token_classification.ner"], [168, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"], [169, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"], [170, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"], [171, "module-sparknlp_jsl.modelTracer"], [172, "module-sparknlp_jsl.nlp_test.bias.bias_testing"], [173, "module-sparknlp_jsl.nlp_test.bias"], [174, "module-sparknlp_jsl.nlp_test"], [175, "module-sparknlp_jsl.nlp_test.noisy_labels"], [176, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing"], [177, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing"], [178, "module-sparknlp_jsl.nlp_test.noisy_labels.utils"], [179, "module-sparknlp_jsl.nlp_test.robustness"], [180, "module-sparknlp_jsl.nlp_test.robustness.robustness_fixing"], [181, "module-sparknlp_jsl.nlp_test.robustness.robustness_testing"], [182, "module-sparknlp_jsl.nlp_test.robustness.utils"], [183, "module-sparknlp_jsl.pretrained"], [184, "module-sparknlp_jsl.structured_deidentification"], [185, "module-sparknlp_jsl.text_to_documents_columns"], [186, "module-sparknlp_jsl.training"], [187, "module-sparknlp_jsl.training_log_parser"], [188, "module-sparknlp_jsl.updateModels"], [189, "module-sparknlp_jsl.util"], [190, "module-sparknlp_jsl.utils.alab_utils"], [191, "module-sparknlp_jsl.utils.conll_parse"], [192, "module-sparknlp_jsl.utils.deidentification_module"], [193, "module-sparknlp_jsl.utils.imports"], [194, "module-sparknlp_jsl.utils"], [195, "module-sparknlp_jsl.utils.licensed_annotator_type"], [196, "module-sparknlp_jsl.utils.log_parse"], [197, "module-sparknlp_jsl.utils.ner_utils"], [198, "module-sparknlp_jsl.utils.ocr_nlp_processor"], [199, "module-sparknlp_jsl.utils.ocr_utils"], [200, "module-sparknlp_jsl.utils.training_log_parser_utils"]], "persist_graph() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.persist_graph"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.persist_graph"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model": [[2, "module-sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model"]], "train() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.train"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.train"]], "sparknlp_jsl._tf_graph_builders.assertion_dl": [[3, "module-sparknlp_jsl._tf_graph_builders.assertion_dl"]], "basetfmodel (class in sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel"]], "build() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.build"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.build"]], "export_graph() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.export_graph"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.export_graph"]], "fit_dataset() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.fit_dataset"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.fit_dataset"]], "generate_batch() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.generate_batch"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.generate_batch"]], "get_graph() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.get_graph"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.get_graph"]], "is_built() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.is_built"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.is_built"]], "load_graph() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.load_graph"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.load_graph"]], "run_tests() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.run_tests"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel": [[4, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel"]], "build_params (in module sparknlp_jsl._tf_graph_builders.generic_classifier.build_model)": [[5, "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model.build_params"]], "model (in module sparknlp_jsl._tf_graph_builders.generic_classifier.build_model)": [[5, "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model.model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model": [[5, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.build_model"]], "genericclassifiermodel (class in sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel"]], "build() (genericclassifiermodel method)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel.build"], [29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel.build"]], "export_graph() (genericclassifiermodel method)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel.export_graph"], [29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel.export_graph"]], "run_tests() (genericclassifiermodel method)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel.run_tests"], [29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel.run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model": [[6, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier": [[7, "module-sparknlp_jsl._tf_graph_builders.generic_classifier"]], "progresstracker (class in sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker"]], "get_report_interval() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.get_report_interval"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.get_report_interval"]], "on_batch() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_batch"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_batch"]], "on_epoch() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_epoch"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_epoch"]], "on_training_end() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_training_end"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_training_end"]], "on_training_start() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_training_start"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_training_start"]], "print_progress() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.print_progress"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.print_progress"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker": [[8, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker"]], "acc (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.ACC"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.ACC"]], "datasets_dir (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.DATASETS_DIR"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.DATASETS_DIR"]], "default_model_node_names (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.DEFAULT_MODEL_NODE_NAMES"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.DEFAULT_MODEL_NODE_NAMES"]], "evaluate (run_types attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES.EVALUATE"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES.EVALUATE"]], "init (model_ops attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS.INIT"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS.INIT"]], "inputs (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.INPUTS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.INPUTS"]], "learning_rate (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.LEARNING_RATE"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.LEARNING_RATE"]], "logs_dir (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.LOGS_DIR"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.LOGS_DIR"]], "loss (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.LOSS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.LOSS"]], "models_dir (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.MODELS_DIR"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.MODELS_DIR"]], "model_ops (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS"]], "model_tensors (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS"]], "outputs (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.OUTPUTS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.OUTPUTS"]], "predict (run_types attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES.PREDICT"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES.PREDICT"]], "run_types (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES"]], "settings (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings"]], "targets (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.TARGETS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.TARGETS"]], "train (model_ops attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS.TRAIN"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS.TRAIN"]], "train (run_types attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES.TRAIN"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES.TRAIN"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings": [[9, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.settings"]], "assertiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder"]], "genericclassifiertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder"]], "logregclassifiertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.LogRegClassifierTFGraphBuilder"]], "nertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder"]], "relationextractiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.RelationExtractionTFGraphBuilder"]], "svmclassifiertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.SVMClassifierTFGraphBuilder"]], "tfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder"]], "tfgraphbuilderfactory (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory"]], "tensorflowaddonsneeded": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TensorflowAddonsNeeded"]], "wrongtfversion": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.WrongTFVersion"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.WrongTFVersion"]], "build() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.build"]], "build() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.build"]], "build() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.build"]], "build() (tfgraphbuilderfactory static method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory.build"]], "check_build_params() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.check_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.check_build_params"]], "get_build_param() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_build_param"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_build_param"]], "get_build_params() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_build_params"]], "get_build_params_with_defaults() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_build_params_with_defaults"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_build_params_with_defaults"]], "get_model_build_param_explanations() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (logregclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.LogRegClassifierTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (svmclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.SVMClassifierTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_params() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (logregclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.LogRegClassifierTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (svmclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.SVMClassifierTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_model_build_params"]], "get_model_filename() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.get_model_filename"]], "get_model_filename() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.get_model_filename"]], "get_model_filename() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.get_model_filename"]], "get_model_filename() (relationextractiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.RelationExtractionTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.RelationExtractionTFGraphBuilder.get_model_filename"]], "get_model_filename() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_model_filename"]], "get_models() (tfgraphbuilderfactory static method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory.get_models"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory.get_models"]], "print_model_params() (tfgraphbuilderfactory static method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory.print_model_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory.print_model_params"]], "sparknlp_jsl._tf_graph_builders.graph_builders": [[10, "module-sparknlp_jsl._tf_graph_builders.graph_builders"]], "supports_auto_file_name() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.supports_auto_file_name"]], "supports_auto_file_name() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.supports_auto_file_name"]], "supports_auto_file_name() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.supports_auto_file_name"]], "supports_auto_file_name() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders": [[11, "module-sparknlp_jsl._tf_graph_builders"]], "create_graph() (in module sparknlp_jsl._tf_graph_builders.ner_dl.create_graph)": [[12, "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph.create_graph"]], "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph": [[12, "module-sparknlp_jsl._tf_graph_builders.ner_dl.create_graph"]], "datasetencoder (class in sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder"]], "encode() (datasetencoder method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.encode"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.encode"]], "get_char_indexes() (datasetencoder method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.get_char_indexes"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.get_char_indexes"]], "normalize() (datasetencoder static method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.normalize"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.normalize"]], "shuffle() (datasetencoder method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.shuffle"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.shuffle"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder": [[13, "module-sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders.ner_dl": [[14, "module-sparknlp_jsl._tf_graph_builders.ner_dl"]], "nermodel (class in sparknlp_jsl._tf_graph_builders.ner_dl.ner_model)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel"]], "add_bilstm_char_repr() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_bilstm_char_repr"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_bilstm_char_repr"]], "add_cnn_char_repr() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_cnn_char_repr"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_cnn_char_repr"]], "add_context_repr() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_context_repr"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_context_repr"]], "add_inference_layer() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_inference_layer"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_inference_layer"]], "add_pretrained_word_embeddings() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_pretrained_word_embeddings"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_pretrained_word_embeddings"]], "add_training_op() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_training_op"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_training_op"]], "close() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.close"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.close"]], "fill() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.fill"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.fill"]], "get_char_ids() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_char_ids"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_char_ids"]], "get_from_batch() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_from_batch"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_from_batch"]], "get_sentence_lengths() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_sentence_lengths"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_sentence_lengths"]], "get_sentence_token_lengths() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_sentence_token_lengths"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_sentence_token_lengths"]], "get_softmax() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_softmax"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_softmax"]], "get_tag_ids() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_tag_ids"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_tag_ids"]], "get_word_embeddings() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_word_embeddings"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_word_embeddings"]], "get_word_lengths() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_word_lengths"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_word_lengths"]], "init_variables() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.init_variables"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.init_variables"]], "measure() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.measure"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.measure"]], "num_trues() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.num_trues"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.num_trues"]], "predict() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.predict"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.predict"]], "slice() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.slice"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.slice"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model": [[15, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model"]], "train() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.train"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.train"]], "nermodelsaver (class in sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver"]], "restore_tensorflow_state() (nermodelsaver static method)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver.restore_tensorflow_state"], [39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver.restore_tensorflow_state"]], "save() (nermodelsaver method)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver.save"], [39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver.save"]], "save_models() (nermodelsaver method)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver.save_models"], [39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver.save_models"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver": [[16, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver"]], "sentencegrouper (class in sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper)": [[17, "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper"]], "get_bucket_id() (sentencegrouper method)": [[17, "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper.get_bucket_id"], [40, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper.get_bucket_id"]], "slice() (sentencegrouper method)": [[17, "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper.slice"], [40, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper.slice"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper": [[17, "module-sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper"]], "embeddingwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper"]], "inputprojectionwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper"]], "outputprojectionwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper"]], "rnncell (in module sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.RNNCell"]], "call() (embeddingwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper.call"]], "call() (inputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper.call"]], "call() (outputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper.call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell": [[18, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell"]], "zero_state() (embeddingwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper.zero_state"]], "zero_state() (inputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper.zero_state"]], "zero_state() (outputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper.zero_state"]], "fusedrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell)": [[19, "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell.FusedRNNCell"]], "fusedrnncelladaptor (class in sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell)": [[19, "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell.FusedRNNCellAdaptor"]], "timereversedfusedrnn (class in sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell)": [[19, "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell.TimeReversedFusedRNN"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell": [[19, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell"]], "grublockcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell"]], "grublockcellv2 (class in sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCellV2"]], "layerrnncell (in module sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.LayerRNNCell"]], "build() (grublockcell method)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell.build"]], "build() (grublockcellv2 method)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCellV2.build"]], "call() (grublockcell method)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell.call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops": [[20, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib": [[21, "module-sparknlp_jsl._tf_graph_builders.tf2contrib"]], "tf (in module sparknlp_jsl._tf_graph_builders.tf2contrib)": [[21, "sparknlp_jsl._tf_graph_builders.tf2contrib.tf"]], "lstmblockcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell"]], "lstmblockfusedcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockFusedCell"]], "lstmblockwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper"]], "layerrnncell (in module sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LayerRNNCell"]], "build() (lstmblockcell method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell.build"]], "build() (lstmblockfusedcell method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockFusedCell.build"]], "call() (lstmblockcell method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell.call"]], "call() (lstmblockwrapper method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper.call"]], "num_units() (lstmblockwrapper method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper.num_units"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops": [[22, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn": [[23, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn"]], "stack_bidirectional_dynamic_rnn() (in module sparknlp_jsl._tf_graph_builders.tf2contrib.rnn)": [[23, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn.stack_bidirectional_dynamic_rnn"]], "stack_bidirectional_rnn() (in module sparknlp_jsl._tf_graph_builders.tf2contrib.rnn)": [[23, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn.stack_bidirectional_rnn"]], "attentioncellwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.AttentionCellWrapper"]], "bidirectionalgridlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.BidirectionalGridLSTMCell"]], "cfncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell"]], "compiledwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CompiledWrapper"]], "conv1dlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.Conv1DLSTMCell"]], "conv2dlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.Conv2DLSTMCell"]], "conv3dlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.Conv3DLSTMCell"]], "convlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.ConvLSTMCell"]], "coupledinputforgetgatelstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CoupledInputForgetGateLSTMCell"]], "glstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GLSTMCell"]], "gridlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GridLSTMCell"]], "highwaywrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.HighwayWrapper"]], "indrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell"]], "indygrucell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell"]], "indylstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell"]], "intersectionrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IntersectionRNNCell"]], "layernormbasiclstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormBasicLSTMCell"]], "layernormlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormLSTMCell"]], "minimalrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell"]], "nascell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell"]], "ntmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell"]], "ntmcontrollerstate (in module sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMControllerState"]], "phasedlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.PhasedLSTMCell"]], "srucell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell"]], "timefreqlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.TimeFreqLSTMCell"]], "ugrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.UGRNNCell"]], "weightnormlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.WeightNormLSTMCell"]], "build() (cfncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell.build"]], "build() (indrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell.build"]], "build() (indygrucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell.build"]], "build() (indylstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell.build"]], "build() (minimalrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell.build"]], "build() (nascell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell.build"]], "build() (ntmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell.build"]], "build() (srucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell.build"]], "call() (attentioncellwrapper method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.AttentionCellWrapper.call"]], "call() (bidirectionalgridlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.BidirectionalGridLSTMCell.call"]], "call() (cfncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell.call"]], "call() (convlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.ConvLSTMCell.call"]], "call() (coupledinputforgetgatelstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CoupledInputForgetGateLSTMCell.call"]], "call() (glstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GLSTMCell.call"]], "call() (gridlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GridLSTMCell.call"]], "call() (indrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell.call"]], "call() (indygrucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell.call"]], "call() (indylstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell.call"]], "call() (intersectionrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IntersectionRNNCell.call"]], "call() (layernormbasiclstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormBasicLSTMCell.call"]], "call() (layernormlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormLSTMCell.call"]], "call() (minimalrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell.call"]], "call() (nascell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell.call"]], "call() (ntmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell.call"]], "call() (phasedlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.PhasedLSTMCell.call"]], "call() (srucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell.call"]], "call() (timefreqlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.TimeFreqLSTMCell.call"]], "call() (ugrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.UGRNNCell.call"]], "call() (weightnormlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.WeightNormLSTMCell.call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell": [[24, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell"]], "zero_state() (compiledwrapper method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CompiledWrapper.zero_state"]], "zero_state() (highwaywrapper method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.HighwayWrapper.zero_state"]], "zero_state() (ntmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell.zero_state"]], "assertionmodel (class in sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model)": [[25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model": [[25, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl": [[26, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl"]], "basetfmodel (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel)": [[27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel": [[27, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel"]], "build_params (in module sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model)": [[28, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model.build_params"]], "model (in module sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model)": [[28, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model.model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model": [[28, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model"]], "genericclassifiermodel (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model)": [[29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model": [[29, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier": [[30, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier"]], "progresstracker (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker)": [[31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker": [[31, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker"]], "model_ops (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS"]], "model_tensors (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS"]], "run_types (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES"]], "settings (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings": [[32, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings"]], "assertiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder"]], "genericclassifiertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder"]], "nertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder"]], "relationextractiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.RelationExtractionTFGraphBuilder"]], "tfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder"]], "tfgraphbuilderfactory (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders": [[33, "module-sparknlp_jsl._tf_graph_builders_1x.graph_builders"]], "sparknlp_jsl._tf_graph_builders_1x": [[34, "module-sparknlp_jsl._tf_graph_builders_1x"]], "create_graph() (in module sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph)": [[35, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph.create_graph"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph": [[35, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph"]], "datasetencoder (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder)": [[36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder": [[36, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl": [[37, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl"]], "nermodel (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model)": [[38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model": [[38, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model"]], "nermodelsaver (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver)": [[39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver": [[39, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver"]], "sentencegrouper (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper)": [[40, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper": [[40, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper"]], "annotationlab (class in sparknlp_jsl.alab)": [[41, "sparknlp_jsl.alab.AnnotationLab"]], "create_project() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.create_project"]], "delete_project() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.delete_project"]], "delete_tasks() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.delete_tasks"]], "generate_preannotations() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.generate_preannotations"]], "get_iaa_metrics() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_IAA_metrics"]], "get_all_projects() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_all_projects"]], "get_annotations() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_annotations"]], "get_assertion_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_assertion_data"]], "get_classification_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_classification_data"]], "get_conll_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_conll_data"]], "get_project_config() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_project_config"]], "get_relation_extraction_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_relation_extraction_data"]], "set_credentials() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.set_credentials"]], "set_project_config() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.set_project_config"]], "sparknlp_jsl.alab": [[41, "module-sparknlp_jsl.alab"]], "upload_preannotations() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.upload_preannotations"]], "upload_tasks() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.upload_tasks"]], "annotationmerger (class in sparknlp_jsl.annotator.annotation_merger)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger"]], "inputannotatortypes (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.inputAnnotatorTypes"]], "inputtype (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.inputType"]], "name (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.name"]], "outputannotatortype (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.outputAnnotatorType"]], "setinputcols() (annotationmerger method)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setInputCols"]], "setinputtype() (annotationmerger method)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setInputType"]], "skiplpinputcolsvalidation (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.annotation_merger": [[42, "module-sparknlp_jsl.annotator.annotation_merger"]], "assertiondlapproach (class in sparknlp_jsl.annotator.assertion.assertiondl)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.annotator.assertion.assertiondl)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel"]], "batchsize (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.batchSize"]], "classes (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.classes"]], "configprotobytes (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.configProtoBytes"]], "configprotobytes (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.configProtoBytes"]], "dropout (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.dropout"]], "enableoutputlogs (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.enableOutputLogs"]], "endcol (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.endCol"]], "epochs (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.epochs"]], "graphfile (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.graphFile"]], "graphfolder (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.graphFolder"]], "includeconfidence (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.includeConfidence"]], "includeconfidence (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.includeConfidence"]], "inputannotatortypes (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.inputAnnotatorTypes"]], "label (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.label"]], "learningrate (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.learningRate"]], "maxsentlen (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.maxSentLen"]], "maxsentlen (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.maxSentLen"]], "name (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.name"], [116, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.name"], [145, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.name"]], "outputannotatortype (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.outputAnnotatorType"]], "outputannotatortype (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.outputAnnotatorType"]], "outputlogspath (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.outputLogsPath"]], "pretrained() (assertiondlmodel static method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.pretrained"], [116, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.pretrained"], [145, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.pretrained"]], "scopewindow (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.scopeWindow"]], "scopewindow (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.scopeWindow"]], "setbatchsize() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setBatchSize"]], "setconfigprotobytes() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setConfigProtoBytes"]], "setdropout() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setDropout"]], "setenableoutputlogs() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEnableOutputLogs"]], "setendcol() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEndCol"]], "setepochs() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEpochs"]], "setgraphfile() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setGraphFile"]], "setgraphfolder() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setGraphFolder"]], "setincludeconfidence() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setIncludeConfidence"]], "setincludeconfidence() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setIncludeConfidence"]], "setlabelcol() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setLabelCol"]], "setlearningrate() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setLearningRate"]], "setmaxsentlen() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setMaxSentLen"]], "setoutputlogspath() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setOutputLogsPath"]], "setscopewindow() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setScopeWindow"]], "setscopewindow() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setScopeWindow"]], "setstartcol() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setStartCol"]], "settestdataset() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setTestDataset"]], "setvalidationsplit() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setValidationSplit"]], "setverbose() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setVerbose"]], "sparknlp_jsl.annotator.assertion.assertiondl": [[43, "module-sparknlp_jsl.annotator.assertion.assertionDL"]], "startcol (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.startCol"]], "targetnerlabels (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.targetNerLabels"]], "testdataset (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.testDataset"]], "validationsplit (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.validationSplit"]], "verbose (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.verbose"]], "assertionchunkconverter (class in sparknlp_jsl.annotator.assertion.assertion_chunk_converter)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter"]], "chunkbegincol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.chunkBeginCol"]], "chunkendcol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.chunkEndCol"]], "chunktextcol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.chunkTextCol"]], "inputannotatortypes (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.inputAnnotatorTypes"]], "inputcols (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.inputCols"]], "name (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.name"]], "outputannotatortype (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputAnnotatorType"]], "outputcol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputCol"]], "outputtokenbegincol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputTokenBeginCol"]], "outputtokenendcol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputTokenEndCol"]], "setchunkbegincol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setChunkBeginCol"]], "setchunkendcol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setChunkEndCol"]], "setchunktextcol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setChunkTextCol"]], "setinputcols() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setInputCols"]], "setoutputcol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setOutputCol"]], "setoutputtokenbegincol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setOutputTokenBeginCol"]], "setoutputtokenendcol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setOutputTokenEndCol"]], "setparams() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setParams"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter": [[44, "module-sparknlp_jsl.annotator.assertion.assertion_chunk_converter"]], "assertionlogregapproach (class in sparknlp_jsl.annotator.assertion.assertion_dl_reg)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach"]], "assertionlogregmodel (class in sparknlp_jsl.annotator.assertion.assertion_dl_reg)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel"]], "afterparam (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.afterParam"]], "afterparam (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.afterParam"]], "beforeparam (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.beforeParam"]], "beforeparam (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.beforeParam"]], "enetparam (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.eNetParam"]], "endcol (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.endCol"]], "endcol (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.endCol"]], "inputannotatortypes (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.inputAnnotatorTypes"]], "inputannotatortypes (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.inputAnnotatorTypes"]], "label (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.label"]], "maxiter (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.maxIter"]], "name (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.name"]], "nercol (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.nerCol"]], "nercol (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.nerCol"]], "outputannotatortype (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.outputAnnotatorType"]], "outputannotatortype (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.outputAnnotatorType"]], "pretrained() (assertionlogregmodel static method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.pretrained"]], "regparam (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.regParam"]], "setafter() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setAfter"]], "setbefore() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setBefore"]], "setendcol() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setEndCol"]], "setenet() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setEnet"]], "setlabelcol() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setLabelCol"]], "setmaxiter() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setMaxIter"]], "setnercol() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setNerCol"]], "setreg() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setReg"]], "setstartcol() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setStartCol"]], "settargetnerlabels() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setTargetNerLabels"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[45, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"]], "startcol (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.startCol"]], "startcol (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.startCol"]], "targetnerlabels (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.targetNerLabels"]], "targetnerlabels (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.targetNerLabels"]], "sparknlp_jsl.annotator.assertion": [[46, "module-sparknlp_jsl.annotator.assertion"]], "assertionfilterer (class in sparknlp_jsl.annotator.chunker.assertion_filterer)": [[47, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer"]], "casesensitive (assertionfilterer attribute)": [[47, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.caseSensitive"]], "criteria (assertionfilterer attribute)": [[47, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.criteria"]], "entitiesconfidence (assertionfilterer attribute)": [[47, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.entitiesConfidence"]], "inputannotatortypes (assertionfilterer attribute)": [[47, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.inputAnnotatorTypes"]], "name (assertionfilterer attribute)": [[47, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.name"]], "outputannotatortype (assertionfilterer attribute)": [[47, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.outputAnnotatorType"]], "regex (assertionfilterer attribute)": [[47, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.regex"]], "setcasesensitive() (assertionfilterer method)": [[47, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setCaseSensitive"]], "setcriteria() (assertionfilterer method)": [[47, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setCriteria"]], "setregex() (assertionfilterer method)": [[47, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setRegex"]], "setwhitelist() (assertionfilterer method)": [[47, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setWhiteList"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[47, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"]], "whitelist (assertionfilterer attribute)": [[47, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.whiteList"]], "chunkconverter (class in sparknlp_jsl.annotator.chunker.chunk_converter)": [[48, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter"]], "inputannotatortypes (chunkconverter attribute)": [[48, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.inputAnnotatorTypes"]], "name (chunkconverter attribute)": [[48, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.name"]], "outputannotatortype (chunkconverter attribute)": [[48, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.outputAnnotatorType"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[48, "module-sparknlp_jsl.annotator.chunker.chunk_converter"]], "chunkkeyphraseextraction (class in sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction"]], "concatenatesentences (chunkkeyphraseextraction attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.concatenateSentences"]], "divergence (chunkkeyphraseextraction attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.divergence"]], "documentlevelprocessing (chunkkeyphraseextraction attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.documentLevelProcessing"]], "droppunctuation (chunkkeyphraseextraction attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.dropPunctuation"]], "inputannotatortypes (chunkkeyphraseextraction attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.inputAnnotatorTypes"]], "name (chunkkeyphraseextraction attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.name"]], "outputannotatortype (chunkkeyphraseextraction attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.outputAnnotatorType"]], "pretrained() (chunkkeyphraseextraction static method)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.pretrained"]], "selectmostdifferent (chunkkeyphraseextraction attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.selectMostDifferent"]], "setconcatenatesentences() (chunkkeyphraseextraction method)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setConcatenateSentences"]], "setdivergence() (chunkkeyphraseextraction method)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDivergence"]], "setdocumentlevelprocessing() (chunkkeyphraseextraction method)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDocumentLevelProcessing"]], "setdroppunctuation() (chunkkeyphraseextraction method)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDropPunctuation"]], "setselectmostdifferent() (chunkkeyphraseextraction method)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setSelectMostDifferent"]], "settopn() (chunkkeyphraseextraction method)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setTopN"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[49, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"]], "topn (chunkkeyphraseextraction attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.topN"]], "chunksentencesplitter (class in sparknlp_jsl.annotator.chunker.chunk_sentence_splitter)": [[50, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter"]], "defaultentity (chunksentencesplitter attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.defaultEntity"]], "groupbysentences (chunksentencesplitter attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.groupBySentences"]], "inputannotatortypes (chunksentencesplitter attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.inputAnnotatorTypes"]], "insertchunk (chunksentencesplitter attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.insertChunk"]], "name (chunksentencesplitter attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.name"]], "outputannotatortype (chunksentencesplitter attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.outputAnnotatorType"]], "setdefaultentity() (chunksentencesplitter method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setDefaultEntity"]], "setgroupbysentences() (chunksentencesplitter method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setGroupBySentences"]], "setinsertchunk() (chunksentencesplitter method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setInsertChunk"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[50, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"]], "chunkfilterer (class in sparknlp_jsl.annotator.chunker.chunker_filterer)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer"]], "chunkfiltererapproach (class in sparknlp_jsl.annotator.chunker.chunker_filterer)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach"]], "blacklist (chunkfilterer attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.blackList"]], "blacklist (chunkfiltererapproach attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.blackList"]], "criteria (chunkfilterer attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.criteria"]], "criteria (chunkfiltererapproach attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.criteria"]], "entitiesconfidenceresource (chunkfiltererapproach attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.entitiesConfidenceResource"]], "filtervalue (chunkfilterer attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.filterValue"]], "filtervalue (chunkfiltererapproach attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.filterValue"]], "inputannotatortypes (chunkfilterer attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.inputAnnotatorTypes"]], "inputannotatortypes (chunkfiltererapproach attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.inputAnnotatorTypes"]], "name (chunkfilterer attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.name"]], "name (chunkfiltererapproach attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.name"]], "outputannotatortype (chunkfilterer attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.outputAnnotatorType"]], "outputannotatortype (chunkfiltererapproach attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.outputAnnotatorType"]], "regex (chunkfilterer attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.regex"]], "regex (chunkfiltererapproach attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.regex"]], "setblacklist() (chunkfilterer method)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setBlackList"]], "setblacklist() (chunkfiltererapproach method)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setBlackList"]], "setcriteria() (chunkfilterer method)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setCriteria"]], "setcriteria() (chunkfiltererapproach method)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setCriteria"]], "setentitiesconfidenceresource() (chunkfiltererapproach method)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setEntitiesConfidenceResource"]], "setfilterentity() (chunkfilterer method)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setFilterEntity"]], "setfilterentity() (chunkfiltererapproach method)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setFilterEntity"]], "setregex() (chunkfilterer method)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setRegex"]], "setregex() (chunkfiltererapproach method)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setRegex"]], "setwhitelist() (chunkfilterer method)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setWhiteList"]], "setwhitelist() (chunkfiltererapproach method)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setWhiteList"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[51, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"]], "whitelist (chunkfilterer attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.whiteList"]], "whitelist (chunkfiltererapproach attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.whiteList"]], "chunkmapperapproach (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach"]], "chunkmapperfuzzymatchingparams (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams"]], "chunkmappermodel (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel"]], "commonchunkmapperparams (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams"]], "allowmultitokenchunk (commonchunkmapperparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.allowMultiTokenChunk"]], "dictionary (chunkmapperapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.dictionary"]], "enablecharfingerprintmatching (chunkmapperfuzzymatchingparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.enableCharFingerprintMatching"]], "enablefuzzymatching (chunkmapperfuzzymatchingparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.enableFuzzyMatching"]], "enabletokenfingerprintmatching (chunkmapperfuzzymatchingparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.enableTokenFingerprintMatching"]], "fuzzydistancescalingmode (chunkmapperfuzzymatchingparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.fuzzyDistanceScalingMode"]], "fuzzymatchingdistancethresholds (chunkmapperfuzzymatchingparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.fuzzyMatchingDistanceThresholds"]], "fuzzymatchingdistances (chunkmapperfuzzymatchingparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.fuzzyMatchingDistances"]], "inputannotatortypes (chunkmapperapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.inputAnnotatorTypes"]], "inputannotatortypes (chunkmappermodel attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.inputAnnotatorTypes"]], "lowercase (commonchunkmapperparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.lowerCase"]], "maxcharngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxCharNgramFingerprint"]], "maxtokenngramdroppingcharsratio (chunkmapperfuzzymatchingparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramDroppingCharsRatio"]], "maxtokenngramdroppingoperator (chunkmapperfuzzymatchingparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramDroppingOperator"]], "maxtokenngramdroppingtokens (chunkmapperfuzzymatchingparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramDroppingTokens"]], "maxtokenngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramFingerprint"]], "mincharngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.minCharNgramFingerprint"]], "mintokenngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.minTokenNgramFingerprint"]], "multivaluesrelations (commonchunkmapperparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.multivaluesRelations"]], "name (chunkmapperapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.name"], [122, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.name"], [151, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.name"]], "name (chunkmappermodel attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.name"], [122, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.name"], [151, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.name"]], "outputannotatortype (chunkmapperapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.outputAnnotatorType"]], "outputannotatortype (chunkmappermodel attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.outputAnnotatorType"]], "pretrained() (chunkmappermodel static method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.pretrained"], [122, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.pretrained"], [151, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.pretrained"]], "rel (commonchunkmapperparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.rel"]], "rels (commonchunkmapperparams attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.rels"]], "setallowmultitokenchunk() (commonchunkmapperparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setAllowMultiTokenChunk"]], "setdictionary() (chunkmapperapproach method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setDictionary"]], "setenablecharfingerprintmatching() (chunkmapperfuzzymatchingparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setEnableCharFingerprintMatching"]], "setenablefuzzymatching() (chunkmapperfuzzymatchingparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setEnableFuzzyMatching"]], "setenabletokenfingerprintmatching() (chunkmapperfuzzymatchingparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setEnableTokenFingerprintMatching"]], "setfuzzydistancescalingmode() (chunkmapperfuzzymatchingparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setFuzzyDistanceScalingMode"]], "setfuzzymatchingdistancethresholds() (chunkmapperfuzzymatchingparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setFuzzyMatchingDistanceThresholds"]], "setfuzzymatchingdistances() (chunkmapperfuzzymatchingparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setFuzzyMatchingDistances"]], "setlowercase() (commonchunkmapperparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setLowerCase"]], "setmaxcharngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxCharNgramFingerprint"]], "setmaxtokenngramdroppingcharsratio() (chunkmapperfuzzymatchingparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramDroppingCharsRatio"]], "setmaxtokenngramdroppingoperator() (chunkmapperfuzzymatchingparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramDroppingOperator"]], "setmaxtokenngramdroppingtokens() (chunkmapperfuzzymatchingparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramDroppingTokens"]], "setmaxtokenngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramFingerprint"]], "setmincharngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMinCharNgramFingerprint"]], "setmintokenngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMinTokenNgramFingerprint"]], "setmultivaluesrelations() (commonchunkmapperparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setMultivaluesRelations"]], "setrel() (commonchunkmapperparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setRel"]], "setrels() (commonchunkmapperparams method)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setRels"]], "skiplpinputcolsvalidation (chunkmapperapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (chunkmappermodel attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[52, "module-sparknlp_jsl.annotator.chunker.chunkmapper"]], "chunkmapperfilterer (class in sparknlp_jsl.annotator.chunker.chunkmapper_filterer)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer"]], "inputannotatortypes (chunkmapperfilterer attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.inputAnnotatorTypes"]], "name (chunkmapperfilterer attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.name"]], "outputannotatortype (chunkmapperfilterer attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.outputAnnotatorType"]], "returncriteria (chunkmapperfilterer attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.returnCriteria"]], "setreturncriteria() (chunkmapperfilterer method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setReturnCriteria"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[53, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"]], "docmapperapproach (class in sparknlp_jsl.annotator.chunker.docmapper)": [[54, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach"]], "docmappermodel (class in sparknlp_jsl.annotator.chunker.docmapper)": [[54, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel"]], "dictionary (docmapperapproach attribute)": [[54, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.dictionary"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.dictionary"], [152, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.dictionary"]], "inputannotatortypes (docmapperapproach attribute)": [[54, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.inputAnnotatorTypes"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.inputAnnotatorTypes"], [152, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.inputAnnotatorTypes"]], "inputannotatortypes (docmappermodel attribute)": [[54, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.inputAnnotatorTypes"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.inputAnnotatorTypes"], [152, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.inputAnnotatorTypes"]], "name (docmapperapproach attribute)": [[54, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.name"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.name"], [152, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.name"]], "name (docmappermodel attribute)": [[54, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.name"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.name"], [152, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.name"]], "outputannotatortype (docmapperapproach attribute)": [[54, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.outputAnnotatorType"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.outputAnnotatorType"], [152, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.outputAnnotatorType"]], "outputannotatortype (docmappermodel attribute)": [[54, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.outputAnnotatorType"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.outputAnnotatorType"], [152, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.outputAnnotatorType"]], "pretrained() (docmappermodel static method)": [[54, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.pretrained"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.pretrained"], [152, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.pretrained"]], "setdictionary() (docmapperapproach method)": [[54, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setDictionary"], [123, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setDictionary"], [152, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setDictionary"]], "sparknlp_jsl.annotator.chunker.docmapper": [[54, "module-sparknlp_jsl.annotator.chunker.docmapper"]], "sparknlp_jsl.annotator.chunker": [[55, "module-sparknlp_jsl.annotator.chunker"]], "documentlogregclassifierapproach (class in sparknlp_jsl.annotator.classification.document_log_classifier)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach"]], "documentlogregclassifiermodel (class in sparknlp_jsl.annotator.classification.document_log_classifier)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel"]], "classificationmodel (documentlogregclassifiermodel attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.classificationModel"]], "classificationmodelpath (documentlogregclassifierapproach attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.classificationModelPath"]], "fitintercept (documentlogregclassifierapproach attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.fitIntercept"]], "inputannotatortypes (documentlogregclassifierapproach attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.inputAnnotatorTypes"]], "labelcol (documentlogregclassifierapproach attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.labelCol"]], "labels (documentlogregclassifierapproach attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.labels"]], "labels (documentlogregclassifiermodel attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.labels"]], "maxiter (documentlogregclassifierapproach attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.maxIter"]], "mergechunks (documentlogregclassifiermodel attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.mergeChunks"]], "name (documentlogregclassifiermodel attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.name"]], "outputannotatortype (documentlogregclassifierapproach attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.outputAnnotatorType"]], "outputannotatortype (documentlogregclassifiermodel attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.outputAnnotatorType"]], "pretrained() (documentlogregclassifiermodel static method)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.pretrained"]], "setclassificationmodel() (documentlogregclassifiermodel method)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setClassificationModel"]], "setclassificationmodelpath() (documentlogregclassifierapproach method)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setClassificationModelPath"]], "setfitintercept() (documentlogregclassifierapproach method)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setFitIntercept"]], "setlabelcolumn() (documentlogregclassifierapproach method)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setLabelColumn"]], "setlabels() (documentlogregclassifierapproach method)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setLabels"]], "setlabels() (documentlogregclassifiermodel method)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setLabels"]], "setmaxiter() (documentlogregclassifierapproach method)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setMaxIter"]], "setmergechunks() (documentlogregclassifiermodel method)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setMergeChunks"]], "settol() (documentlogregclassifierapproach method)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setTol"]], "setvectorizationmodel() (documentlogregclassifiermodel method)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setVectorizationModel"]], "setvectorizationmodelpath() (documentlogregclassifierapproach method)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setVectorizationModelPath"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[56, "module-sparknlp_jsl.annotator.classification.document_log_classifier"]], "tol (documentlogregclassifierapproach attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.tol"]], "vectorizationmodel (documentlogregclassifiermodel attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.vectorizationModel"]], "vectorizationmodelpath (documentlogregclassifierapproach attribute)": [[56, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.vectorizationModelPath"]], "documentmlclassifierapproach (class in sparknlp_jsl.annotator.classification.document_ml_classifier)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach"]], "documentmlclassifiermodel (class in sparknlp_jsl.annotator.classification.document_ml_classifier)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel"]], "documentmlclassifierparams (class in sparknlp_jsl.annotator.classification.document_ml_classifier)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams"]], "classificationmodel (documentmlclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.classificationModel"]], "classificationmodelclass (documentmlclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.classificationModelClass"]], "classificationmodelpath (documentmlclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.classificationModelPath"]], "fitintercept (documentmlclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.fitIntercept"]], "inputannotatortypes (documentmlclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (documentmlclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.inputAnnotatorTypes"]], "labelcol (documentmlclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.labelCol"]], "labels (documentmlclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.labels"]], "labels (documentmlclassifierparams attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.labels"]], "maxiter (documentmlclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.maxIter"]], "maxtokenngram (documentmlclassifierparams attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.maxTokenNgram"]], "mergechunks (documentmlclassifierparams attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.mergeChunks"]], "mintokenngram (documentmlclassifierparams attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.minTokenNgram"]], "name (documentmlclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.name"]], "outputannotatortype (documentmlclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.outputAnnotatorType"]], "outputannotatortype (documentmlclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.outputAnnotatorType"]], "pretrained() (documentmlclassifiermodel static method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.pretrained"]], "setclassificationmodel() (documentmlclassifiermodel method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setClassificationModel"]], "setclassificationmodelclass() (documentmlclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setClassificationModelClass"]], "setclassificationmodelpath() (documentmlclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setClassificationModelPath"]], "setfitintercept() (documentmlclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setFitIntercept"]], "setlabelcol() (documentmlclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setLabelCol"]], "setlabels() (documentmlclassifiermodel method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setLabels"]], "setlabels() (documentmlclassifierparams method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.setLabels"]], "setmaxiter() (documentmlclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMaxIter"]], "setmaxtokenngram() (documentmlclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMaxTokenNgram"]], "setmergechunks() (documentmlclassifierparams method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.setMergeChunks"]], "setmintokenngram() (documentmlclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMinTokenNgram"]], "settol() (documentmlclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setTol"]], "setvectorizationmodel() (documentmlclassifiermodel method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setVectorizationModel"]], "setvectorizationmodelpath() (documentmlclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setVectorizationModelPath"]], "sparknlp_jsl.annotator.classification.document_ml_classifier": [[57, "module-sparknlp_jsl.annotator.classification.document_ml_classifier"]], "tol (documentmlclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.tol"]], "vectorizationmodel (documentmlclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.vectorizationModel"]], "vectorizationmodelpath (documentmlclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.vectorizationModelPath"]], "genericlogregclassifierapproach (class in sparknlp_jsl.annotator.classification.generic_log_reg_classifier)": [[58, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach"]], "genericlogregclassifiermodel (class in sparknlp_jsl.annotator.classification.generic_log_reg_classifier)": [[58, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel"]], "inputannotatortypes (genericlogregclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (genericlogregclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.inputAnnotatorTypes"]], "name (genericlogregclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.name"]], "name (genericlogregclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.name"]], "outputannotatortype (genericlogregclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.outputAnnotatorType"]], "outputannotatortype (genericlogregclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.outputAnnotatorType"]], "pretrained() (genericlogregclassifiermodel static method)": [[58, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.pretrained"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier": [[58, "module-sparknlp_jsl.annotator.classification.generic_log_reg_classifier"]], "genericsvmclassifierapproach (class in sparknlp_jsl.annotator.classification.generic_svm_classifier)": [[59, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach"]], "genericsvmclassifiermodel (class in sparknlp_jsl.annotator.classification.generic_svm_classifier)": [[59, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel"]], "inputannotatortypes (genericsvmclassifierapproach attribute)": [[59, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (genericsvmclassifiermodel attribute)": [[59, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.inputAnnotatorTypes"]], "name (genericsvmclassifierapproach attribute)": [[59, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.name"]], "name (genericsvmclassifiermodel attribute)": [[59, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.name"]], "outputannotatortype (genericsvmclassifierapproach attribute)": [[59, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.outputAnnotatorType"]], "outputannotatortype (genericsvmclassifiermodel attribute)": [[59, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.outputAnnotatorType"]], "pretrained() (genericsvmclassifiermodel static method)": [[59, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.pretrained"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier": [[59, "module-sparknlp_jsl.annotator.classification.generic_svm_classifier"]], "sparknlp_jsl.annotator.classification": [[60, "module-sparknlp_jsl.annotator.classification"]], "medicalbertforsequenceclassification (class in sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification)": [[61, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification"]], "coalescesentences (medicalbertforsequenceclassification attribute)": [[61, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.coalesceSentences"]], "configprotobytes (medicalbertforsequenceclassification attribute)": [[61, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.configProtoBytes"]], "getclasses() (medicalbertforsequenceclassification method)": [[61, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getClasses"]], "inputannotatortypes (medicalbertforsequenceclassification attribute)": [[61, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (medicalbertforsequenceclassification static method)": [[61, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (medicalbertforsequenceclassification static method)": [[61, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.loadSavedModelOpenSource"]], "maxsentencelength (medicalbertforsequenceclassification attribute)": [[61, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.maxSentenceLength"]], "name (medicalbertforsequenceclassification attribute)": [[61, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.name"]], "outputannotatortype (medicalbertforsequenceclassification attribute)": [[61, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.outputAnnotatorType"]], "pretrained() (medicalbertforsequenceclassification static method)": [[61, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.pretrained"]], "setcoalescesentences() (medicalbertforsequenceclassification method)": [[61, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (medicalbertforsequenceclassification method)": [[61, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setConfigProtoBytes"]], "setmaxsentencelength() (medicalbertforsequenceclassification method)": [[61, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[61, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"]], "medicalbertfortokenclassifier (class in sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier"]], "configprotobytes (medicalbertfortokenclassifier attribute)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.configProtoBytes"]], "getclasses() (medicalbertfortokenclassifier method)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getClasses"]], "inputannotatortypes (medicalbertfortokenclassifier attribute)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.inputAnnotatorTypes"]], "loadsavedmodel() (medicalbertfortokenclassifier static method)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.loadSavedModel"]], "loadsavedmodelopensource() (medicalbertfortokenclassifier static method)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.loadSavedModelOpenSource"]], "maxsentencelength (medicalbertfortokenclassifier attribute)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.maxSentenceLength"]], "name (medicalbertfortokenclassifier attribute)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.name"]], "outputannotatortype (medicalbertfortokenclassifier attribute)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.outputAnnotatorType"]], "pretrained() (medicalbertfortokenclassifier static method)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.pretrained"]], "setconfigprotobytes() (medicalbertfortokenclassifier method)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setConfigProtoBytes"]], "setmaxsentencelength() (medicalbertfortokenclassifier method)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[62, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"]], "medicaldistilbertforsequenceclassification (class in sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification)": [[63, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification"]], "coalescesentences (medicaldistilbertforsequenceclassification attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.coalesceSentences"]], "configprotobytes (medicaldistilbertforsequenceclassification attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.configProtoBytes"]], "getclasses() (medicaldistilbertforsequenceclassification method)": [[63, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getClasses"]], "inputannotatortypes (medicaldistilbertforsequenceclassification attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (medicaldistilbertforsequenceclassification static method)": [[63, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (medicaldistilbertforsequenceclassification static method)": [[63, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.loadSavedModelOpenSource"]], "maxsentencelength (medicaldistilbertforsequenceclassification attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.maxSentenceLength"]], "name (medicaldistilbertforsequenceclassification attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.name"]], "outputannotatortype (medicaldistilbertforsequenceclassification attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.outputAnnotatorType"]], "pretrained() (medicaldistilbertforsequenceclassification static method)": [[63, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (medicaldistilbertforsequenceclassification method)": [[63, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (medicaldistilbertforsequenceclassification method)": [[63, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setConfigProtoBytes"]], "setmaxsentencelength() (medicaldistilbertforsequenceclassification method)": [[63, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[63, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"]], "contextualparserapproach (class in sparknlp_jsl.annotator.context.contextual_parser)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach"]], "contextualparsermodel (class in sparknlp_jsl.annotator.context.contextual_parser)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel"]], "casesensitive (contextualparserapproach attribute)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.caseSensitive"]], "casesensitive (contextualparsermodel attribute)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.caseSensitive"]], "completecontextmatch (contextualparserapproach attribute)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.completeContextMatch"]], "dictionary (contextualparserapproach attribute)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.dictionary"]], "inputannotatortypes (contextualparserapproach attribute)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.inputAnnotatorTypes"]], "inputannotatortypes (contextualparsermodel attribute)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.inputAnnotatorTypes"]], "jsonpath (contextualparserapproach attribute)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.jsonPath"]], "optionalcontextrules (contextualparserapproach attribute)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.optionalContextRules"]], "optionalcontextrules (contextualparsermodel attribute)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.optionalContextRules"]], "outputannotatortype (contextualparserapproach attribute)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.outputAnnotatorType"]], "outputannotatortype (contextualparsermodel attribute)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.outputAnnotatorType"]], "prefixandsuffixmatch (contextualparserapproach attribute)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.prefixAndSuffixMatch"]], "prefixandsuffixmatch (contextualparsermodel attribute)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.prefixAndSuffixMatch"]], "setcasesensitive() (contextualparserapproach method)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setCaseSensitive"]], "setcasesensitive() (contextualparsermodel method)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setCaseSensitive"]], "setcompletecontextmatch() (contextualparserapproach method)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setCompleteContextMatch"]], "setdictionary() (contextualparserapproach method)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setDictionary"]], "setjsonpath() (contextualparserapproach method)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setJsonPath"]], "setoptionalcontextrules() (contextualparserapproach method)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setOptionalContextRules"]], "setoptionalcontextrules() (contextualparsermodel method)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setOptionalContextRules"]], "setprefixandsuffixmatch() (contextualparserapproach method)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setPrefixAndSuffixMatch"]], "setprefixandsuffixmatch() (contextualparsermodel method)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setPrefixAndSuffixMatch"]], "setshortestcontextmatch() (contextualparserapproach method)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setShortestContextMatch"]], "setshortestcontextmatch() (contextualparsermodel method)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setShortestContextMatch"]], "shortestcontextmatch (contextualparserapproach attribute)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.shortestContextMatch"]], "shortestcontextmatch (contextualparsermodel attribute)": [[64, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.shortestContextMatch"]], "sparknlp_jsl.annotator.context.contextual_parser": [[64, "module-sparknlp_jsl.annotator.context.contextual_parser"]], "sparknlp_jsl.annotator.context": [[65, "module-sparknlp_jsl.annotator.context"]], "deidentification (class in sparknlp_jsl.annotator.deid.deidentification)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.annotator.deid.deidentification)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel"]], "ageranges (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.ageRanges"]], "ageranges (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.ageRanges"]], "blacklist (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.blackList"]], "blacklist (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.blackList"]], "consistentobfuscation (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.consistentObfuscation"]], "consistentobfuscation (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.consistentObfuscation"]], "dateformats (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.dateFormats"]], "dateformats (deidentificationmodel attribute)": [[66, "id0"], [66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.dateFormats"]], "datetag (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.dateTag"]], "datetag (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.dateTag"]], "datetoyear (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.dateToYear"]], "datetoyear (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.dateToYear"]], "days (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.days"]], "days (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.days"]], "fixedmasklength (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.fixedMaskLength"]], "fixedmasklength (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.fixedMaskLength"]], "getblacklist() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getBlackList"]], "getblacklist() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getBlackList"]], "getregexentities() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getRegexEntities"]], "ignoreregex (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.ignoreRegex"]], "ignoreregex (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.ignoreRegex"]], "inputannotatortypes (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.inputAnnotatorTypes"]], "inputannotatortypes (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.inputAnnotatorTypes"]], "israndomdatedisplacement (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.isRandomDateDisplacement"]], "israndomdatedisplacement (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.isRandomDateDisplacement"]], "language (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.language"]], "language (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.language"]], "mappingscolumn (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.mappingsColumn"]], "mappingscolumn (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.mappingsColumn"]], "maskingpolicy (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.maskingPolicy"]], "maskingpolicy (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.maskingPolicy"]], "minyear (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.minYear"]], "minyear (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.minYear"]], "mode (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.mode"]], "mode (deidentificationmodel attribute)": [[66, "id13"], [66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.mode"]], "name (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.name"], [118, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.name"], [147, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.name"]], "name (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.name"], [118, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.name"], [147, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.name"]], "obfuscatedate (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateDate"]], "obfuscatedate (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.obfuscateDate"]], "obfuscatereffile (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateRefFile"]], "obfuscaterefsource (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateRefSource"]], "obfuscaterefsource (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.obfuscateRefSource"]], "outputannotatortype (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.outputAnnotatorType"]], "outputannotatortype (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.outputAnnotatorType"]], "outputasdocument (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.outputAsDocument"]], "outputasdocument (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.outputAsDocument"]], "pretrained() (deidentificationmodel static method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.pretrained"], [118, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.pretrained"], [147, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.pretrained"]], "reffileformat (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.refFileFormat"]], "refsep (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.refSep"]], "regexentities (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.regexEntities"]], "regexoverride (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.regexOverride"]], "regexoverride (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.regexOverride"]], "regexpatternsdictionary (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.regexPatternsDictionary"]], "region (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.region"]], "region (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.region"]], "returnentitymappings (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.returnEntityMappings"]], "returnentitymappings (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.returnEntityMappings"]], "sameentitythreshold (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.sameEntityThreshold"]], "sameentitythreshold (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.sameEntityThreshold"]], "seed (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.seed"]], "seed (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.seed"]], "setageranges() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setAgeRanges"]], "setageranges() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setAgeRanges"]], "setblacklist() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setBlackList"]], "setblacklist() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setBlackList"]], "setconsistentobfuscation() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setConsistentObfuscation"]], "setconsistentobfuscation() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setConsistentObfuscation"]], "setdateformats() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDateFormats"]], "setdateformats() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDateFormats"]], "setdatetag() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDateTag"]], "setdatetag() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDateTag"]], "setdatetoyear() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDateToYear"]], "setdatetoyear() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDateToYear"]], "setdays() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDays"]], "setdays() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDays"]], "setfixedmasklength() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setFixedMaskLength"]], "setfixedmasklength() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setFixedMaskLength"]], "setignoreregex() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setIgnoreRegex"]], "setignoreregex() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setIgnoreRegex"]], "setisrandomdatedisplacement() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setIsRandomDateDisplacement"]], "setisrandomdatedisplacement() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setIsRandomDateDisplacement"]], "setlanguage() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setLanguage"]], "setlanguage() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setLanguage"]], "setmappingscolumn() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMappingsColumn"]], "setmappingscolumn() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMappingsColumn"]], "setmaskingpolicy() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMaskingPolicy"]], "setmaskingpolicy() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMaskingPolicy"]], "setminyear() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMinYear"]], "setminyear() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMinYear"]], "setmode() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMode"]], "setmode() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMode"]], "setobfuscatedate() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateDate"]], "setobfuscatedate() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setObfuscateDate"]], "setobfuscatereffile() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateRefFile"]], "setobfuscaterefsource() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateRefSource"]], "setobfuscaterefsource() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setObfuscateRefSource"]], "setoutputasdocument() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setOutputAsDocument"]], "setoutputasdocument() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setOutputAsDocument"]], "setreffileformat() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRefFileFormat"]], "setrefsep() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRefSep"]], "setregexoverride() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegexOverride"]], "setregexoverride() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setRegexOverride"]], "setregexpatternsdictionary() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegexPatternsDictionary"]], "setregion() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegion"]], "setregion() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setRegion"]], "setreturnentitymappings() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setReturnEntityMappings"]], "setreturnentitymappings() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setReturnEntityMappings"]], "setsameentitythreshold() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSameEntityThreshold"]], "setsameentitythreshold() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setSameEntityThreshold"]], "setseed() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSeed"]], "setseed() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setSeed"]], "setunnormalizeddatemode() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setUnnormalizedDateMode"]], "setunnormalizeddatemode() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setUnnormalizedDateMode"]], "setuseshifdays() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setUseShifDays"]], "setuseshifdays() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setUseShifDays"]], "setzipcodetag() (deidentification method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setZipCodeTag"]], "setzipcodetag() (deidentificationmodel method)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setZipCodeTag"]], "sparknlp_jsl.annotator.deid.deidentification": [[66, "module-sparknlp_jsl.annotator.deid.deIdentification"]], "unnormalizeddatemode (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.unnormalizedDateMode"]], "unnormalizeddatemode (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.unnormalizedDateMode"]], "useshifdays (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.useShifDays"]], "useshifdays (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.useShifDays"]], "zipcodetag (deidentification attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.zipCodeTag"]], "zipcodetag (deidentificationmodel attribute)": [[66, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.zipCodeTag"]], "documenthashcoder (class in sparknlp_jsl.annotator.deid.doccument_hashcoder)": [[67, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder"]], "dateshiftcolumn (documenthashcoder attribute)": [[67, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.dateShiftColumn"]], "inputannotatortypes (documenthashcoder attribute)": [[67, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.inputAnnotatorTypes"]], "name (documenthashcoder attribute)": [[67, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.name"]], "newdateshift (documenthashcoder attribute)": [[67, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.newDateShift"]], "outputannotatortype (documenthashcoder attribute)": [[67, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.outputAnnotatorType"]], "patientidcolumn (documenthashcoder attribute)": [[67, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.patientIdColumn"]], "rangedays (documenthashcoder attribute)": [[67, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.rangeDays"]], "seed (documenthashcoder attribute)": [[67, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.seed"]], "setdateshiftcolumn() (documenthashcoder method)": [[67, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setDateShiftColumn"]], "setnewdateshift() (documenthashcoder method)": [[67, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setNewDateShift"]], "setparams() (documenthashcoder method)": [[67, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setParams"]], "setpatientidcolumn() (documenthashcoder method)": [[67, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setPatientIdColumn"]], "setrangedays() (documenthashcoder method)": [[67, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setRangeDays"]], "setseed() (documenthashcoder method)": [[67, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setSeed"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[67, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"]], "sparknlp_jsl.annotator.deid": [[68, "module-sparknlp_jsl.annotator.deid"]], "namechunkobfuscator (class in sparknlp_jsl.annotator.deid.name_obfuscator)": [[69, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator"]], "namechunkobfuscatorapproach (class in sparknlp_jsl.annotator.deid.name_obfuscator)": [[69, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach"]], "inputannotatortypes (namechunkobfuscator attribute)": [[69, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.inputAnnotatorTypes"]], "inputannotatortypes (namechunkobfuscatorapproach attribute)": [[69, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.inputAnnotatorTypes"]], "obfuscatereffile (namechunkobfuscatorapproach attribute)": [[69, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.obfuscateRefFile"]], "outputannotatortype (namechunkobfuscator attribute)": [[69, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.outputAnnotatorType"]], "outputannotatortype (namechunkobfuscatorapproach attribute)": [[69, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.outputAnnotatorType"]], "pretrained() (namechunkobfuscator static method)": [[69, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.pretrained"]], "reffileformat (namechunkobfuscatorapproach attribute)": [[69, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.refFileFormat"]], "refsep (namechunkobfuscatorapproach attribute)": [[69, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.refSep"]], "seed (namechunkobfuscator attribute)": [[69, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.seed"]], "seed (namechunkobfuscatorapproach attribute)": [[69, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.seed"]], "setobfuscatereffile() (namechunkobfuscatorapproach method)": [[69, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setObfuscateRefFile"]], "setreffileformat() (namechunkobfuscatorapproach method)": [[69, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setRefFileFormat"]], "setrefsep() (namechunkobfuscatorapproach method)": [[69, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setRefSep"]], "setseed() (namechunkobfuscator method)": [[69, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setSeed"]], "setseed() (namechunkobfuscatorapproach method)": [[69, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setSeed"]], "sparknlp_jsl.annotator.deid.name_obfuscator": [[69, "module-sparknlp_jsl.annotator.deid.name_obfuscator"]], "reidentification (class in sparknlp_jsl.annotator.deid.reidentification)": [[70, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification"]], "inputannotatortypes (reidentification attribute)": [[70, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.inputAnnotatorTypes"]], "name (reidentification attribute)": [[70, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.name"]], "outputannotatortype (reidentification attribute)": [[70, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.outputAnnotatorType"]], "sparknlp_jsl.annotator.deid.reidentification": [[70, "module-sparknlp_jsl.annotator.deid.reIdentification"]], "replacer (class in sparknlp_jsl.annotator.deid.replacer)": [[71, "sparknlp_jsl.annotator.deid.replacer.Replacer"]], "getusereplacement() (replacer method)": [[71, "sparknlp_jsl.annotator.deid.replacer.Replacer.getUseReplacement"]], "inputannotatortypes (replacer attribute)": [[71, "sparknlp_jsl.annotator.deid.replacer.Replacer.inputAnnotatorTypes"]], "name (replacer attribute)": [[71, "sparknlp_jsl.annotator.deid.replacer.Replacer.name"]], "outputannotatortype (replacer attribute)": [[71, "sparknlp_jsl.annotator.deid.replacer.Replacer.outputAnnotatorType"]], "setusereplacement() (replacer method)": [[71, "sparknlp_jsl.annotator.deid.replacer.Replacer.setUseReplacement"]], "sparknlp_jsl.annotator.deid.replacer": [[71, "module-sparknlp_jsl.annotator.deid.replacer"]], "usereplacement (replacer attribute)": [[71, "sparknlp_jsl.annotator.deid.replacer.Replacer.useReplacement"]], "sparknlp_jsl.annotator.disambiguation": [[72, "module-sparknlp_jsl.annotator.disambiguation"]], "nerdisambiguator (class in sparknlp_jsl.annotator.disambiguation.ner_disambiguator)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator"]], "nerdisambiguatormodel (class in sparknlp_jsl.annotator.disambiguation.ner_disambiguator)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel"]], "embeddingtypeparam (nerdisambiguator attribute)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.embeddingTypeParam"]], "embeddingtypeparam (nerdisambiguatormodel attribute)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.embeddingTypeParam"]], "inputannotatortypes (nerdisambiguator attribute)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.inputAnnotatorTypes"]], "inputannotatortypes (nerdisambiguatormodel attribute)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.inputAnnotatorTypes"]], "levenshteindistancethresholdparam (nerdisambiguator attribute)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.levenshteinDistanceThresholdParam"]], "levenshteindistancethresholdparam (nerdisambiguatormodel attribute)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.levenshteinDistanceThresholdParam"]], "name (nerdisambiguatormodel attribute)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.name"]], "narrowwithapproximatematching (nerdisambiguator attribute)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.narrowWithApproximateMatching"]], "narrowwithapproximatematching (nerdisambiguatormodel attribute)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.narrowWithApproximateMatching"]], "nearmatchinggapparam (nerdisambiguator attribute)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.nearMatchingGapParam"]], "nearmatchinggapparam (nerdisambiguatormodel attribute)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.nearMatchingGapParam"]], "numfirstchars (nerdisambiguator attribute)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.numFirstChars"]], "numfirstchars (nerdisambiguatormodel attribute)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.numFirstChars"]], "outputannotatortype (nerdisambiguator attribute)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.outputAnnotatorType"]], "outputannotatortype (nerdisambiguatormodel attribute)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.outputAnnotatorType"]], "predictionslimit (nerdisambiguator attribute)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.predictionsLimit"]], "predictionslimit (nerdisambiguatormodel attribute)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.predictionsLimit"]], "pretrained() (nerdisambiguatormodel static method)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.pretrained"]], "s3knowledgebasename (nerdisambiguator attribute)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.s3KnowledgeBaseName"]], "setembeddingtype() (nerdisambiguator method)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setEmbeddingType"]], "setembeddingtype() (nerdisambiguatormodel method)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setEmbeddingType"]], "setlevenshteindistancethresholdparam() (nerdisambiguator method)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setLevenshteinDistanceThresholdParam"]], "setlevenshteindistancethresholdparam() (nerdisambiguatormodel method)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setLevenshteinDistanceThresholdParam"]], "setnarrowwithapproximatematching() (nerdisambiguator method)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNarrowWithApproximateMatching"]], "setnarrowwithapproximatematching() (nerdisambiguatormodel method)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNarrowWithApproximateMatching"]], "setnearmatchinggapparam() (nerdisambiguator method)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNearMatchingGapParam"]], "setnearmatchinggapparam() (nerdisambiguatormodel method)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNearMatchingGapParam"]], "setnumfirstchars() (nerdisambiguator method)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNumFirstChars"]], "setnumfirstchars() (nerdisambiguatormodel method)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNumFirstChars"]], "setpredictionlimit() (nerdisambiguator method)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setPredictionLimit"]], "setpredictionlimit() (nerdisambiguatormodel method)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setPredictionLimit"]], "sets3knowledgebasename() (nerdisambiguator method)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setS3KnowledgeBaseName"]], "settokensearch() (nerdisambiguator method)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setTokenSearch"]], "settokensearch() (nerdisambiguatormodel method)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setTokenSearch"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[73, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"]], "tokensearch (nerdisambiguator attribute)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.tokenSearch"]], "tokensearch (nerdisambiguatormodel attribute)": [[73, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.tokenSearch"]], "doc2chunkinternal (class in sparknlp_jsl.annotator.doc2_chunk_internal)": [[74, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal"]], "chunkcol (doc2chunkinternal attribute)": [[74, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.chunkCol"]], "failonmissing (doc2chunkinternal attribute)": [[74, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.failOnMissing"]], "inputannotatortypes (doc2chunkinternal attribute)": [[74, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.inputAnnotatorTypes"]], "isarray (doc2chunkinternal attribute)": [[74, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.isArray"]], "lowercase (doc2chunkinternal attribute)": [[74, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.lowerCase"]], "name (doc2chunkinternal attribute)": [[74, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.name"]], "setchunkcol() (doc2chunkinternal method)": [[74, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setChunkCol"]], "setfailonmissing() (doc2chunkinternal method)": [[74, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setFailOnMissing"]], "setisarray() (doc2chunkinternal method)": [[74, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setIsArray"]], "setlowercase() (doc2chunkinternal method)": [[74, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setLowerCase"]], "setparams() (doc2chunkinternal method)": [[74, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setParams"]], "setstartcol() (doc2chunkinternal method)": [[74, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setStartCol"]], "setstartcolbytokenindex() (doc2chunkinternal method)": [[74, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setStartColByTokenIndex"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[74, "module-sparknlp_jsl.annotator.doc2_chunk_internal"]], "startcol (doc2chunkinternal attribute)": [[74, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.startCol"]], "startcolbytokenindex (doc2chunkinternal attribute)": [[74, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.startColByTokenIndex"]], "averageembeddings (class in sparknlp_jsl.annotator.embeddings.average_embeddings)": [[75, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings"]], "inputannotatortypes (averageembeddings attribute)": [[75, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.inputAnnotatorTypes"]], "name (averageembeddings attribute)": [[75, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.name"]], "outputannotatortype (averageembeddings attribute)": [[75, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.outputAnnotatorType"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[75, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"]], "bertsentencechunkembeddings (class in sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings)": [[76, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings"]], "chunkweight (bertsentencechunkembeddings attribute)": [[76, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.chunkWeight"]], "inputannotatortypes (bertsentencechunkembeddings attribute)": [[76, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.inputAnnotatorTypes"]], "load() (bertsentencechunkembeddings static method)": [[76, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.load"]], "name (bertsentencechunkembeddings attribute)": [[76, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.name"]], "outputannotatortype (bertsentencechunkembeddings attribute)": [[76, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.outputAnnotatorType"]], "pretrained() (bertsentencechunkembeddings static method)": [[76, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.pretrained"]], "setchunkweight() (bertsentencechunkembeddings method)": [[76, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setChunkWeight"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[76, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"]], "entitychunkembeddings (class in sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings)": [[77, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings"]], "entityweights (entitychunkembeddings attribute)": [[77, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.entityWeights"]], "inputannotatortypes (entitychunkembeddings attribute)": [[77, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.inputAnnotatorTypes"]], "maxsyntacticdistance (entitychunkembeddings attribute)": [[77, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.maxSyntacticDistance"]], "name (entitychunkembeddings attribute)": [[77, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.name"]], "outputannotatortype (entitychunkembeddings attribute)": [[77, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.outputAnnotatorType"]], "pretrained() (entitychunkembeddings static method)": [[77, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.pretrained"]], "setentityweights() (entitychunkembeddings method)": [[77, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setEntityWeights"]], "setmaxsyntacticdistance() (entitychunkembeddings method)": [[77, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setMaxSyntacticDistance"]], "settargetentities() (entitychunkembeddings method)": [[77, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setTargetEntities"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[77, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"]], "targetentities (entitychunkembeddings attribute)": [[77, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.targetEntities"]], "sparknlp_jsl.annotator.embeddings": [[78, "module-sparknlp_jsl.annotator.embeddings"]], "featuresassembler (class in sparknlp_jsl.annotator.feature_assembler)": [[79, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler"]], "inputannotatortypes (featuresassembler attribute)": [[79, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.inputAnnotatorTypes"]], "inputcols (featuresassembler attribute)": [[79, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.inputCols"]], "name (featuresassembler attribute)": [[79, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.name"]], "outputannotatortype (featuresassembler attribute)": [[79, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.outputAnnotatorType"]], "outputcol (featuresassembler attribute)": [[79, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.outputCol"]], "setinputcols() (featuresassembler method)": [[79, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setInputCols"]], "setoutputcol() (featuresassembler method)": [[79, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setOutputCol"]], "setparams() (featuresassembler method)": [[79, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setParams"]], "skiplpinputcolsvalidation (featuresassembler attribute)": [[79, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.feature_assembler": [[79, "module-sparknlp_jsl.annotator.feature_assembler"]], "genericclassifierapproach (class in sparknlp_jsl.annotator.generic_classifier.generic_classifier)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach"]], "genericclassifiermodel (class in sparknlp_jsl.annotator.generic_classifier.generic_classifier)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel"]], "batchsize (genericclassifierapproach attribute)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.batchSize"]], "classes (genericclassifiermodel attribute)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.classes"]], "dropout (genericclassifierapproach attribute)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.dropout"]], "epochsn (genericclassifierapproach attribute)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.epochsN"]], "featurescaling (genericclassifierapproach attribute)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.featureScaling"]], "fiximbalance (genericclassifierapproach attribute)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.fixImbalance"]], "inputannotatortypes (genericclassifierapproach attribute)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (genericclassifiermodel attribute)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.inputAnnotatorTypes"]], "labelcolumn (genericclassifierapproach attribute)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.labelColumn"]], "learningrate (genericclassifierapproach attribute)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.learningRate"]], "modelfile (genericclassifierapproach attribute)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.modelFile"]], "multiclass (genericclassifierapproach attribute)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.multiClass"]], "multiclass (genericclassifiermodel attribute)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.multiClass"]], "name (genericclassifiermodel attribute)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.name"]], "outputannotatortype (genericclassifierapproach attribute)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.outputAnnotatorType"]], "outputannotatortype (genericclassifiermodel attribute)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.outputAnnotatorType"]], "outputlogspath (genericclassifierapproach attribute)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.outputLogsPath"]], "pretrained() (genericclassifiermodel static method)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.pretrained"]], "setbatchsize() (genericclassifierapproach method)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setBatchSize"]], "setdropout() (genericclassifierapproach method)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setDropout"]], "setepochsnumber() (genericclassifierapproach method)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (genericclassifierapproach method)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setFeatureScaling"]], "setfiximbalance() (genericclassifierapproach method)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setFixImbalance"]], "setlabelcol() (genericclassifierapproach method)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setLabelCol"]], "setlearningrate() (genericclassifierapproach method)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setLearningRate"]], "setmodelfile() (genericclassifierapproach method)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setModelFile"]], "setmulticlass() (genericclassifierapproach method)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setMultiClass"]], "setmulticlass() (genericclassifiermodel method)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setMultiClass"]], "setoutputlogspath() (genericclassifierapproach method)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setOutputLogsPath"]], "setvalidationsplit() (genericclassifierapproach method)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setValidationSplit"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[80, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"]], "validationsplit (genericclassifierapproach attribute)": [[80, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.validationSplit"]], "sparknlp_jsl.annotator.generic_classifier": [[81, "module-sparknlp_jsl.annotator.generic_classifier"]], "assertion (in module sparknlp_jsl.annotator)": [[82, "sparknlp_jsl.annotator.assertion"]], "chunker (in module sparknlp_jsl.annotator)": [[82, "sparknlp_jsl.annotator.chunker"]], "classification (in module sparknlp_jsl.annotator)": [[82, "sparknlp_jsl.annotator.classification"]], "context (in module sparknlp_jsl.annotator)": [[82, "sparknlp_jsl.annotator.context"]], "deid (in module sparknlp_jsl.annotator)": [[82, "sparknlp_jsl.annotator.deid"]], "disambiguation (in module sparknlp_jsl.annotator)": [[82, "sparknlp_jsl.annotator.disambiguation"]], "generic_classifier (in module sparknlp_jsl.annotator)": [[82, "sparknlp_jsl.annotator.generic_classifier"]], "keyword (in module sparknlp_jsl.annotator)": [[82, "sparknlp_jsl.annotator.keyword"]], "merge (in module sparknlp_jsl.annotator)": [[82, "sparknlp_jsl.annotator.merge"]], "ner (in module sparknlp_jsl.annotator)": [[82, "sparknlp_jsl.annotator.ner"]], "qa (in module sparknlp_jsl.annotator)": [[82, "sparknlp_jsl.annotator.qa"]], "re (in module sparknlp_jsl.annotator)": [[82, "sparknlp_jsl.annotator.re"]], "resolution (in module sparknlp_jsl.annotator)": [[82, "sparknlp_jsl.annotator.resolution"]], "sparknlp_jsl.annotator": [[82, "module-sparknlp_jsl.annotator"]], "chunkmergeapproach (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach"]], "chunkmergemodel (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel"]], "commonchunkmergeparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.CommonChunkMergeParams"]], "mergepriorizationparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.MergePriorizationParams"]], "blacklist (commonchunkmergeparams attribute)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.CommonChunkMergeParams.blackList"]], "chunkprecedence (mergepriorizationparams attribute)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.MergePriorizationParams.chunkPrecedence"]], "chunkprecedencevalueprioritization (mergepriorizationparams attribute)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.MergePriorizationParams.chunkPrecedenceValuePrioritization"]], "defaultconfidence (mergepriorizationparams attribute)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.MergePriorizationParams.defaultConfidence"]], "falsepositives (chunkmergemodel attribute)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.falsePositives"]], "falsepositivesresource (chunkmergeapproach attribute)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.falsePositivesResource"]], "inputannotatortypes (chunkmergeapproach attribute)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.inputAnnotatorTypes"]], "inputannotatortypes (chunkmergemodel attribute)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.inputAnnotatorTypes"]], "mergeoverlapping (commonchunkmergeparams attribute)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.CommonChunkMergeParams.mergeOverlapping"]], "name (chunkmergeapproach attribute)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.name"]], "name (chunkmergemodel attribute)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.name"]], "orderingfeatures (mergepriorizationparams attribute)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.MergePriorizationParams.orderingFeatures"]], "outputannotatortype (chunkmergeapproach attribute)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.outputAnnotatorType"]], "outputannotatortype (chunkmergemodel attribute)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.outputAnnotatorType"]], "pretrained() (chunkmergemodel static method)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.pretrained"]], "replacedict (chunkmergemodel attribute)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.replaceDict"]], "replacedictresource (chunkmergeapproach attribute)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.replaceDictResource"]], "selectionstrategy (mergepriorizationparams attribute)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.MergePriorizationParams.selectionStrategy"]], "setblacklist() (commonchunkmergeparams method)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.CommonChunkMergeParams.setBlackList"]], "setchunkprecedence() (mergepriorizationparams method)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.MergePriorizationParams.setChunkPrecedence"]], "setchunkprecedencevalueprioritization() (mergepriorizationparams method)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.MergePriorizationParams.setChunkPrecedenceValuePrioritization"]], "setdefaultconfidence() (mergepriorizationparams method)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.MergePriorizationParams.setDefaultConfidence"]], "setfalsepositivesresource() (chunkmergeapproach method)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setFalsePositivesResource"]], "setinputcols() (chunkmergeapproach method)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setInputCols"]], "setinputcols() (chunkmergemodel method)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setInputCols"]], "setmergeoverlapping() (commonchunkmergeparams method)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.CommonChunkMergeParams.setMergeOverlapping"]], "setorderingfeatures() (mergepriorizationparams method)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.MergePriorizationParams.setOrderingFeatures"]], "setreplacedictresource() (chunkmergeapproach method)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setReplaceDictResource"]], "setselectionstrategy() (mergepriorizationparams method)": [[83, "sparknlp_jsl.annotator.merge.chunk_merge.MergePriorizationParams.setSelectionStrategy"]], "sparknlp_jsl.annotator.merge.chunk_merge": [[83, "module-sparknlp_jsl.annotator.merge.chunk_merge"]], "sparknlp_jsl.annotator.merge": [[84, "module-sparknlp_jsl.annotator.merge"]], "sparknlp_jsl.annotator.ner": [[85, "module-sparknlp_jsl.annotator.ner"]], "iobtagger (class in sparknlp_jsl.annotator.ner.iob_tagger)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger"]], "inputannotatortypes (iobtagger attribute)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.inputAnnotatorTypes"]], "name (iobtagger attribute)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.name"]], "outputannotatortype (iobtagger attribute)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.outputAnnotatorType"]], "scheme (iobtagger attribute)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.scheme"]], "setscheme() (iobtagger method)": [[86, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setScheme"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[86, "module-sparknlp_jsl.annotator.ner.iob_tagger"]], "medicalnerapproach (class in sparknlp_jsl.annotator.ner.medical_ner)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach"]], "medicalnermodel (class in sparknlp_jsl.annotator.ner.medical_ner)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel"]], "batchsize (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.batchSize"]], "classes (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.classes"]], "configprotobytes (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.configProtoBytes"]], "configprotobytes (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.configProtoBytes"]], "dropout (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.dropout"]], "earlystoppingcriterion (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.earlyStoppingCriterion"]], "earlystoppingpatience (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.earlyStoppingPatience"]], "enablememoryoptimizer (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.enableMemoryOptimizer"]], "gettrainingclassdistribution() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getTrainingClassDistribution"]], "graphfile (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.graphFile"]], "graphfolder (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.graphFolder"]], "includeallconfidencescores (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.includeAllConfidenceScores"]], "includeallconfidencescores (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.includeAllConfidenceScores"]], "includeconfidence (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.includeConfidence"]], "includeconfidence (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.includeConfidence"]], "inferencebatchsize (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.inferenceBatchSize"]], "inputannotatortypes (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.inputAnnotatorTypes"]], "inputannotatortypes (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.inputAnnotatorTypes"]], "labelcasing (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.labelCasing"]], "loadsavedmodel() (medicalnermodel static method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.loadSavedModel"]], "logprefix (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.logPrefix"]], "lr (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.lr"]], "name (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.name"]], "outputannotatortype (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.outputAnnotatorType"]], "outputannotatortype (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.outputAnnotatorType"]], "overrideexistingtags (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.overrideExistingTags"]], "po (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.po"]], "pretrained() (medicalnermodel static method)": [[87, "id29"], [87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.pretrained"]], "pretrainedmodelpath (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.pretrainedModelPath"]], "randomvalidationsplitperepoch (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.randomValidationSplitPerEpoch"]], "setbatchsize() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setBatchSize"]], "setconfigprotobytes() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setConfigProtoBytes"]], "setdropout() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setDropout"]], "setearlystoppingcriterion() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEarlyStoppingCriterion"]], "setearlystoppingpatience() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEarlyStoppingPatience"]], "setenablememoryoptimizer() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEnableMemoryOptimizer"]], "setgraphfile() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setGraphFile"]], "setgraphfolder() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setGraphFolder"]], "setincludeallconfidencescores() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setIncludeAllConfidenceScores"]], "setincludeconfidence() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setIncludeConfidence"]], "setincludeconfidence() (medicalnermodel method)": [[87, "id0"], [87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setIncludeConfidence"]], "setinferencebatchsize() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setInferenceBatchSize"]], "setlabelcasing() (medicalnermodel method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setLabelCasing"]], "setlogprefix() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setLogPrefix"]], "setlr() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setLr"]], "setoverrideexistingtags() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setOverrideExistingTags"]], "setpo() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setPo"]], "setpretrainedmodelpath() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setPretrainedModelPath"]], "setrandomvalidationsplitperepoch() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setRandomValidationSplitPerEpoch"]], "settagsmapping() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setTagsMapping"]], "setusebestmodel() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setUseBestModel"]], "setusecontrib() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setUseContrib"]], "setvalidationsplit() (medicalnerapproach method)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setValidationSplit"]], "sparknlp_jsl.annotator.ner.medical_ner": [[87, "module-sparknlp_jsl.annotator.ner.medical_ner"]], "tagsmapping (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.tagsMapping"]], "trainingclassdistribution (medicalnermodel attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.trainingClassDistribution"]], "usebestmodel (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.useBestModel"]], "usecontrib (medicalnerapproach attribute)": [[87, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.useContrib"]], "nerchunker (class in sparknlp_jsl.annotator.ner.ner_chunker)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker"]], "inputannotatortypes (nerchunker attribute)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.inputAnnotatorTypes"]], "name (nerchunker attribute)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.name"]], "outputannotatortype (nerchunker attribute)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.outputAnnotatorType"]], "regexparsers (nerchunker attribute)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.regexParsers"]], "setregexparsers() (nerchunker method)": [[88, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setRegexParsers"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[88, "module-sparknlp_jsl.annotator.ner.ner_chunker"]], "commonnerconverterinternalparams (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams"]], "nerconverterinternal (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal"]], "nerconverterinternalmodel (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel"]], "blacklist (commonnerconverterinternalparams attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.blackList"]], "greedymode (commonnerconverterinternalparams attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.greedyMode"]], "ignorestopwords (commonnerconverterinternalparams attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.ignoreStopWords"]], "inputannotatortypes (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.inputAnnotatorTypes"]], "inputannotatortypes (nerconverterinternalmodel attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.inputAnnotatorTypes"]], "name (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.name"]], "name (nerconverterinternalmodel attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.name"]], "outputannotatortype (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.outputAnnotatorType"]], "outputannotatortype (nerconverterinternalmodel attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.outputAnnotatorType"]], "preserveposition (commonnerconverterinternalparams attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.preservePosition"]], "replacedictresource (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.replaceDictResource"]], "replacelabels (nerconverterinternal attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.replaceLabels"]], "setblacklist() (commonnerconverterinternalparams method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setBlackList"]], "setgreedymode() (commonnerconverterinternalparams method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setGreedyMode"]], "setignorestopwords() (commonnerconverterinternalparams method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setIgnoreStopWords"]], "setpreserveposition() (commonnerconverterinternalparams method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setPreservePosition"]], "setreplacedictresource() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setReplaceDictResource"]], "setreplacelabels() (nerconverterinternal method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setReplaceLabels"]], "setthreshold() (commonnerconverterinternalparams method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setThreshold"]], "setwhitelist() (commonnerconverterinternalparams method)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setWhiteList"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[89, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"]], "threshold (commonnerconverterinternalparams attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.threshold"]], "whitelist (commonnerconverterinternalparams attribute)": [[89, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.whiteList"]], "zeroshotnermodel (class in sparknlp_jsl.annotator.ner.zero_shot_ner)": [[90, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel"]], "getclasses() (zeroshotnermodel method)": [[90, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getClasses"]], "ignoreentities (zeroshotnermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.ignoreEntities"]], "inputannotatortypes (zeroshotnermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.inputAnnotatorTypes"]], "load() (zeroshotnermodel static method)": [[90, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.load"], [141, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.load"], [170, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.load"]], "name (zeroshotnermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.name"], [141, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.name"], [170, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.name"]], "outputannotatortype (zeroshotnermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.outputAnnotatorType"]], "predictionthreshold (zeroshotnermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.predictionThreshold"]], "pretrained() (zeroshotnermodel static method)": [[90, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.pretrained"], [141, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.pretrained"], [170, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.pretrained"]], "setentitydefinitions() (zeroshotnermodel method)": [[90, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setEntityDefinitions"]], "setpredictionthreshold() (zeroshotnermodel method)": [[90, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[90, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"]], "datenormalizer (class in sparknlp_jsl.annotator.normalizer.date_normalizer)": [[91, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer"]], "anchordateday (datenormalizer attribute)": [[91, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateDay"]], "anchordatemonth (datenormalizer attribute)": [[91, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateMonth"]], "anchordateyear (datenormalizer attribute)": [[91, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateYear"]], "defaultreplacementday (datenormalizer attribute)": [[91, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.defaultReplacementDay"]], "defaultreplacementmonth (datenormalizer attribute)": [[91, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.defaultReplacementMonth"]], "defaultreplacementyear (datenormalizer attribute)": [[91, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.defaultReplacementYear"]], "inputannotatortypes (datenormalizer attribute)": [[91, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.inputAnnotatorTypes"]], "name (datenormalizer attribute)": [[91, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.name"]], "outputannotatortype (datenormalizer attribute)": [[91, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.outputAnnotatorType"]], "outputdateformat (datenormalizer attribute)": [[91, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.outputDateFormat"]], "setanchordateday() (datenormalizer method)": [[91, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateDay"]], "setanchordatemonth() (datenormalizer method)": [[91, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateMonth"]], "setanchordateyear() (datenormalizer method)": [[91, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateYear"]], "setdefaultreplacementday() (datenormalizer method)": [[91, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setDefaultReplacementDay"]], "setdefaultreplacementmonth() (datenormalizer method)": [[91, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setDefaultReplacementMonth"]], "setdefaultreplacementyear() (datenormalizer method)": [[91, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setDefaultReplacementYear"]], "setoutputdateformat() (datenormalizer method)": [[91, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setOutputDateformat"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[91, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"]], "drugnormalizer (class in sparknlp_jsl.annotator.normalizer.drug_normalizer)": [[92, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer"]], "inputannotatortypes (drugnormalizer attribute)": [[92, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.inputAnnotatorTypes"]], "lowercase (drugnormalizer attribute)": [[92, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.lowercase"]], "outputannotatortype (drugnormalizer attribute)": [[92, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.outputAnnotatorType"]], "policy (drugnormalizer attribute)": [[92, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.policy"]], "setlowercase() (drugnormalizer method)": [[92, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setLowercase"]], "setpolicy() (drugnormalizer method)": [[92, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setPolicy"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[92, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"]], "sparknlp_jsl.annotator.normalizer": [[93, "module-sparknlp_jsl.annotator.normalizer"]], "sparknlp_jsl.annotator.qa": [[94, "module-sparknlp_jsl.annotator.qa"]], "nerquestiongenerator (class in sparknlp_jsl.annotator.qa.qa_ner_generator)": [[95, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator"]], "entities1 (nerquestiongenerator attribute)": [[95, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.entities1"]], "entities2 (nerquestiongenerator attribute)": [[95, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.entities2"]], "inputannotatortypes (nerquestiongenerator attribute)": [[95, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.inputAnnotatorTypes"]], "name (nerquestiongenerator attribute)": [[95, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.name"]], "outputannotatortype (nerquestiongenerator attribute)": [[95, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.outputAnnotatorType"]], "questionmark (nerquestiongenerator attribute)": [[95, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.questionMark"]], "questionpronoun (nerquestiongenerator attribute)": [[95, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.questionPronoun"]], "setentities1() (nerquestiongenerator method)": [[95, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setEntities1"]], "setentities2() (nerquestiongenerator method)": [[95, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setEntities2"]], "setquestionmark() (nerquestiongenerator method)": [[95, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setQuestionMark"]], "setquestionpronoun() (nerquestiongenerator method)": [[95, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setQuestionPronoun"]], "setstrategytype() (nerquestiongenerator method)": [[95, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setStrategyType"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[95, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"]], "strategytype (nerquestiongenerator attribute)": [[95, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.strategyType"]], "sparknlp_jsl.annotator.re": [[96, "module-sparknlp_jsl.annotator.re"]], "genericremodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel"]], "posologyremodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel"]], "relationextractionapproach (class in sparknlp_jsl.annotator.re.relation_extraction)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach"]], "relationextractionmodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel"]], "classes (relationextractionmodel attribute)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.classes"]], "customlabels (relationextractionapproach attribute)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.customLabels"]], "fromentitybegincol (relationextractionapproach attribute)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityBeginCol"]], "fromentityendcol (relationextractionapproach attribute)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityEndCol"]], "fromentitylabelcol (relationextractionapproach attribute)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityLabelCol"]], "getclasses() (relationextractionmodel method)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getClasses"]], "inputannotatortypes (relationextractionapproach attribute)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.inputAnnotatorTypes"]], "inputannotatortypes (relationextractionmodel attribute)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.inputAnnotatorTypes"]], "maxsyntacticdistance (relationextractionapproach attribute)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.maxSyntacticDistance"]], "maxsyntacticdistance (relationextractionmodel attribute)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.maxSyntacticDistance"]], "name (relationextractionapproach attribute)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.name"]], "name (relationextractionmodel attribute)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.name"]], "outputannotatortype (relationextractionapproach attribute)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.outputAnnotatorType"]], "outputannotatortype (relationextractionmodel attribute)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.outputAnnotatorType"]], "overrideexistinglabels (relationextractionapproach attribute)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.overrideExistingLabels"]], "predictionthreshold (relationextractionmodel attribute)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.predictionThreshold"]], "pretrained() (relationextractionmodel static method)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.pretrained"]], "pretrainedmodelpath (relationextractionapproach attribute)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.pretrainedModelPath"]], "relationdirectioncol (relationextractionapproach attribute)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.relationDirectionCol"]], "relationpairs (relationextractionmodel attribute)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.relationPairs"]], "relationpairscasesensitive (relationextractionmodel attribute)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.relationPairsCaseSensitive"]], "setcustomlabels() (relationextractionapproach method)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setCustomLabels"]], "setcustomlabels() (relationextractionmodel method)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setCustomLabels"]], "setfromentity() (relationextractionapproach method)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setFromEntity"]], "setmaxsyntacticdistance() (relationextractionapproach method)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setMaxSyntacticDistance"]], "setmaxsyntacticdistance() (relationextractionmodel method)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setMaxSyntacticDistance"]], "setpredictionthreshold() (relationextractionmodel method)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setPredictionThreshold"]], "setpretrainedmodelpath() (relationextractionapproach method)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setPretrainedModelPath"]], "setrelationdirectioncol() (relationextractionapproach method)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setRelationDirectionCol"]], "setrelationpairs() (relationextractionmodel method)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setRelationPairs"]], "setrelationpairscasesensitive() (relationextractionmodel method)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setRelationPairsCaseSensitive"]], "settoentity() (relationextractionapproach method)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setToEntity"]], "set\u043everrideexistinglabels() (relationextractionapproach method)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setverrideExistingLabels"]], "sparknlp_jsl.annotator.re.relation_extraction": [[97, "module-sparknlp_jsl.annotator.re.relation_extraction"]], "toentitybegincol (relationextractionapproach attribute)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityBeginCol"]], "toentityendcol (relationextractionapproach attribute)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityEndCol"]], "toentitylabelcol (relationextractionapproach attribute)": [[97, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityLabelCol"]], "relationextractiondlmodel (class in sparknlp_jsl.annotator.re.relation_extraction_dl)": [[98, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel"]], "batchsize (relationextractiondlmodel attribute)": [[98, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.batchSize"]], "classes (relationextractiondlmodel attribute)": [[98, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.classes"]], "customlabels (relationextractiondlmodel attribute)": [[98, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.customLabels"]], "getclasses() (relationextractiondlmodel method)": [[98, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getClasses"]], "inputannotatortypes (relationextractiondlmodel attribute)": [[98, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.inputAnnotatorTypes"]], "loadsavedmodel() (relationextractiondlmodel static method)": [[98, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"], [128, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"], [157, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"]], "name (relationextractiondlmodel attribute)": [[98, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.name"], [128, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.name"], [157, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.name"]], "outputannotatortype (relationextractiondlmodel attribute)": [[98, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.outputAnnotatorType"]], "predictionthreshold (relationextractiondlmodel attribute)": [[98, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.predictionThreshold"]], "pretrained() (relationextractiondlmodel static method)": [[98, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.pretrained"], [128, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.pretrained"], [157, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.pretrained"]], "setbatchsize() (relationextractiondlmodel method)": [[98, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setBatchSize"]], "setcasesensitive() (relationextractiondlmodel method)": [[98, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setCaseSensitive"]], "setcustomlabels() (relationextractiondlmodel method)": [[98, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setCustomLabels"]], "setpredictionthreshold() (relationextractiondlmodel method)": [[98, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setPredictionThreshold"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[98, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"]], "renerchunksfilter (class in sparknlp_jsl.annotator.re.relation_ner_chunk_filter)": [[99, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter"]], "doclevelrelations (renerchunksfilter attribute)": [[99, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.docLevelRelations"]], "inputannotatortypes (renerchunksfilter attribute)": [[99, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.inputAnnotatorTypes"]], "maxsyntacticdistance (renerchunksfilter attribute)": [[99, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.maxSyntacticDistance"]], "name (renerchunksfilter attribute)": [[99, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.name"]], "outputannotatortype (renerchunksfilter attribute)": [[99, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.outputAnnotatorType"]], "relationpairs (renerchunksfilter attribute)": [[99, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.relationPairs"]], "relationpairscasesensitive (renerchunksfilter attribute)": [[99, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.relationPairsCaseSensitive"]], "setdoclevelrelations() (renerchunksfilter method)": [[99, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setDocLevelRelations"]], "setmaxsyntacticdistance() (renerchunksfilter method)": [[99, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setMaxSyntacticDistance"]], "setrelationpairs() (renerchunksfilter method)": [[99, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setRelationPairs"]], "setrelationpairscasesensitive() (renerchunksfilter method)": [[99, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setRelationPairsCaseSensitive"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[99, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.annotator.re.zero_shot_relation_extraction)": [[100, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "getclasses() (zeroshotrelationextractionmodel method)": [[100, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getClasses"]], "inputannotatortypes (zeroshotrelationextractionmodel attribute)": [[100, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputAnnotatorTypes"]], "loadsavedmodel() (zeroshotrelationextractionmodel static method)": [[100, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"], [129, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"], [158, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"]], "multilabel (zeroshotrelationextractionmodel attribute)": [[100, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.multiLabel"]], "outputannotatortype (zeroshotrelationextractionmodel attribute)": [[100, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.outputAnnotatorType"]], "predictionthreshold (zeroshotrelationextractionmodel attribute)": [[100, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.predictionThreshold"]], "pretrained() (zeroshotrelationextractionmodel static method)": [[100, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"], [129, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"], [158, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"]], "setrelationalcategories() (zeroshotrelationextractionmodel method)": [[100, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setRelationalCategories"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[100, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"]], "sparknlp_jsl.annotator.resolution": [[101, "module-sparknlp_jsl.annotator.resolution"]], "resolvermerger (class in sparknlp_jsl.annotator.resolution.resolver_merger)": [[102, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger"]], "inputannotatortypes (resolvermerger attribute)": [[102, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.inputAnnotatorTypes"]], "name (resolvermerger attribute)": [[102, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.name"]], "outputannotatortype (resolvermerger attribute)": [[102, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.outputAnnotatorType"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[102, "module-sparknlp_jsl.annotator.resolution.resolver_merger"]], "sentenceentityresolverapproach (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sentenceresolverparams (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams"]], "aux_label_col (sentenceentityresolverapproach attribute)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.aux_label_col"]], "aux_label_col (sentenceentityresolvermodel attribute)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.aux_label_col"]], "confidencefunction (sentenceresolverparams attribute)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.confidenceFunction"]], "distancefunction (sentenceresolverparams attribute)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.distanceFunction"]], "dropcodeslist (sentenceentityresolverapproach attribute)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.dropCodesList"]], "inputannotatortypes (sentenceentityresolverapproach attribute)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputAnnotatorTypes"]], "inputannotatortypes (sentenceentityresolvermodel attribute)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputAnnotatorTypes"]], "inputannotatortypes (sentenceresolverparams attribute)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.inputAnnotatorTypes"]], "labelcol (sentenceentityresolverapproach attribute)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.labelCol"]], "missasempty (sentenceresolverparams attribute)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.missAsEmpty"]], "name (sentenceentityresolvermodel attribute)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.name"], [154, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.name"]], "neighbours (sentenceresolverparams attribute)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.neighbours"]], "normalizedcol (sentenceentityresolverapproach attribute)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.normalizedCol"]], "outputannotatortype (sentenceentityresolverapproach attribute)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.outputAnnotatorType"]], "outputannotatortype (sentenceentityresolvermodel attribute)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.outputAnnotatorType"]], "overrideexistingcodes (sentenceentityresolverapproach attribute)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.overrideExistingCodes"]], "pretrained() (sentenceentityresolvermodel static method)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"], [125, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"], [154, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"]], "pretrainedmodelpath (sentenceentityresolverapproach attribute)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.pretrainedModelPath"]], "returncosinedistances (sentenceentityresolverapproach attribute)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.returnCosineDistances"]], "returncosinedistances (sentenceentityresolvermodel attribute)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.returnCosineDistances"]], "searchtree (sentenceentityresolvermodel attribute)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.searchTree"]], "setauxlabelcol() (sentenceentityresolverapproach method)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setAuxLabelCol"]], "setauxlabelcol() (sentenceentityresolvermodel method)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setAuxLabelCol"]], "setconfidencefunction() (sentenceresolverparams method)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setConfidenceFunction"]], "setdistancefunction() (sentenceresolverparams method)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setDistanceFunction"]], "setdropcodeslist() (sentenceentityresolverapproach method)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDropCodesList"]], "setextractcosinedistances() (sentenceentityresolverapproach method)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setExtractCosineDistances"]], "setlabelcol() (sentenceentityresolverapproach method)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setLabelCol"]], "setmissasempty() (sentenceresolverparams method)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setMissAsEmpty"]], "setneighbours() (sentenceresolverparams method)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setNeighbours"]], "setnormalizedcol() (sentenceentityresolverapproach method)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setNormalizedCol"]], "setoverrideexistingcodes() (sentenceentityresolverapproach method)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setOverrideExistingCodes"]], "setpretrainedmodelpath() (sentenceentityresolverapproach method)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setPretrainedModelPath"]], "setsearchtree() (sentenceentityresolvermodel method)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setSearchTree"]], "setthreshold() (sentenceresolverparams method)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setThreshold"]], "setuseauxlabel() (sentenceentityresolverapproach method)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setUseAuxLabel"]], "setuseauxlabel() (sentenceentityresolvermodel method)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setUseAuxLabel"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[103, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"]], "threshold (sentenceresolverparams attribute)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.threshold"]], "useauxlabel (sentenceentityresolverapproach attribute)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.useAuxLabel"]], "useauxlabel (sentenceentityresolvermodel attribute)": [[103, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.useAuxLabel"]], "resolution2chunk (class in sparknlp_jsl.annotator.resolution2_chunk)": [[104, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk"]], "inputannotatortypes (resolution2chunk attribute)": [[104, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.inputAnnotatorTypes"]], "name (resolution2chunk attribute)": [[104, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.name"]], "outputannotatortype (resolution2chunk attribute)": [[104, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.outputAnnotatorType"]], "setparams() (resolution2chunk method)": [[104, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.setParams"]], "sparknlp_jsl.annotator.resolution2_chunk": [[104, "module-sparknlp_jsl.annotator.resolution2_chunk"]], "router (class in sparknlp_jsl.annotator.router)": [[105, "sparknlp_jsl.annotator.router.Router"]], "filterfieldselements (router attribute)": [[105, "sparknlp_jsl.annotator.router.Router.filterFieldsElements"]], "inputannotatortypes (router attribute)": [[105, "sparknlp_jsl.annotator.router.Router.inputAnnotatorTypes"]], "inputtype (router attribute)": [[105, "sparknlp_jsl.annotator.router.Router.inputType"]], "metadatafield (router attribute)": [[105, "sparknlp_jsl.annotator.router.Router.metadataField"]], "name (router attribute)": [[105, "sparknlp_jsl.annotator.router.Router.name"]], "outputannotatortype (router attribute)": [[105, "sparknlp_jsl.annotator.router.Router.outputAnnotatorType"]], "setfilterfieldselements() (router method)": [[105, "sparknlp_jsl.annotator.router.Router.setFilterFieldsElements"]], "setinputcols() (router method)": [[105, "sparknlp_jsl.annotator.router.Router.setInputCols"]], "setinputtype() (router method)": [[105, "sparknlp_jsl.annotator.router.Router.setInputType"]], "setmetadatafield() (router method)": [[105, "sparknlp_jsl.annotator.router.Router.setMetadataField"]], "skiplpinputcolsvalidation (router attribute)": [[105, "sparknlp_jsl.annotator.router.Router.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.router": [[105, "module-sparknlp_jsl.annotator.router"]], "sourcetrackingmetadataparams (class in sparknlp_jsl.annotator.source_tracking_metadata_params)": [[106, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams"]], "allpossiblefieldstostandardize (sourcetrackingmetadataparams attribute)": [[106, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.allPossibleFieldsToStandardize"]], "includeoutputcolumn (sourcetrackingmetadataparams attribute)": [[106, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.includeOutputColumn"]], "includestandardfield (sourcetrackingmetadataparams attribute)": [[106, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.includeStandardField"]], "outputcolumnkey (sourcetrackingmetadataparams attribute)": [[106, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.outputColumnKey"]], "setallpossiblefieldstostandardize() (sourcetrackingmetadataparams method)": [[106, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setAllPossibleFieldsToStandardize"]], "setincludeoutputcolumn() (sourcetrackingmetadataparams method)": [[106, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setIncludeOutputColumn"]], "setincludestandardfield() (sourcetrackingmetadataparams method)": [[106, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setIncludeStandardField"]], "setoutputcolumnkey() (sourcetrackingmetadataparams method)": [[106, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setOutputColumnKey"]], "setstandardfieldkey() (sourcetrackingmetadataparams method)": [[106, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setStandardFieldKey"]], "sparknlp_jsl.annotator.source_tracking_metadata_params": [[106, "module-sparknlp_jsl.annotator.source_tracking_metadata_params"]], "standardfieldkey (sourcetrackingmetadataparams attribute)": [[106, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.standardFieldKey"]], "tfgraphbuilder (class in sparknlp_jsl.annotator.tf_graph_builder)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder"]], "tfgraphbuildermodel (class in sparknlp_jsl.annotator.tf_graph_builder)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel"]], "batchnorm (tfgraphbuilder attribute)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.batchNorm"]], "getbatchnorm() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getBatchNorm"]], "getgraphfile() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getGraphFile"]], "getgraphfolder() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getGraphFolder"]], "gethiddenact() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenAct"]], "gethiddenactl2() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenActL2"]], "gethiddenlayers() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenLayers"]], "gethiddenunitsnumber() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenUnitsNumber"]], "gethiddenweightsl2() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenWeightsL2"]], "getinputcols() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getInputCols"]], "getislicensed() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getIsLicensed"]], "getlabelcolumn() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getLabelColumn"]], "getmaxsequencelength() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getMaxSequenceLength"]], "getmodelname() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getModelName"]], "getoutputact() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getOutputAct"]], "getuserelationdirection() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getUseRelationDirection"]], "graphfile (tfgraphbuilder attribute)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.graphFile"]], "graphfolder (tfgraphbuilder attribute)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.graphFolder"]], "hiddenact (tfgraphbuilder attribute)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenAct"]], "hiddenactl2 (tfgraphbuilder attribute)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenActL2"]], "hiddenlayers (tfgraphbuilder attribute)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenLayers"]], "hiddenunitsnumber (tfgraphbuilder attribute)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenUnitsNumber"]], "hiddenweightsl2 (tfgraphbuilder attribute)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenWeightsL2"]], "inputcols (tfgraphbuilder attribute)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.inputCols"]], "islicensed (tfgraphbuilder attribute)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.isLicensed"]], "labelcolumn (tfgraphbuilder attribute)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.labelColumn"]], "maxsequencelength (tfgraphbuilder attribute)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.maxSequenceLength"]], "modelname (tfgraphbuilder attribute)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.modelName"]], "outputact (tfgraphbuilder attribute)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.outputAct"]], "setbatchnorm() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setBatchNorm"]], "setgraphfile() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setGraphFile"]], "setgraphfolder() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setGraphFolder"]], "sethiddenact() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenAct"]], "sethiddenactl2() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenActL2"]], "sethiddenlayers() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenLayers"]], "sethiddenunitsnumber() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenUnitsNumber"]], "sethiddenweightsl2() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenWeightsL2"]], "setinputcols() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setInputCols"]], "setislicensed() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setIsLicensed"]], "setlabelcolumn() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setLabelColumn"]], "setmaxsequencelength() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setMaxSequenceLength"]], "setmodelname() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setModelName"]], "setuserelationdirection() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setUseRelationDirection"]], "settoutputact() (tfgraphbuilder method)": [[107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.settOutputAct"]], "sparknlp_jsl.annotator.tf_graph_builder": [[107, "module-sparknlp_jsl.annotator.tf_graph_builder"]], "userelationdirection (tfgraphbuilder attribute)": [[107, "id0"], [107, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.useRelationDirection"]], "sparknlp_jsl.base": [[108, "module-sparknlp_jsl.base"]], "annotatorapproachinternal (class in sparknlp_jsl.common.annotator_approach_internal)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal"]], "inputannotatortypes (annotatorapproachinternal attribute)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.inputAnnotatorTypes"]], "outputannotatortype (annotatorapproachinternal attribute)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.outputAnnotatorType"]], "skiplpinputcolsvalidation (annotatorapproachinternal attribute)": [[109, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.skipLPInputColsValidation"]], "sparknlp_jsl.common.annotator_approach_internal": [[109, "module-sparknlp_jsl.common.annotator_approach_internal"]], "annotatormodelinternal (class in sparknlp_jsl.common.annotator_model_internal)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal"]], "inputannotatortypes (annotatormodelinternal attribute)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.inputAnnotatorTypes"]], "outputannotatortype (annotatormodelinternal attribute)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.outputAnnotatorType"]], "setparams() (annotatormodelinternal method)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.setParams"]], "skiplpinputcolsvalidation (annotatormodelinternal attribute)": [[110, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.skipLPInputColsValidation"]], "sparknlp_jsl.common.annotator_model_internal": [[110, "module-sparknlp_jsl.common.annotator_model_internal"]], "annotatorpropertiesinternal (class in sparknlp_jsl.common.annotator_properties_internal)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal"]], "inputcolsvalidation() (annotatorpropertiesinternal method)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.inputColsValidation"]], "setforceinputtypevalidation() (annotatorpropertiesinternal method)": [[111, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.setForceInputTypeValidation"]], "sparknlp_jsl.common.annotator_properties_internal": [[111, "module-sparknlp_jsl.common.annotator_properties_internal"]], "sparknlp_jsl.common": [[112, "module-sparknlp_jsl.common"]], "compatibility (class in sparknlp_jsl.compatibility)": [[113, "sparknlp_jsl.compatibility.Compatibility"]], "findversion() (compatibility method)": [[113, "sparknlp_jsl.compatibility.Compatibility.findVersion"]], "showversion() (compatibility method)": [[113, "sparknlp_jsl.compatibility.Compatibility.showVersion"]], "sparknlp_jsl.compatibility": [[113, "module-sparknlp_jsl.compatibility"]], "customtransformer (class in sparknlp_jsl.custom_transformer)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer"]], "f (customtransformer attribute)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer.f"]], "setinputcol() (customtransformer method)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer.setInputCol"]], "setoutputcol() (customtransformer method)": [[114, "sparknlp_jsl.custom_transformer.CustomTransformer.setOutputCol"]], "sparknlp_jsl.custom_transformer": [[114, "module-sparknlp_jsl.custom_transformer"]], "nercrfevaluation (class in sparknlp_jsl.eval)": [[115, "sparknlp_jsl.eval.NerCrfEvaluation"]], "nerdlevaluation (class in sparknlp_jsl.eval)": [[115, "sparknlp_jsl.eval.NerDLEvaluation"]], "nerdlmetrics (class in sparknlp_jsl.eval)": [[115, "sparknlp_jsl.eval.NerDLMetrics"]], "norvigspellevaluation (class in sparknlp_jsl.eval)": [[115, "sparknlp_jsl.eval.NorvigSpellEvaluation"]], "posevaluation (class in sparknlp_jsl.eval)": [[115, "sparknlp_jsl.eval.POSEvaluation"]], "symspellevaluation (class in sparknlp_jsl.eval)": [[115, "sparknlp_jsl.eval.SymSpellEvaluation"]], "computeaccuracyannotator() (nercrfevaluation method)": [[115, "sparknlp_jsl.eval.NerCrfEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (nerdlevaluation method)": [[115, "sparknlp_jsl.eval.NerDLEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (norvigspellevaluation method)": [[115, "sparknlp_jsl.eval.NorvigSpellEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (posevaluation method)": [[115, "sparknlp_jsl.eval.POSEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (symspellevaluation method)": [[115, "sparknlp_jsl.eval.SymSpellEvaluation.computeAccuracyAnnotator"]], "computeaccuracymodel() (nercrfevaluation method)": [[115, "sparknlp_jsl.eval.NerCrfEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (nerdlevaluation method)": [[115, "sparknlp_jsl.eval.NerDLEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (norvigspellevaluation method)": [[115, "sparknlp_jsl.eval.NorvigSpellEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (posevaluation method)": [[115, "sparknlp_jsl.eval.POSEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (symspellevaluation method)": [[115, "sparknlp_jsl.eval.SymSpellEvaluation.computeAccuracyModel"]], "computemetricsfromdf() (nerdlmetrics method)": [[115, "sparknlp_jsl.eval.NerDLMetrics.computeMetricsFromDF"]], "sparknlp_jsl.eval": [[115, "module-sparknlp_jsl.eval"]], "assertiondlapproach (class in sparknlp_jsl.finance.chunk_classification.assertion.assertiondl)": [[116, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.finance.chunk_classification.assertion.assertiondl)": [[116, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertiondl": [[116, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[117, "module-sparknlp_jsl.finance.chunk_classification.assertion"]], "deidentification (class in sparknlp_jsl.finance.chunk_classification.deid.deidentification)": [[118, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.finance.chunk_classification.deid.deidentification)": [[118, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel"]], "sparknlp_jsl.finance.chunk_classification.deid.deidentification": [[118, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"]], "financedocumenthashcoder (class in sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder)": [[119, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[119, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.finance.chunk_classification.deid": [[120, "module-sparknlp_jsl.finance.chunk_classification.deid"]], "sparknlp_jsl.finance.chunk_classification": [[121, "module-sparknlp_jsl.finance.chunk_classification"]], "chunkmapperapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper)": [[122, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach"]], "chunkmappermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper)": [[122, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[122, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"]], "docmapperapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.docmapper)": [[123, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach"]], "docmappermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.docmapper)": [[123, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper": [[123, "module-sparknlp_jsl.finance.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[124, "module-sparknlp_jsl.finance.chunk_classification.resolution"]], "sentenceentityresolverapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver)": [[125, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver)": [[125, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[125, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.finance.graph": [[126, "module-sparknlp_jsl.finance.graph"]], "sparknlp_jsl.finance.graph.relation_extraction": [[127, "module-sparknlp_jsl.finance.graph.relation_extraction"]], "relationextractiondlmodel (class in sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl)": [[128, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[128, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction)": [[129, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[129, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.finance": [[130, "module-sparknlp_jsl.finance"]], "sparknlp_jsl.finance.seq_generation": [[131, "module-sparknlp_jsl.finance.seq_generation"]], "financenerquestiongenerator (class in sparknlp_jsl.finance.seq_generation.qa_ner_generator)": [[132, "sparknlp_jsl.finance.seq_generation.qa_ner_generator.FinanceNerQuestionGenerator"]], "sparknlp_jsl.finance.seq_generation.qa_ner_generator": [[132, "module-sparknlp_jsl.finance.seq_generation.qa_ner_generator"]], "financebertforsequenceclassification (class in sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification"]], "loadsavedmodel() (financebertforsequenceclassification static method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (financebertforsequenceclassification static method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.loadSavedModelOpenSource"]], "name (financebertforsequenceclassification attribute)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.name"]], "pretrained() (financebertforsequenceclassification static method)": [[133, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[133, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"]], "financeclassifierdlapproach (class in sparknlp_jsl.finance.sequence_classification.finance_classifier_dl)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach"]], "financeclassifierdlmodel (class in sparknlp_jsl.finance.sequence_classification.finance_classifier_dl)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel"]], "name (financeclassifierdlmodel attribute)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.name"]], "pretrained() (financeclassifierdlmodel static method)": [[134, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[134, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"]], "financedocumentmlclassifierapproach (class in sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach"]], "financedocumentmlclassifiermodel (class in sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel"]], "name (financedocumentmlclassifiermodel attribute)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.name"]], "pretrained() (financedocumentmlclassifiermodel static method)": [[135, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier": [[135, "module-sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier"]], "sparknlp_jsl.finance.sequence_classification": [[136, "module-sparknlp_jsl.finance.sequence_classification"]], "sparknlp_jsl.finance.token_classification": [[137, "module-sparknlp_jsl.finance.token_classification"]], "financebertfortokenclassification (class in sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier)": [[138, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification"]], "loadsavedmodel() (financebertfortokenclassification static method)": [[138, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.loadSavedModel"]], "loadsavedmodelopensource() (financebertfortokenclassification static method)": [[138, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.loadSavedModelOpenSource"]], "name (financebertfortokenclassification attribute)": [[138, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.name"]], "pretrained() (financebertfortokenclassification static method)": [[138, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.pretrained"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[138, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"]], "financenerapproach (class in sparknlp_jsl.finance.token_classification.ner.finance_ner)": [[139, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach"]], "financenermodel (class in sparknlp_jsl.finance.token_classification.ner.finance_ner)": [[139, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel"]], "loadsavedmodel() (financenermodel static method)": [[139, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.loadSavedModel"]], "name (financenermodel attribute)": [[139, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.name"]], "pretrained() (financenermodel static method)": [[139, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.pretrained"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[139, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"]], "sparknlp_jsl.finance.token_classification.ner": [[140, "module-sparknlp_jsl.finance.token_classification.ner"]], "zeroshotnermodel (class in sparknlp_jsl.finance.token_classification.ner.zero_shot_ner)": [[141, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[141, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"]], "profile() (in module sparknlp_jsl.functions)": [[142, "sparknlp_jsl.functions.profile"]], "profilev22() (in module sparknlp_jsl.functions)": [[142, "sparknlp_jsl.functions.profileV22"]], "profilev22y17() (in module sparknlp_jsl.functions)": [[142, "sparknlp_jsl.functions.profileV22Y17"]], "profilev22y18() (in module sparknlp_jsl.functions)": [[142, "sparknlp_jsl.functions.profileV22Y18"]], "profilev22y19() (in module sparknlp_jsl.functions)": [[142, "sparknlp_jsl.functions.profileV22Y19"]], "profilev22y20() (in module sparknlp_jsl.functions)": [[142, "sparknlp_jsl.functions.profileV22Y20"]], "profilev22y21() (in module sparknlp_jsl.functions)": [[142, "sparknlp_jsl.functions.profileV22Y21"]], "profilev22y22() (in module sparknlp_jsl.functions)": [[142, "sparknlp_jsl.functions.profileV22Y22"]], "profilev23() (in module sparknlp_jsl.functions)": [[142, "sparknlp_jsl.functions.profileV23"]], "profilev23y18() (in module sparknlp_jsl.functions)": [[142, "sparknlp_jsl.functions.profileV23Y18"]], "profilev23y19() (in module sparknlp_jsl.functions)": [[142, "sparknlp_jsl.functions.profileV23Y19"]], "profilev24y17() (in module sparknlp_jsl.functions)": [[142, "sparknlp_jsl.functions.profileV24Y17"]], "profilev24y18() (in module sparknlp_jsl.functions)": [[142, "sparknlp_jsl.functions.profileV24Y18"]], "profilev24y19() (in module sparknlp_jsl.functions)": [[142, "sparknlp_jsl.functions.profileV24Y19"]], "profilev24y20() (in module sparknlp_jsl.functions)": [[142, "sparknlp_jsl.functions.profileV24Y20"]], "profilev24y21() (in module sparknlp_jsl.functions)": [[142, "sparknlp_jsl.functions.profileV24Y21"]], "profilev24y22() (in module sparknlp_jsl.functions)": [[142, "sparknlp_jsl.functions.profileV24Y22"]], "sparknlp_jsl.functions": [[142, "module-sparknlp_jsl.functions"]], "annotators (in module sparknlp_jsl)": [[143, "sparknlp_jsl.annotators"]], "get_credentials() (in module sparknlp_jsl)": [[143, "sparknlp_jsl.get_credentials"]], "library_settings() (in module sparknlp_jsl)": [[143, "sparknlp_jsl.library_settings"]], "pub_version() (in module sparknlp_jsl)": [[143, "sparknlp_jsl.pub_version"]], "size_regex (in module sparknlp_jsl)": [[143, "sparknlp_jsl.size_regex"]], "sparknlp_jsl": [[143, "module-sparknlp_jsl"]], "start() (in module sparknlp_jsl)": [[143, "sparknlp_jsl.start"]], "transformer_seq_classification (in module sparknlp_jsl)": [[143, "sparknlp_jsl.transformer_seq_classification"]], "version() (in module sparknlp_jsl)": [[143, "sparknlp_jsl.version"]], "version_regex (in module sparknlp_jsl)": [[143, "sparknlp_jsl.version_regex"]], "customlabels() (in module sparknlp_jsl.internal)": [[144, "sparknlp_jsl.internal.CustomLabels"]], "entityweights() (in module sparknlp_jsl.internal)": [[144, "sparknlp_jsl.internal.EntityWeights"]], "relationalcategories() (in module sparknlp_jsl.internal)": [[144, "sparknlp_jsl.internal.RelationalCategories"]], "targetentities() (in module sparknlp_jsl.internal)": [[144, "sparknlp_jsl.internal.TargetEntities"]], "sparknlp_jsl.internal": [[144, "module-sparknlp_jsl.internal"]], "assertiondlapproach (class in sparknlp_jsl.legal.chunk_classification.assertion.assertiondl)": [[145, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.legal.chunk_classification.assertion.assertiondl)": [[145, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertiondl": [[145, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[146, "module-sparknlp_jsl.legal.chunk_classification.assertion"]], "deidentification (class in sparknlp_jsl.legal.chunk_classification.deid.deidentification)": [[147, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.legal.chunk_classification.deid.deidentification)": [[147, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel"]], "sparknlp_jsl.legal.chunk_classification.deid.deidentification": [[147, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"]], "legaldocumenthashcoder (class in sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder)": [[148, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[148, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.legal.chunk_classification.deid": [[149, "module-sparknlp_jsl.legal.chunk_classification.deid"]], "sparknlp_jsl.legal.chunk_classification": [[150, "module-sparknlp_jsl.legal.chunk_classification"]], "chunkmapperapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper)": [[151, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach"]], "chunkmappermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper)": [[151, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[151, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"]], "docmapperapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.docmapper)": [[152, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach"]], "docmappermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.docmapper)": [[152, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper": [[152, "module-sparknlp_jsl.legal.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[153, "module-sparknlp_jsl.legal.chunk_classification.resolution"]], "sentenceentityresolverapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver)": [[154, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver)": [[154, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[154, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.legal.graph": [[155, "module-sparknlp_jsl.legal.graph"]], "sparknlp_jsl.legal.graph.relation_extraction": [[156, "module-sparknlp_jsl.legal.graph.relation_extraction"]], "relationextractiondlmodel (class in sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl)": [[157, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[157, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction)": [[158, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[158, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.legal": [[159, "module-sparknlp_jsl.legal"]], "sparknlp_jsl.legal.seq_generation": [[160, "module-sparknlp_jsl.legal.seq_generation"]], "legalnerquestiongenerator (class in sparknlp_jsl.legal.seq_generation.qa_ner_generator)": [[161, "sparknlp_jsl.legal.seq_generation.qa_ner_generator.LegalNerQuestionGenerator"]], "sparknlp_jsl.legal.seq_generation.qa_ner_generator": [[161, "module-sparknlp_jsl.legal.seq_generation.qa_ner_generator"]], "sparknlp_jsl.legal.sequence_classification": [[162, "module-sparknlp_jsl.legal.sequence_classification"]], "legalbertforsequenceclassification (class in sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification)": [[163, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification"]], "loadsavedmodel() (legalbertforsequenceclassification static method)": [[163, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (legalbertforsequenceclassification static method)": [[163, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.loadSavedModelOpenSource"]], "name (legalbertforsequenceclassification attribute)": [[163, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.name"]], "pretrained() (legalbertforsequenceclassification static method)": [[163, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[163, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"]], "legalclassifierdlapproach (class in sparknlp_jsl.legal.sequence_classification.legal_classifier_dl)": [[164, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach"]], "legalclassifierdlmodel (class in sparknlp_jsl.legal.sequence_classification.legal_classifier_dl)": [[164, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel"]], "name (legalclassifierdlmodel attribute)": [[164, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.name"]], "pretrained() (legalclassifierdlmodel static method)": [[164, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[164, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"]], "legaldocumentmlclassifierapproach (class in sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier)": [[165, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach"]], "legaldocumentmlclassifiermodel (class in sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier)": [[165, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel"]], "name (legaldocumentmlclassifiermodel attribute)": [[165, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.name"]], "pretrained() (legaldocumentmlclassifiermodel static method)": [[165, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier": [[165, "module-sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier"]], "sparknlp_jsl.legal.token_classification": [[166, "module-sparknlp_jsl.legal.token_classification"]], "sparknlp_jsl.legal.token_classification.ner": [[167, "module-sparknlp_jsl.legal.token_classification.ner"]], "legalbertfortokenclassification (class in sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier)": [[168, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification"]], "loadsavedmodel() (legalbertfortokenclassification static method)": [[168, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.loadSavedModel"]], "loadsavedmodelopensource() (legalbertfortokenclassification static method)": [[168, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.loadSavedModelOpenSource"]], "name (legalbertfortokenclassification attribute)": [[168, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.name"]], "pretrained() (legalbertfortokenclassification static method)": [[168, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.pretrained"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[168, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"]], "legalnerapproach (class in sparknlp_jsl.legal.token_classification.ner.legal_ner)": [[169, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach"]], "legalnermodel (class in sparknlp_jsl.legal.token_classification.ner.legal_ner)": [[169, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel"]], "loadsavedmodel() (legalnermodel static method)": [[169, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.loadSavedModel"]], "name (legalnermodel attribute)": [[169, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.name"]], "pretrained() (legalnermodel static method)": [[169, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.pretrained"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[169, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"]], "zeroshotnermodel (class in sparknlp_jsl.legal.token_classification.ner.zero_shot_ner)": [[170, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[170, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"]], "modeltracer (class in sparknlp_jsl.modeltracer)": [[171, "sparknlp_jsl.modelTracer.ModelTracer"]], "adduidcols() (modeltracer method)": [[171, "sparknlp_jsl.modelTracer.ModelTracer.addUidCols"]], "sparknlp_jsl.modeltracer": [[171, "module-sparknlp_jsl.modelTracer"]], "rulebasedclassifier (class in sparknlp_jsl.nlp_test.bias.bias_testing)": [[172, "sparknlp_jsl.nlp_test.bias.bias_testing.RuleBasedClassifier"]], "init_medical_gender_classifier() (in module sparknlp_jsl.nlp_test.bias.bias_testing)": [[172, "sparknlp_jsl.nlp_test.bias.bias_testing.init_medical_gender_classifier"]], "sparknlp_jsl.nlp_test.bias.bias_testing": [[172, "module-sparknlp_jsl.nlp_test.bias.bias_testing"]], "test_gender_bias() (in module sparknlp_jsl.nlp_test.bias.bias_testing)": [[172, "sparknlp_jsl.nlp_test.bias.bias_testing.test_gender_bias"]], "transform() (rulebasedclassifier method)": [[172, "sparknlp_jsl.nlp_test.bias.bias_testing.RuleBasedClassifier.transform"]], "sparknlp_jsl.nlp_test.bias": [[173, "module-sparknlp_jsl.nlp_test.bias"]], "sparknlp_jsl.nlp_test": [[174, "module-sparknlp_jsl.nlp_test"]], "sparknlp_jsl.nlp_test.noisy_labels": [[175, "module-sparknlp_jsl.nlp_test.noisy_labels"]], "interactivefix (class in sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix"]], "add_flag_to_conll() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.add_flag_to_conll"]], "adjust_page_size() (interactivefix method)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.adjust_page_size"]], "apply_fixes() (interactivefix method)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.apply_fixes"]], "apply_label_fixes() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.apply_label_fixes"]], "conll_reader() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.conll_reader"]], "conll_writer() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.conll_writer"]], "create_grid() (interactivefix method)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.create_grid"]], "display() (interactivefix method)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.display"]], "empty_grid() (interactivefix method)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.empty_grid"]], "fill_grid() (interactivefix method)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.fill_grid"]], "fix_all() (interactivefix method)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.fix_all"]], "fix_label() (interactivefix method)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.fix_label"]], "get_cell_element() (interactivefix method)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_cell_element"]], "get_central_grid() (interactivefix method)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_central_grid"]], "get_classes() (interactivefix method)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_classes"]], "get_default_indx() (interactivefix method)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_default_indx"]], "get_drop_down() (interactivefix method)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_drop_down"]], "get_drop_down_title() (interactivefix method)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_drop_down_title"]], "get_footer() (interactivefix method)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_footer"]], "get_header() (interactivefix method)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_header"]], "get_page_control_buttons() (interactivefix method)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_page_control_buttons"]], "get_page_number() (interactivefix method)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_page_number"]], "get_sentence() (interactivefix method)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_sentence"]], "get_title_html() (interactivefix method)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_title_html"]], "next_page() (interactivefix method)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.next_page"]], "num_sample_drop_down() (interactivefix method)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.num_sample_drop_down"]], "prev_page() (interactivefix method)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.prev_page"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing": [[176, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing"]], "update_with_model_predictions() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[176, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.update_with_model_predictions"]], "calculate_label_error_score() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing)": [[177, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing.calculate_label_error_score"]], "get_label_quality_scores() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing)": [[177, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing.get_label_quality_scores"]], "get_unique_entities() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing)": [[177, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing.get_unique_entities"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing": [[177, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing"]], "test_label_errors() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing)": [[177, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing.test_label_errors"]], "sparknlp_jsl.nlp_test.noisy_labels.utils": [[178, "module-sparknlp_jsl.nlp_test.noisy_labels.utils"]], "stylesheet (in module sparknlp_jsl.nlp_test.noisy_labels.utils)": [[178, "sparknlp_jsl.nlp_test.noisy_labels.utils.stylesheet"]], "sparknlp_jsl.nlp_test.robustness": [[179, "module-sparknlp_jsl.nlp_test.robustness"]], "add_context_to_data() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[180, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.add_context_to_data"]], "add_contractions() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[180, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.add_contractions"]], "add_punctuation_to_data() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[180, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.add_punctuation_to_data"]], "add_typo_to_sentence() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[180, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.add_typo_to_sentence"]], "augment_robustness() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[180, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.augment_robustness"]], "conll_reader() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[180, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.conll_reader"]], "convert_accent() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[180, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.convert_accent"]], "create_dataframe() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[180, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.create_dataframe"]], "create_terminology() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[180, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.create_terminology"]], "filter_by_entity_type() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[180, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.filter_by_entity_type"]], "get_cohyponyms_wordnet() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[180, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.get_cohyponyms_wordnet"]], "get_sample() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[180, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.get_sample"]], "introduce_typos() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[180, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.introduce_typos"]], "modify_capitalization_lower() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[180, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.modify_capitalization_lower"]], "modify_capitalization_title() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[180, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.modify_capitalization_title"]], "modify_capitalization_upper() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[180, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.modify_capitalization_upper"]], "sparknlp_jsl.nlp_test.robustness.robustness_fixing": [[180, "module-sparknlp_jsl.nlp_test.robustness.robustness_fixing"]], "strip_punctuation_from_data() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[180, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.strip_punctuation_from_data"]], "swap_entities_with_terminology() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[180, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.swap_entities_with_terminology"]], "swap_with_cohyponym() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[180, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.swap_with_cohyponym"]], "test_and_augment_robustness() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[180, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.test_and_augment_robustness"]], "add_context() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[181, "sparknlp_jsl.nlp_test.robustness.robustness_testing.add_context"]], "add_contractions() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[181, "sparknlp_jsl.nlp_test.robustness.robustness_testing.add_contractions"]], "add_punctuation() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[181, "sparknlp_jsl.nlp_test.robustness.robustness_testing.add_punctuation"]], "add_typo_to_sentence() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[181, "sparknlp_jsl.nlp_test.robustness.robustness_testing.add_typo_to_sentence"]], "american_to_british() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[181, "sparknlp_jsl.nlp_test.robustness.robustness_testing.american_to_british"]], "british_to_american() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[181, "sparknlp_jsl.nlp_test.robustness.robustness_testing.british_to_american"]], "calculate_metrics() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[181, "sparknlp_jsl.nlp_test.robustness.robustness_testing.calculate_metrics"]], "conll_sentence_reader() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[181, "sparknlp_jsl.nlp_test.robustness.robustness_testing.conll_sentence_reader"]], "create_terminology() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[181, "sparknlp_jsl.nlp_test.robustness.robustness_testing.create_terminology"]], "get_cohyponyms_wordnet() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[181, "sparknlp_jsl.nlp_test.robustness.robustness_testing.get_cohyponyms_wordnet"]], "introduce_typos() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[181, "sparknlp_jsl.nlp_test.robustness.robustness_testing.introduce_typos"]], "modify_capitalization() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[181, "sparknlp_jsl.nlp_test.robustness.robustness_testing.modify_capitalization"]], "remove_context_tokens() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[181, "sparknlp_jsl.nlp_test.robustness.robustness_testing.remove_context_tokens"]], "remove_contraction_tokens() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[181, "sparknlp_jsl.nlp_test.robustness.robustness_testing.remove_contraction_tokens"]], "remove_punctuation_tokens() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[181, "sparknlp_jsl.nlp_test.robustness.robustness_testing.remove_punctuation_tokens"]], "run_test() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[181, "sparknlp_jsl.nlp_test.robustness.robustness_testing.run_test"]], "sparknlp_jsl.nlp_test.robustness.robustness_testing": [[181, "module-sparknlp_jsl.nlp_test.robustness.robustness_testing"]], "strip_punctuation() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[181, "sparknlp_jsl.nlp_test.robustness.robustness_testing.strip_punctuation"]], "swap_named_entities_from_terminology() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[181, "sparknlp_jsl.nlp_test.robustness.robustness_testing.swap_named_entities_from_terminology"]], "swap_with_cohyponym() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[181, "sparknlp_jsl.nlp_test.robustness.robustness_testing.swap_with_cohyponym"]], "test_robustness() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[181, "sparknlp_jsl.nlp_test.robustness.robustness_testing.test_robustness"]], "calculate_proportion() (in module sparknlp_jsl.nlp_test.robustness.utils)": [[182, "sparknlp_jsl.nlp_test.robustness.utils.calculate_proportion"]], "get_augmentation_proportions() (in module sparknlp_jsl.nlp_test.robustness.utils)": [[182, "sparknlp_jsl.nlp_test.robustness.utils.get_augmentation_proportions"]], "sparknlp_jsl.nlp_test.robustness.utils": [[182, "module-sparknlp_jsl.nlp_test.robustness.utils"]], "suggest_perturbations() (in module sparknlp_jsl.nlp_test.robustness.utils)": [[182, "sparknlp_jsl.nlp_test.robustness.utils.suggest_perturbations"]], "internalresourcedownloader (class in sparknlp_jsl.pretrained)": [[183, "sparknlp_jsl.pretrained.InternalResourceDownloader"]], "downloadmodel() (internalresourcedownloader static method)": [[183, "sparknlp_jsl.pretrained.InternalResourceDownloader.downloadModel"]], "printprogress() (in module sparknlp_jsl.pretrained)": [[183, "sparknlp_jsl.pretrained.printProgress"]], "returnprivatemodels() (internalresourcedownloader static method)": [[183, "sparknlp_jsl.pretrained.InternalResourceDownloader.returnPrivateModels"]], "returnprivatepipelines() (internalresourcedownloader static method)": [[183, "sparknlp_jsl.pretrained.InternalResourceDownloader.returnPrivatePipelines"]], "showavailableannotators() (internalresourcedownloader static method)": [[183, "sparknlp_jsl.pretrained.InternalResourceDownloader.showAvailableAnnotators"]], "showprivatemodels() (internalresourcedownloader static method)": [[183, "sparknlp_jsl.pretrained.InternalResourceDownloader.showPrivateModels"]], "showprivatepipelines() (internalresourcedownloader static method)": [[183, "sparknlp_jsl.pretrained.InternalResourceDownloader.showPrivatePipelines"]], "showuncategorizedresources() (internalresourcedownloader static method)": [[183, "sparknlp_jsl.pretrained.InternalResourceDownloader.showUnCategorizedResources"]], "sparknlp_jsl.pretrained": [[183, "module-sparknlp_jsl.pretrained"]], "structureddeidentification (class in sparknlp_jsl.structured_deidentification)": [[184, "sparknlp_jsl.structured_deidentification.StructuredDeidentification"]], "obfuscatecolumns() (structureddeidentification method)": [[184, "sparknlp_jsl.structured_deidentification.StructuredDeidentification.obfuscateColumns"]], "sparknlp_jsl.structured_deidentification": [[184, "module-sparknlp_jsl.structured_deidentification"]], "texttodocumentscolumns (class in sparknlp_jsl.text_to_documents_columns)": [[185, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns"]], "sparknlp_jsl.text_to_documents_columns": [[185, "module-sparknlp_jsl.text_to_documents_columns"]], "todocumentscolumns() (texttodocumentscolumns method)": [[185, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns.toDocumentsColumns"]], "annotationtooljsonreader (class in sparknlp_jsl.training)": [[186, "sparknlp_jsl.training.AnnotationToolJsonReader"]], "cantemistreader (class in sparknlp_jsl.training)": [[186, "sparknlp_jsl.training.CantemistReader"]], "codiespreader (class in sparknlp_jsl.training)": [[186, "sparknlp_jsl.training.CodiEspReader"]], "redatasethelper (class in sparknlp_jsl.training)": [[186, "sparknlp_jsl.training.REDatasetHelper"]], "synonymaugmentationumls (class in sparknlp_jsl.training)": [[186, "sparknlp_jsl.training.SynonymAugmentationUMLS"]], "augmentcsv() (synonymaugmentationumls method)": [[186, "sparknlp_jsl.training.SynonymAugmentationUMLS.augmentCsv"]], "augmentdataframe() (synonymaugmentationumls method)": [[186, "sparknlp_jsl.training.SynonymAugmentationUMLS.augmentDataFrame"]], "create_annotation_column() (redatasethelper method)": [[186, "sparknlp_jsl.training.REDatasetHelper.create_annotation_column"]], "generateassertiontrainset() (annotationtooljsonreader method)": [[186, "sparknlp_jsl.training.AnnotationToolJsonReader.generateAssertionTrainSet"]], "generateconll() (annotationtooljsonreader method)": [[186, "sparknlp_jsl.training.AnnotationToolJsonReader.generateConll"]], "generateplainassertiontrainset() (annotationtooljsonreader method)": [[186, "sparknlp_jsl.training.AnnotationToolJsonReader.generatePlainAssertionTrainSet"]], "readdataset() (annotationtooljsonreader method)": [[186, "sparknlp_jsl.training.AnnotationToolJsonReader.readDataset"]], "readdatasettaskner() (cantemistreader method)": [[186, "sparknlp_jsl.training.CantemistReader.readDatasetTaskNer"]], "readdatasettaskx() (codiespreader method)": [[186, "sparknlp_jsl.training.CodiEspReader.readDatasetTaskX"]], "sparknlp_jsl.training": [[186, "module-sparknlp_jsl.training"]], "tf_graph (in module sparknlp_jsl.training)": [[186, "sparknlp_jsl.training.tf_graph"]], "tf_graph_1x (in module sparknlp_jsl.training)": [[186, "sparknlp_jsl.training.tf_graph_1x"]], "assertion_log_parser (class in sparknlp_jsl.training_log_parser)": [[187, "sparknlp_jsl.training_log_parser.assertion_log_parser"]], "evaluate() (ner_log_parser method)": [[187, "sparknlp_jsl.training_log_parser.ner_log_parser.evaluate"]], "evaluate_conll_file() (ner_log_parser method)": [[187, "sparknlp_jsl.training_log_parser.ner_log_parser.evaluate_conll_file"]], "get_best_f1_scores() (assertion_log_parser method)": [[187, "sparknlp_jsl.training_log_parser.assertion_log_parser.get_best_f1_scores"]], "get_best_f1_scores() (ner_log_parser method)": [[187, "sparknlp_jsl.training_log_parser.ner_log_parser.get_best_f1_scores"]], "get_charts() (assertion_log_parser method)": [[187, "sparknlp_jsl.training_log_parser.assertion_log_parser.get_charts"]], "get_charts() (ner_log_parser method)": [[187, "sparknlp_jsl.training_log_parser.ner_log_parser.get_charts"]], "loss_plot() (assertion_log_parser method)": [[187, "sparknlp_jsl.training_log_parser.assertion_log_parser.loss_plot"]], "loss_plot() (ner_log_parser method)": [[187, "sparknlp_jsl.training_log_parser.ner_log_parser.loss_plot"]], "ner_log_parser (class in sparknlp_jsl.training_log_parser)": [[187, "sparknlp_jsl.training_log_parser.ner_log_parser"]], "parse_logfile() (assertion_log_parser method)": [[187, "sparknlp_jsl.training_log_parser.assertion_log_parser.parse_logfile"]], "parse_logfile() (ner_log_parser method)": [[187, "sparknlp_jsl.training_log_parser.ner_log_parser.parse_logfile"]], "sparknlp_jsl.training_log_parser": [[187, "module-sparknlp_jsl.training_log_parser"]], "updatemodels (class in sparknlp_jsl.updatemodels)": [[188, "sparknlp_jsl.updateModels.UpdateModels"]], "sparknlp_jsl.updatemodels": [[188, "module-sparknlp_jsl.updateModels"]], "updatecachemodels() (updatemodels static method)": [[188, "sparknlp_jsl.updateModels.UpdateModels.updateCacheModels"]], "updatemodels() (updatemodels static method)": [[188, "sparknlp_jsl.updateModels.UpdateModels.updateModels"]], "get_mt_samples() (in module sparknlp_jsl.util)": [[189, "sparknlp_jsl.util.get_mt_samples"]], "sparknlp_jsl.util": [[189, "module-sparknlp_jsl.util"]], "document_assembler (in module sparknlp_jsl.utils.alab_utils)": [[190, "sparknlp_jsl.utils.alab_utils.document_assembler"]], "empty_df (in module sparknlp_jsl.utils.alab_utils)": [[190, "sparknlp_jsl.utils.alab_utils.empty_df"]], "get_doc_assembler() (in module sparknlp_jsl.utils.alab_utils)": [[190, "sparknlp_jsl.utils.alab_utils.get_doc_assembler"]], "get_empty_df() (in module sparknlp_jsl.utils.alab_utils)": [[190, "sparknlp_jsl.utils.alab_utils.get_empty_df"]], "get_ner_df() (in module sparknlp_jsl.utils.alab_utils)": [[190, "sparknlp_jsl.utils.alab_utils.get_ner_df"]], "get_ner_sentence_borders() (in module sparknlp_jsl.utils.alab_utils)": [[190, "sparknlp_jsl.utils.alab_utils.get_ner_sentence_borders"]], "get_nlp_pos_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[190, "sparknlp_jsl.utils.alab_utils.get_nlp_pos_pipeline"]], "get_nlp_token_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[190, "sparknlp_jsl.utils.alab_utils.get_nlp_token_pipeline"]], "get_pos() (in module sparknlp_jsl.utils.alab_utils)": [[190, "sparknlp_jsl.utils.alab_utils.get_pos"]], "get_regex_tokenizer() (in module sparknlp_jsl.utils.alab_utils)": [[190, "sparknlp_jsl.utils.alab_utils.get_regex_tokenizer"]], "get_regular_tokenizer() (in module sparknlp_jsl.utils.alab_utils)": [[190, "sparknlp_jsl.utils.alab_utils.get_regular_tokenizer"]], "get_rel_df() (in module sparknlp_jsl.utils.alab_utils)": [[190, "sparknlp_jsl.utils.alab_utils.get_rel_df"]], "get_sent_detector() (in module sparknlp_jsl.utils.alab_utils)": [[190, "sparknlp_jsl.utils.alab_utils.get_sent_detector"]], "get_sentence_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[190, "sparknlp_jsl.utils.alab_utils.get_sentence_pipeline"]], "get_single_task_conll() (in module sparknlp_jsl.utils.alab_utils)": [[190, "sparknlp_jsl.utils.alab_utils.get_single_task_conll"]], "get_token_df() (in module sparknlp_jsl.utils.alab_utils)": [[190, "sparknlp_jsl.utils.alab_utils.get_token_df"]], "nlp_pos_pipeline (in module sparknlp_jsl.utils.alab_utils)": [[190, "sparknlp_jsl.utils.alab_utils.nlp_pos_pipeline"]], "nlp_token_pipeline (in module sparknlp_jsl.utils.alab_utils)": [[190, "sparknlp_jsl.utils.alab_utils.nlp_token_pipeline"]], "pos (in module sparknlp_jsl.utils.alab_utils)": [[190, "sparknlp_jsl.utils.alab_utils.pos"]], "pos_pipeline_initialized (in module sparknlp_jsl.utils.alab_utils)": [[190, "sparknlp_jsl.utils.alab_utils.pos_pipeline_initialized"]], "read_conll() (in module sparknlp_jsl.utils.alab_utils)": [[190, "sparknlp_jsl.utils.alab_utils.read_conll"]], "regex_tokenizer (in module sparknlp_jsl.utils.alab_utils)": [[190, "sparknlp_jsl.utils.alab_utils.regex_tokenizer"]], "regular_tokenizer (in module sparknlp_jsl.utils.alab_utils)": [[190, "sparknlp_jsl.utils.alab_utils.regular_tokenizer"]], "sentence_detector (in module sparknlp_jsl.utils.alab_utils)": [[190, "sparknlp_jsl.utils.alab_utils.sentence_detector"]], "sparknlp_jsl.utils.alab_utils": [[190, "module-sparknlp_jsl.utils.alab_utils"]], "token_pipeline_initialized (in module sparknlp_jsl.utils.alab_utils)": [[190, "sparknlp_jsl.utils.alab_utils.token_pipeline_initialized"]], "sparknlp_jsl.utils.conll_parse": [[191, "module-sparknlp_jsl.utils.conll_parse"]], "deidentifier (class in sparknlp_jsl.utils.deidentification_module)": [[192, "sparknlp_jsl.utils.deidentification_module.Deidentifier"]], "deid_with_custom_pipeline() (deidentifier method)": [[192, "sparknlp_jsl.utils.deidentification_module.Deidentifier.deid_with_custom_pipeline"]], "deid_with_pp() (deidentifier method)": [[192, "sparknlp_jsl.utils.deidentification_module.Deidentifier.deid_with_pp"]], "deidentify() (deidentifier method)": [[192, "sparknlp_jsl.utils.deidentification_module.Deidentifier.deidentify"]], "spark (deidentifier attribute)": [[192, "sparknlp_jsl.utils.deidentification_module.Deidentifier.spark"]], "sparknlp_jsl.utils.deidentification_module": [[192, "module-sparknlp_jsl.utils.deidentification_module"]], "structured_deidentifier() (deidentifier method)": [[192, "sparknlp_jsl.utils.deidentification_module.Deidentifier.structured_deidentifier"]], "is_module_importable() (in module sparknlp_jsl.utils.imports)": [[193, "sparknlp_jsl.utils.imports.is_module_importable"]], "sparknlp_jsl.utils.imports": [[193, "module-sparknlp_jsl.utils.imports"]], "sparknlp_jsl.utils": [[194, "module-sparknlp_jsl.utils"]], "assertion (internalannotatortype attribute)": [[195, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.ASSERTION"]], "disambiguation (internalannotatortype attribute)": [[195, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.DISAMBIGUATION"]], "feature_vector (internalannotatortype attribute)": [[195, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.FEATURE_VECTOR"]], "internalannotatortype (class in sparknlp_jsl.utils.licensed_annotator_type)": [[195, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType"]], "keyword (internalannotatortype attribute)": [[195, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.KEYWORD"]], "selector (internalannotatortype attribute)": [[195, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.SELECTOR"]], "sql (internalannotatortype attribute)": [[195, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.SQL"]], "sparknlp_jsl.utils.licensed_annotator_type": [[195, "module-sparknlp_jsl.utils.licensed_annotator_type"]], "sparknlp_jsl.utils.log_parse": [[196, "module-sparknlp_jsl.utils.log_parse"]], "evaluate() (in module sparknlp_jsl.utils.ner_utils)": [[197, "sparknlp_jsl.utils.ner_utils.evaluate"]], "evaluate_conll_file() (in module sparknlp_jsl.utils.ner_utils)": [[197, "sparknlp_jsl.utils.ner_utils.evaluate_conll_file"]], "get_charts() (in module sparknlp_jsl.utils.ner_utils)": [[197, "sparknlp_jsl.utils.ner_utils.get_charts"]], "loss_plot() (in module sparknlp_jsl.utils.ner_utils)": [[197, "sparknlp_jsl.utils.ner_utils.loss_plot"]], "sparknlp_jsl.utils.ner_utils": [[197, "module-sparknlp_jsl.utils.ner_utils"]], "colors (in module sparknlp_jsl.utils.ocr_nlp_processor)": [[198, "sparknlp_jsl.utils.ocr_nlp_processor.colors"]], "ocr_entity_processor() (in module sparknlp_jsl.utils.ocr_nlp_processor)": [[198, "sparknlp_jsl.utils.ocr_nlp_processor.ocr_entity_processor"]], "sparknlp_jsl.utils.ocr_nlp_processor": [[198, "module-sparknlp_jsl.utils.ocr_nlp_processor"]], "colors (in module sparknlp_jsl.utils.ocr_utils)": [[199, "sparknlp_jsl.utils.ocr_utils.colors"]], "colors_rgb (in module sparknlp_jsl.utils.ocr_utils)": [[199, "sparknlp_jsl.utils.ocr_utils.colors_rgb"]], "label2color (in module sparknlp_jsl.utils.ocr_utils)": [[199, "sparknlp_jsl.utils.ocr_utils.label2color"]], "label2rgb (in module sparknlp_jsl.utils.ocr_utils)": [[199, "sparknlp_jsl.utils.ocr_utils.label2rgb"]], "sparknlp_jsl.utils.ocr_utils": [[199, "module-sparknlp_jsl.utils.ocr_utils"]], "aggregate_entities() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[200, "sparknlp_jsl.utils.training_log_parser_utils.aggregate_entities"]], "calc_metrics() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[200, "sparknlp_jsl.utils.training_log_parser_utils.calc_metrics"]], "count_chunks() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[200, "sparknlp_jsl.utils.training_log_parser_utils.count_chunks"]], "get_result() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[200, "sparknlp_jsl.utils.training_log_parser_utils.get_result"]], "is_chunk_end() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[200, "sparknlp_jsl.utils.training_log_parser_utils.is_chunk_end"]], "is_chunk_start() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[200, "sparknlp_jsl.utils.training_log_parser_utils.is_chunk_start"]], "sparknlp_jsl.utils.training_log_parser_utils": [[200, "module-sparknlp_jsl.utils.training_log_parser_utils"]], "split_tag() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[200, "sparknlp_jsl.utils.training_log_parser_utils.split_tag"]]}})