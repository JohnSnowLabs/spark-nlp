package com.johnsnowlabs.nlp.annotators.similarity

import com.johnsnowlabs.nlp.AnnotatorType.{DOC_SIMILARITY_RANKINGS, SENTENCE_EMBEDDINGS}
import com.johnsnowlabs.nlp.embeddings.HasEmbeddingsProperties
import com.johnsnowlabs.nlp.serialization.MapFeature
import com.johnsnowlabs.nlp.{Annotation, AnnotatorModel, HasSimpleAnnotate, ParamsAndFeaturesWritable}
import com.johnsnowlabs.storage.HasStorageRef
import org.apache.spark.ml.util.{DefaultParamsReadable, Identifiable}
import org.apache.spark.sql.functions.col

import scala.util.hashing.MurmurHash3

class DocumentSimilarityRankerModel(override val uid: String)
  extends AnnotatorModel[DocumentSimilarityRankerModel]
    with HasSimpleAnnotate[DocumentSimilarityRankerModel]
    with HasStorageRef
    with HasEmbeddingsProperties
    with ParamsAndFeaturesWritable {

  override val inputAnnotatorTypes: Array[AnnotatorType] = Array(SENTENCE_EMBEDDINGS)

  override val outputAnnotatorType: AnnotatorType = DOC_SIMILARITY_RANKINGS

  def this() = this(Identifiable.randomUID("DOC_SIMILARITY_RANKER"))

  /** Dictionary of words with their vectors
   *
   * @group param
   */
  val similarityMappings: MapFeature[String, Array[String]] = new MapFeature(this, "similarityMappings")

  /** @group setParam */
  def setSimilarityMappings(value: Map[String, Array[String]]): this.type = set(similarityMappings, value)

  def getSimilarityMappings: Array[String] = $$(similarityMappings).getOrElse("similarityMappings", Array(""))

  setDefault(
    inputCols -> Array(SENTENCE_EMBEDDINGS),
    outputCol -> DOC_SIMILARITY_RANKINGS
  )

  /** takes a document and annotations and produces new annotations of this annotator's annotation
   * type
   *
   * @param annotations
   * Annotations that correspond to inputAnnotationCols generated by previous annotators if any
   * @return
   * any number of annotations processed for every input annotation. Not necessary one to one
   * relationship
   */
  override def annotate(annotations: Seq[Annotation]): Seq[Annotation] = {

    //    1=>0|1
    val mappings: Map[String, String] = getSimilarityMappings
      .map(s => s.split("=>"))
      .map { case Array(index, neighbors) => (index, neighbors) }
      .toMap

    annotations.map(
      annotation => {
        val inputResult = annotation.result
        val indexTarget = MurmurHash3.stringHash(inputResult, MurmurHash3.stringSeed).toString
        val neighbors: String = mappings.getOrElse(indexTarget, "NA")

        Annotation(
          annotatorType = outputAnnotatorType,
          begin = annotation.begin,
          end = annotation.end,
          result = annotation.result,
          metadata = annotation.metadata + ("id"-> indexTarget) + ("neighbors" -> neighbors) ,
          embeddings = annotation.embeddings)
      }
    )
  }
}

object DocumentSimilarityRanker extends DefaultParamsReadable[DocumentSimilarityRankerModel]