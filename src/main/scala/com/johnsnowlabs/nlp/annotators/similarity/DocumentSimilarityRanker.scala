package com.johnsnowlabs.nlp.annotators.similarity

import com.johnsnowlabs.nlp.AnnotatorType.{DOC_SIMILARITY_RANKINGS, SENTENCE_EMBEDDINGS}
import com.johnsnowlabs.nlp.{Annotation, AnnotatorModel, HasSimpleAnnotate}
import org.apache.spark.ml.param.Param
import org.apache.spark.ml.util.{DefaultParamsReadable, Identifiable}

class DocumentSimilarityRanker(override val uid: String)
  extends AnnotatorModel[DocumentSimilarityRanker]
    with HasSimpleAnnotate[DocumentSimilarityRanker] {

//  setDefault(
//    inputCols -> Array(SENTENCE_EMBEDDINGS),
//    outputCol -> DOC_SIMILARITY_RANKINGS,
//    similarityMethod -> "brp",
//    numberOfNeighbours -> 10
//  )

  def this() = this(Identifiable.randomUID("DOC_SIMILARITY_RANKER"))

  def setSimilarityMethod(simMethod: String): this.type = set(similarityMethod, simMethod)

  def getSimilarityMethod: String = $(similarityMethod)

  def setQuery(q: String): this.type = set(query, q)

  def getQuery: String = $(query)

  def setNumberOfNeighbours(nbOfNeighbours: Int): this.type = set(numberOfNeighbours, nbOfNeighbours)

  def getNumberOfNeighbours: Int = $(numberOfNeighbours)

  /** Choose how you would like to aggregate Word Embeddings to Sentence Embeddings (Default:
   * `"AVERAGE"`). Can either be `"AVERAGE"` or `"SUM"`.
   *
   * @group param
   */
  val numberOfNeighbours = new Param[Int](
    this,
    "numberOfNeighbours",
    "Choose how you would like to aggregate Word Embeddings to Sentence Embeddings: AVERAGE or SUM")

  /** Choose how you would like to aggregate Word Embeddings to Sentence Embeddings (Default:
   * `"AVERAGE"`). Can either be `"AVERAGE"` or `"SUM"`.
   *
   * @group param
   */
  val similarityMethod = new Param[String](
    this,
    "similarityMethod",
    "Choose how you would like to aggregate Word Embeddings to Sentence Embeddings: AVERAGE or SUM")

  /** Choose how you would like to aggregate Word Embeddings to Sentence Embeddings (Default:
   * `"AVERAGE"`). Can either be `"AVERAGE"` or `"SUM"`.
   *
   * @group param
   */
  val query = new Param[String](
    this,
    "query",
    "Choose how you would like to aggregate Word Embeddings to Sentence Embeddings: AVERAGE or SUM")


  /** takes a document and annotations and produces new annotations of this annotator's annotation
   * type
   *
   * @param annotations
   * Annotations that correspond to inputAnnotationCols generated by previous annotators if any
   * @return
   * any number of annotations processed for every input annotation. Not necessary one to one
   * relationship
   */
  override def annotate(annotations: Seq[Annotation]): Seq[Annotation] = {
    println("into the annotator")
    Seq.empty
  }

  /** Annotator reference id. Used to identify elements in metadata or to refer to this annotator
   * type
   */
  override val inputAnnotatorTypes: Array[AnnotatorType] = Array(SENTENCE_EMBEDDINGS)
  override val outputAnnotatorType: AnnotatorType = DOC_SIMILARITY_RANKINGS
}

object DocumentSimilarityRanker extends DefaultParamsReadable[DocumentSimilarityRanker]