package com.johnsnowlabs.nlp

import com.johnsnowlabs.nlp.AnnotatorType.DOCUMENT
import org.apache.spark.ml.util.Identifiable

//TODO: Annotator or SparkNLPTransformer or CustomAnnotator or AnnotatorTransformer?
abstract class Annotator(override val uid: String) extends HasSimpleAnnotate[Annotator]
{

  def this() = this(Identifiable.randomUID("ANNOTATOR"))

  override val inputAnnotatorTypes: Array[String] = Array(DOCUMENT)

  override val outputAnnotatorType: AnnotatorType = DOCUMENT

  /**
   * takes a document and annotations and produces new annotations of this annotator's annotation type
   *
   * @param annotations Annotations that correspond to inputAnnotationCols generated by previous annotators if any
   * @return any number of annotations processed for every input annotation. Not necessary one to one relationship
   */
  override def annotate(annotations: Seq[Annotation]): Seq[Annotation]

}
